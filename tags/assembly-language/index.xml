<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assembly Language on Looper 的博客</title>
    <link>/tags/assembly-language/</link>
    <description>Recent content in Assembly Language on Looper 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright © Dylan(github.com/newlooper); all rights reserved.</copyright>
    <lastBuildDate>Sat, 01 Aug 2020 16:29:01 +0800</lastBuildDate><atom:link href="/tags/assembly-language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn Assembly Language 汇编语言学习(拙译)</title>
      <link>/post/trans/learn-assembly-language/</link>
      <pubDate>Sat, 01 Aug 2020 16:29:01 +0800</pubDate>
      
      <guid>/post/trans/learn-assembly-language/</guid>
      <description>
        
          &lt;h2 id=&#34;index-0&#34;&gt;Index-0&lt;/h2&gt;
&lt;p&gt;原址：https://asmtutor.com/ &lt;br&gt;
环境：nasm on x64 linux&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动机：程序员——多掌握几门计算机语言，还是有好处的&lt;/li&gt;
&lt;li&gt;主题：汇编语言——有其不可替代的作用&lt;/li&gt;
&lt;li&gt;呈示：天下语言逾千——汇编笑看沉舟侧畔&lt;/li&gt;
&lt;li&gt;展开：欲知程序真相——反编译难，反汇编易&lt;/li&gt;
&lt;li&gt;再现：大道器也不器——初见时如茶味甘苦，洞悉后若灌顶醍醐；原以为听多说多皆已昨，忽回首似曾相识又如陌；罢，风流不在谈峰健，相对无言味更长……&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原文作者自己说 『&lt;em&gt;This project was put together to teach myself NASM assembly language on linux.&lt;/em&gt;』&lt;/p&gt;
&lt;p&gt;欸~，原来是很窄众的哦。&lt;/p&gt;
&lt;p&gt;写的虽然通俗，但依然能感到其面向的并不是毫无编程基础的人群，所谓“某子不能隐真恶”，无论怎样努力的将大量概念、原理、知识安排到看似聊天般的文字中，这里都要提醒读者注意，提防因为好奇心而陷入递归学习的泥潭……&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lesson-1-hello-world&#34;&gt;Lesson 1 Hello, world!&lt;/h2&gt;
&lt;h3 id=&#34;背景知识&#34;&gt;背景知识&lt;/h3&gt;
&lt;p&gt;汇编语言是一种&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8E%E7%BA%A7%E8%AF%AD%E8%A8%80&#34;&gt;低级语言&lt;/a&gt;，汇编程序员与底层硬件之间唯一的接口只有&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8&#34;&gt;内核&lt;/a&gt;本身。用汇编语言编程，涉及到 Linux 内核提供的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&#34;&gt;系统调用&lt;/a&gt;机制。这些系统调用是操作系统内置的库函数，提供诸如读取键盘输入以及将输出显示到屏幕之类的功能。&lt;/p&gt;
&lt;p&gt;当用户程序发起系统调用时，内核将立即&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8C%82%E8%B5%B7&#34;&gt;挂起&lt;/a&gt;该程序，进而通过驱动程序让相关硬件完成用户程序所发起的任务请求，最后，将控制权交还给用户程序。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;驱动程序的驱动二字，形象的描述了内核对硬件的控制&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;在汇编语言中发起系统调用，需要向&lt;code&gt;EAX&lt;/code&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%84%E5%AD%98%E5%99%A8&#34;&gt;寄存器&lt;/a&gt;写入相应调用的函数编号(也即：操作码&lt;code&gt;OPCODE&lt;/code&gt;)，同时设置其他几个寄存器的值作为实际参数，一切准备停当后，指令&lt;code&gt;INT&lt;/code&gt;发送一个软&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%B7&#34;&gt;中断&lt;/a&gt;，内核收到中断请求后接受参数并执行相应的库函数。简单直接。&lt;/p&gt;
&lt;h3 id=&#34;来写我们的第壹个汇编程序吧美玉有瑕&#34;&gt;来写我们的第壹个汇编程序吧——美玉有瑕&lt;/h3&gt;
&lt;p&gt;还是从著名的例子——$$Hello, world! $$ 开始，我们的汇编程序将把这个让无数程序员产生&lt;code&gt;我已经学会这种语言了&lt;/code&gt;的错觉的字符串打印到&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E4%B8%B2%E6%B5%81#%E6%A8%99%E6%BA%96%E8%BC%B8%E5%87%BA_(stdout)&#34;&gt;标准输出&lt;/a&gt;上。&lt;/p&gt;
&lt;p&gt;首先，在数据段定义一个&lt;code&gt;msg&lt;/code&gt;变量，并赋给其一个字符串类型的值作为程序的输出。而在代码段中，通过编写全局标签&lt;code&gt;_start:&lt;/code&gt;，告诉内核我们(写的诗)程序开始的地方(没有远方)&lt;/p&gt;
&lt;p&gt;实际参数通过以下寄存器传给内核：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EDX&lt;/code&gt;存储字符串的长度(字节数)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ECX&lt;/code&gt;存储字符串的首地址(定义在数据段中的&lt;code&gt;msg&lt;/code&gt;变量加载到内存后所在的位置)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;存储字符串写操作的目标文件——本例中是&lt;code&gt;STDOUT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据类型和实际参数的含义可以在函数定义中查到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# https:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//github.com/torvalds/linux/blob/master/include/linux/syscalls.h
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asmlinkage&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sys_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，编译、链接、运行程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program - asmtutor.com&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld.o -o helloworld&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; assign msg variable with your message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; number of bytes to write - one for each letter plus 0Ah (line feed character)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; move the memory address of our message string into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; write to the STDOUT file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld.o -o helloworld
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello World!
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Segmentation fault
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices warning&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;错误&lt;/div&gt;
    &lt;p&gt;系统报告了错误——Segmentation fault&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-2-程序退出的正确姿势&#34;&gt;Lesson 2 程序退出的正确姿势&lt;/h2&gt;
&lt;h3 id=&#34;若干背景知识&#34;&gt;若干背景知识&lt;/h3&gt;
&lt;p&gt;让我们从第一课成功发起系统调用的短暂喜悦中回过神来，学习内核中另一个最重要的系统调用&lt;code&gt;sys_exit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还记得，上一课中，程序运行并打印了 $$Hello, world!$$ 字符串后，还看到了一句&lt;code&gt;Segmentation fault&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;嘛，计算机程序可看作是装载到内存中且被分割成若干节(或段)的一长条的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4&#34;&gt;指令&lt;/a&gt;序列，这个通用的内存池实际上被所有程序共享，保存着变量、指令，其他程序等等……每一个段都有一个地址，以便其中存储的二进制信息之后的定位访问。&lt;/p&gt;
&lt;p&gt;要执行加载到内存中的程序，我们使用全局标签&lt;code&gt;_start:&lt;/code&gt;来告诉操作系统从哪里找到并开始执行我们的程序。从那个位置开始，内存将依据程序的逻辑所决定的下一个地址被依次访问。内核在这些地址上愉悦的跳来跳去，执行着程序。&lt;/p&gt;
&lt;p&gt;与告诉内核&lt;strong&gt;一个程序从哪里开始&lt;/strong&gt;同样重要的是：&lt;strong&gt;程序在哪里结束&lt;/strong&gt;。这正是上一课中的程序所缺少的步骤。因为这个重要步骤的缺失，在调用完&lt;code&gt;sys_write&lt;/code&gt;，内核把控制权交还给我们的程序之后，程序继续顺序执行内存中紧挨在&lt;code&gt;int     80h&lt;/code&gt;之后的地址中的&amp;quot;指令&amp;quot;(天知道那一刻那里存的是啥)，我们不知道内核将执行什么指令，但显然在这个例子中内核噎住了，并且不高兴(非正常)的终止了进程，严肃的招待了我们一个：&lt;code&gt;Segmentation fault&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在程序的末尾调用&lt;code&gt;sys_exit&lt;/code&gt;吧！&lt;/p&gt;
&lt;h3 id=&#34;开写我们的第贰个汇编程序善始善终&#34;&gt;开写我们的第贰个汇编程序——善始善终&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sys_exit&lt;/code&gt;的定义简单明了。在&lt;a href=&#34;http://faculty.nps.edu/cseagle/assembly/sys_call.html&#34;&gt;Linux 系统调用表&lt;/a&gt;中，操作码&lt;code&gt;OPCODE 1&lt;/code&gt;被分配给了她，同时她比&lt;code&gt;sys_write&lt;/code&gt;节省一些，调用她只需要传一个参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# https:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//github.com/torvalds/linux/blob/master/include/linux/syscalls.h
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asmlinkage&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sys_exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error_code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;她要被要这样调：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;里存&lt;code&gt;0&lt;/code&gt;意为&lt;code&gt;零个错误&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EAX&lt;/code&gt;当然就存&lt;code&gt;1&lt;/code&gt;了 (sys_exit 的 OPCODE)&lt;/li&gt;
&lt;li&gt;然后，软中断&lt;code&gt;INT 80h&lt;/code&gt;和上一个例子一样&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program - asmtutor.com&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld.o -o helloworld&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; return 0 status on exit - &amp;#39;No Errors&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; invoke SYS_EXIT (kernel opcode 1)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld.o -o helloworld
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$$We\ will\ meet\ again,\ Segmentation\ fault$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lesson-3-计算字符串长度&#34;&gt;Lesson 3 计算字符串长度&lt;/h2&gt;
&lt;h3 id=&#34;又一些背景知识&#34;&gt;又一些背景知识&lt;/h3&gt;
&lt;p&gt;为什么需要计算字符串的长度？&lt;/p&gt;
&lt;p&gt;嘛，&lt;code&gt;sys_write&lt;/code&gt;必须知道我们传给她的字符串的指针和长度(字节数)，才能够打印输出。如果修改了&lt;code&gt;msg&lt;/code&gt;字符串的内容，也必须相应的更新字符串的长度，否则打印操作将不正确。&lt;/p&gt;
&lt;p&gt;为了验证这一点，我们用第二课中的例子。将&lt;code&gt;msg&lt;/code&gt;字符串修改为：(中括号帮助标识边界用)
$$[Hello,\ brave\ new\ world!]$$
编译、链接、执行修改后的程序。输出变为：
$$[Hello,\ brave\ ]$$
(仅有前 13 个 ascii 字符，空格也算)，这是因为我们没有将长度实参的值从原来的 13，更新为新字符串长度 23&lt;/p&gt;
&lt;h3 id=&#34;我们的第叁个汇编程序登场魔尺道丈&#34;&gt;我们的第叁个汇编程序登场——魔尺道丈&lt;/h3&gt;
&lt;p&gt;要计算某个字符串的长度，这里引入一种称作&lt;a href=&#34;https://www.tutorialspoint.com/cprogramming/c_pointer_arithmetic.htm&#34;&gt;指针算数&lt;/a&gt;的技术。具体步骤为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选两个寄存器初始化为相同的内存地址&lt;/li&gt;
&lt;li&gt;用其中一个寄存器(本例中使用&lt;code&gt;EAX&lt;/code&gt;)遍历要输出的字符串中的字符，在每次遇到 1 个字符的时候给自己加 1，直到其遇到一个代表字符串结尾的特殊字符&lt;/li&gt;
&lt;li&gt;此时用&lt;code&gt;EAX&lt;/code&gt;减去一开始初始化为相同值的另一个寄存器的值，结果就是字符的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有点像两个数组做减法，差表示了两个地址之间的元素的个数。我们用这个差值替代旧例子中的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%AB%E6%AD%BB&#34;&gt;硬编码&lt;/a&gt;值，传递给&lt;code&gt;sys_write&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;汇编程序中，通常用&lt;code&gt;CMP&lt;/code&gt;指令进行某种判断，根据其两个操作数的比较结果来置位标志寄存器，后续指令根据标志寄存器的值来决定如何推进程序的流程。&lt;/p&gt;
&lt;p&gt;在接下来的代码中，我们关注的是&lt;code&gt;ZF (Zero Flag)&lt;/code&gt;标志寄存器。如果&lt;code&gt;EAX&lt;/code&gt;寄存器中的地址所指向的字符 ascii 值等于 0，则&lt;code&gt;ZF&lt;/code&gt;被置位。而后&lt;code&gt;JZ&lt;/code&gt;指令看到&lt;code&gt;ZF&lt;/code&gt;为 1，就跳转到其操作数所指明的位置(流程改变)，这个跳转为的是退出 nextchar 循环从而执行后续的程序代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Calculating string length)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-len.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-len.o -o helloworld-len&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-len&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; we can modify this now without having to update anywhere else in the program&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address of our message string into EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address in EBX into EAX as well (Both now point to the same segment in memory)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; compare the byte pointed to by EAX at this address against zero (Zero is an end of string delimiter)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; jump (if the zero flagged has been set) to the point in the code labeled &amp;#39;finished&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; increment the address in EAX by one byte (if the zero flagged has NOT been set)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; jump to the point in the code labeled &amp;#39;nextchar&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; subtract the address in EBX from the address in EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;                            &lt;span class=&#34;c1&#34;&gt;; remember both registers started pointing to the same address (see line 15)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;                            &lt;span class=&#34;c1&#34;&gt;; but EAX has been incremented one byte for each character in the message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;                            &lt;span class=&#34;c1&#34;&gt;; when you subtract one memory address from another of the same type&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;                            &lt;span class=&#34;c1&#34;&gt;; the result is number of segments between them - in this case the number of bytes&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; EAX now equals the number of bytes in our string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; the rest of the code should be familiar now&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-len.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-len.o -o helloworld-len
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-len
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-4-子例程&#34;&gt;Lesson 4 子例程&lt;/h2&gt;
&lt;h3 id=&#34;引入子例程&#34;&gt;引入子例程&lt;/h3&gt;
&lt;p&gt;子例程——函数也。他们是可复用的代码片段，能够被用户程序调用完成各种各样的任务。和前面定义程序入口点一样，子例程也通过定义标签来声明其起始位置(如&lt;code&gt;strlen:&lt;/code&gt;)，然而不同之处在于程序不使用&lt;code&gt;JMP&lt;/code&gt;指令来访问子例程，取而代之的是使用&lt;code&gt;CALL&lt;/code&gt;指令。同样，子例程执行完成后的跳转回地址也不使用&lt;code&gt;JMP&lt;/code&gt;而是使用&lt;code&gt;RET&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同样是跳转到指令的所在处(memory address)，为什么子例程不使用&lt;code&gt;JMP&lt;/code&gt;呢？&lt;/p&gt;
&lt;p&gt;子例程的威力在于其可复用性，想在程序中的任意位置随时调用子例程，除了要跳转到子例程所在的地址外，还必须要编写一些逻辑来确定子例程运行完后跳转回的位置，如果使用&lt;code&gt;JMP&lt;/code&gt;将导致我们的代码中到处是非必要的标签。而使用&lt;code&gt;CALL&lt;/code&gt;和&lt;code&gt;RET&lt;/code&gt;，汇编语言将采用称作&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88&#34;&gt;堆栈&lt;/a&gt;的机制代为处理这些细节。&lt;/p&gt;
&lt;h3 id=&#34;引入栈&#34;&gt;引入栈&lt;/h3&gt;
&lt;p&gt;栈也在内存中，然而某个程序的栈内存对其而言具备一些特殊性质。栈内存的存取遵循&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%88%E9%80%B2%E5%85%88%E5%87%BA%E5%92%8C%E5%BE%8C%E9%80%B2%E5%85%88%E5%87%BA%E6%9C%83%E8%A8%88%E6%B3%95&#34;&gt;后进先出&lt;/a&gt; Last In First Out memory (LIFO)原则。可以将其想象成厨房中的一摞碟子，最后一个放在顶上的碟子也正是下一次用碟子时第一个被取走的。&lt;/p&gt;
&lt;p&gt;诚然，汇编中的栈内存放不下碟子，但是能放二进制数据。变量、地址、甚至其他程序都可以放进去。当调用子例程时，我们需要使用栈来临时存放上述数据以便子例程使用。&lt;/p&gt;
&lt;p&gt;通常，执行中的一段代码所使用着的任何寄存器，都应该在调用子例程之前，使用&lt;code&gt;PUSH&lt;/code&gt;指令将其中的数据压入栈，以此确保子例程返回后可以还原这些寄存器的原有值(因为子例程有可能会使用上述寄存器存储新的数据，不预先保存的话被覆盖后就丢失了)，还原通过与&lt;code&gt;PUSH&lt;/code&gt;指令执行顺序相反的顺序执行&lt;code&gt;POP&lt;/code&gt;指令来完成。如此，就不必担心子例程执行过程中对上述寄存的修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CALL&lt;/code&gt;和&lt;code&gt;RET&lt;/code&gt;两个指令与&lt;code&gt;PUSH&lt;/code&gt;和&lt;code&gt;POP&lt;/code&gt;相似，也使用到了堆栈，但他们除了压栈/弹栈外还做了额外的工作，当&lt;code&gt;CALL&lt;/code&gt;一个子例程时，&lt;code&gt;CALL&lt;/code&gt;指令所在位置的下一个内存地址(return address)被压入栈，同时子例程所在地址被存入&lt;code&gt;EIP&lt;/code&gt;。这个存在栈内存中的地址(return address)将由在子例程中的&lt;code&gt;RET&lt;/code&gt;指令弹给&lt;code&gt;EIP&lt;/code&gt;从而跳转回调用者的代码继续执行。希望这段描述能够些许的消除【内联标签使用&lt;code&gt;JMP&lt;/code&gt;，而子例程(函数)调用使用&lt;code&gt;CALL&lt;/code&gt;】的疑惑。&lt;/p&gt;
&lt;h3 id=&#34;我们的第肆个汇编程序管中窥豹&#34;&gt;我们的第肆个汇编程序——管中窥豹&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Subroutines)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-len.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-len.o -o helloworld-len&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-len&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address of our message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;strlen&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our function to calculate the length of the string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; our function leaves the result in EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; this is all the same as before&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;strlen:&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;; this is our first function declaration&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push the value in EBX onto the stack to preserve it while we use EBX in this function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address in EAX into EBX (Both point to the same segment in memory)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;; this is the same as lesson3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; pop the value on the stack back into EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;; return to where the function was called&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-len.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-len.o -o helloworld-len
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-len
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-5-外部包含文件&#34;&gt;Lesson 5 外部包含文件&lt;/h2&gt;
&lt;p&gt;外部包含文件使得我们能够将程序的代码分散不同文件中。对于撰写清晰、易维护的程序来说这个技术很有用。可重用代码能够写成子例程保存在分散的文件中，这类文件被称为库。当你想使用库中的某段代码时，包含该库文件到你的程序，就好像该文件的内容是就是你程序的一部分一样。&lt;/p&gt;
&lt;p&gt;本节我们把计算字符串长度的子例程移到外部文件中。同时，将字符串打印和程序退出逻辑也都修缮为子例程一并移到外部文件里。如此，瘦身后的程序看起来更加清晰、易读。&lt;/p&gt;
&lt;p&gt;这里多声明一条消息，调用两次字符串打印子例程来演示对代码的复用。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;之后的课程中，除非 functions.asm 发生了改变，否则其代码将被省略&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第伍个汇编程序他山之石&#34;&gt;我们的第伍个汇编程序——他山之石&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; functions.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; int slen(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String length calculation function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;slen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprint(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprint:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;slen&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void exit()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Exit program and restore resources&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;quit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (External file include)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-inc.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-inc.o -o helloworld-inc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-inc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;                             &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; include our external file
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; our first message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is how we recycle in NASM.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; our second message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of our first message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of our second message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-inc.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-inc.o -o helloworld-inc
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-inc
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is how we recycle in NASM.
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices warning&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;错误&lt;/div&gt;
    &lt;p&gt;貌似第二条消息被打印了两次，我们在下节课修正:-)&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-6-null-终止符&#34;&gt;Lesson 6 NULL 终止符&lt;/h2&gt;
&lt;p&gt;好吧，上一节的结尾我用“貌似”二字修饰了&lt;code&gt;msg2&lt;/code&gt;被打印了两次这一现象，实际上程序并没有逻辑错误，她忠实的履行了职责，完成了我们的任务委托，也即：上一节的代码写法，输出就应该是那样子的。解释现象之前，先分别注释掉打印&lt;code&gt;msg1&lt;/code&gt;或&lt;code&gt;msg2&lt;/code&gt;的代码，只留其中一个看看效果&lt;/p&gt;
&lt;p&gt;如果，只注释&lt;code&gt;msg1&lt;/code&gt;的打印指令，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   mov     eax, msg1       ; move the address of our first message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   call    sprint          ; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;    
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of our second message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出和我们预期的相符。&lt;/p&gt;
&lt;p&gt;如果，只注释&lt;code&gt;msg2&lt;/code&gt;的打印指令，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of our first message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;    
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   mov     eax, msg2       ; move the address of our second message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   call    sprint          ; call our string printing function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;Hello, brave new world!
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等一下，打印&lt;code&gt;msg1&lt;/code&gt;的指令，怎么把第二个字符串也打印了？&lt;/p&gt;
&lt;p&gt;答案在于，对于&lt;code&gt;msg1&lt;/code&gt;字符串，我们没有给出明确的结尾。在数据段中的两条相邻的&lt;code&gt;db&lt;/code&gt;代码，内存的分配也是相邻的，因此，&lt;code&gt;msg1&lt;/code&gt;字符串的最后一个字节紧挨着&lt;code&gt;msg2&lt;/code&gt;的第一个字节。记得之前，计算字符串长度所采用的方法——通过比较值为 0 的字节作为结尾！Lesson 5 的代码在运行到计算&lt;code&gt;msg1&lt;/code&gt;的长度时，子例程读完了所有&lt;code&gt;msg1&lt;/code&gt;的字节后，并没有遇到值为 0 的字节，所以她认为这个字符串还没完，程序继续从&lt;code&gt;msg2&lt;/code&gt;的第一个字节逐个比较，直到&lt;code&gt;msg2&lt;/code&gt;的所有字节也读完了，才找到字符串结尾。&lt;/p&gt;
&lt;p&gt;因此看上去&lt;code&gt;msg2&lt;/code&gt;被打印两次，实际上是视觉上的问题，实际的输出过程是：&lt;/p&gt;
&lt;p&gt;先输出了&lt;code&gt;Hello, brave new world!\nThis is how we recycle in NASM.\n&lt;/code&gt;
又输出了&lt;code&gt;This is how we recycle in NASM.\n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再等一下，你或许会问，&lt;code&gt;msg2&lt;/code&gt;我也没看到有字符串结尾啊？被你逮到了:-)这是因为数据段的内存在开辟时，都被初始化成了 0h。&lt;/p&gt;
&lt;h3 id=&#34;我们的第陆个汇编程序楚河汉界&#34;&gt;我们的第陆个汇编程序——楚河汉界&lt;/h3&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;汇编程序中，用 0h 表示 NULL 字节，而 NULL 字节标识了字符串的结尾&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (NULL terminating bytes)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-inc.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-inc.o -o helloworld-inc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-inc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; NOTE the null terminating byte&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is how we recycle in NASM.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; NOTE the null terminating byte&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-inc.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-inc.o -o helloworld-inc
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-inc
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-7-换行&#34;&gt;Lesson 7 换行&lt;/h2&gt;
&lt;p&gt;换行的重要性对于控制台程序而言是不言而喻的，尤其是构建需要用户输入的程序时，更是如此。但是换行又是难以摆弄的，处理字符串时有时需要包含换行，有时又需要去掉他。如果始终把表示换行符的 ascii 码 0Ah 硬编码在我们的变量中，就要面对一个问题——在不需要输出换行符的地方得写额外的代码来去掉他。&lt;/p&gt;
&lt;p&gt;如果有个专门的子例程输出我们指定的字符串，由该子例程负责在结尾打印一个换行符。就可以在需要打印换行符的地方调用这个子例程，而在不需要打印换行符的地方还使用我们的&lt;code&gt;sprint&lt;/code&gt;子例程就可以了。&lt;/p&gt;
&lt;p&gt;记得前文中，想调用&lt;code&gt;sys_write&lt;/code&gt;必须提供要打印内容的地址及其长度，所以仅仅传递换行符是不够的，同时我们也不想仅仅为了这一个字符单独定义一个变量来保存他，因此使用栈内存来实现新的子例程。&lt;/p&gt;
&lt;p&gt;招法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;换行符存进&lt;code&gt;EAX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUSH EAX&lt;/code&gt;的值到栈上，并获取&lt;code&gt;ESP&lt;/code&gt;的值(当前栈顶所在的地址)&lt;/li&gt;
&lt;li&gt;通过当前的&lt;code&gt;ESP&lt;/code&gt;知道了换行符所在内存地址，那么调用&lt;code&gt;sys_write&lt;/code&gt;的必要条件已然具备&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;且看我们的第柒个汇编程序路转峰回&#34;&gt;且看我们的第柒个汇编程序——路转峰回&lt;/h3&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;观察 functions.asm 中的 sprintLF 子例程&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; int slen(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String length calculation function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;slen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprint(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprint:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;slen&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprintLF(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing with line feed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprintLF:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; push eax onto the stack to preserve it while we use the eax register in this function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; move 0Ah into eax - 0Ah is the ascii character for a linefeed&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; push the linefeed onto the stack so we can get the address&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; move the address of the current stack pointer into eax for sprint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; call our sprint function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; remove our linefeed character from the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; restore the original value of eax before our function was called&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; return to our program&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void exit()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Exit program and restore resources&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;quit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;65&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Print with line feed)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-lf.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-lf.o -o helloworld-lf&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-lf&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; NOTE we have removed the line feed character 0Ah&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is how we recycle in NASM.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; NOTE we have removed the line feed character 0Ah&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; NOTE we are calling our new print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; NOTE we are calling our new print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-lf.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-lf.o -o helloworld-lf
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-lf
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-8-命令行参数&#34;&gt;Lesson 8 命令行参数&lt;/h2&gt;
&lt;p&gt;在 NASM 中，接收命令行参数也使用堆栈。程序启动时，所有参数被反序的压入堆栈，然后程序名被压入栈，最后是参数的个数被压入栈。对于 NASM 编写的程序，最顶上的两个栈内存单元总是保存着程序名和参数个数。&lt;/p&gt;
&lt;p&gt;要处理这些参数，我们所要做的就是执行若干次&lt;code&gt;POP&lt;/code&gt;逐个弹出参数信息，然后迭代每一个参数并运行我们的程序逻辑。在本例中，简单的调用&lt;code&gt;sprintLF&lt;/code&gt;函数打印输出。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;我们使用&lt;code&gt;ECX&lt;/code&gt;寄存器作为循环计数器。这个通用寄存器最初的设计意图就是计数。&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第捌个汇编程序兵来将挡&#34;&gt;我们的第捌个汇编程序——兵来将挡&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Passing arguments from the command line)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-args.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-args.o -o helloworld-args&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-args&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; first value on the stack is the number of arguments&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextArg:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; check to see if we have any arguments left&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;noMoreArgs&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; if zero flag is set jump to noMoreArgs label (jumping over the end of the loop)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; pop the next argument off the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; decrease ecx (number of arguments left) by 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextArg&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; jump to nextArg label&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;noMoreArgs:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-args.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-lf.o -o helloworld-args
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-args &lt;span class=&#34;s2&#34;&gt;&amp;#34;This is one argument&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;This is another&amp;#34;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;101&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;./helloworld-args
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is one argument
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;This is another
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;101&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-9-处理用户输出&#34;&gt;Lesson 9 处理用户输出&lt;/h2&gt;
&lt;h3 id=&#34;引入-bss-段&#34;&gt;引入 bss 段&lt;/h3&gt;
&lt;p&gt;目前为止，我们用到了代码段&lt;code&gt;.text&lt;/code&gt;和数据段&lt;code&gt;.data&lt;/code&gt;。接下来引入&lt;code&gt;.bss&lt;/code&gt;段——全称 BLOCK Started by Symbol。这块内存用来保存程序中的未初始化变量。这些预留的空间通常用来存储用户输入的数据，这类数据的特点在于无法在编程时知道其具体的大小。&lt;/p&gt;
&lt;p&gt;变量声明语法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName1:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;RESB&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 byte&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName2:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;RESW&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 word&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName3:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;RESD&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 double word&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName4:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;RESQ&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 double precision float (quad word)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName5:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;REST&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 extended precision float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是时候引入另一个重要的系统调用&lt;code&gt;sys_read&lt;/code&gt;了，让用户输入来的更猛烈些吧。在 Linux 系统调用表中，此函数的&lt;code&gt;OPCODE 3&lt;/code&gt;。和&lt;code&gt;sys_write&lt;/code&gt;一样也接收 3 个参数，详情如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EDX&lt;/code&gt;载入读取的最大长度(以字节为单位)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ECX&lt;/code&gt;载入&lt;code&gt;.bss&lt;/code&gt;中创建的变量的地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;载入要读取的文件描述符(在本例中为STDIN)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样，函数参数的数据类型和含义可在行数定义中找到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# https:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//github.com/torvalds/linux/blob/master/include/linux/syscalls.h
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asmlinkage&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sys_read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;sys_read&lt;/code&gt;的行为：一旦读到一个&lt;code&gt;LF&lt;/code&gt;，就返回到调用者程序，此时他至今为止读到的内容被存放在&lt;code&gt;ECX&lt;/code&gt;中保存的地址所指向的内存中。&lt;/p&gt;
&lt;p&gt;延伸阅读——&lt;a href=&#34;/post/original/cs/io/eof/&#34;&gt;EOF，到底怎么回事&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;这是我们的第玖个汇编程序不预则废&#34;&gt;这是我们的第玖个汇编程序——不预则废&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Getting input)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-input.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-input.o -o helloworld-input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Please enter your name: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; message string asking user for input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;; message string to use after user has entered their name&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sinput:&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;resb&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;                                 &lt;span class=&#34;c1&#34;&gt;; reserve a 255 byte space in memory for the users input string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; number of bytes to read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nput&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; reserved space to store our input (known as a buffer)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; read from the STDIN file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nput&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our buffer into eax (Note: input contains a linefeed)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-input.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-input.o -o helloworld-input
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-input
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Please enter your name: Daniel Givney
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Hello, Daniel Givney
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-10-数到十&#34;&gt;Lesson 10 数到十&lt;/h2&gt;
&lt;h3 id=&#34;又来了背景知识&#34;&gt;又来了，背景知识&lt;/h3&gt;
&lt;p&gt;与直觉上相反，在汇编语言中计数并不那么简单直接。首先，我们得传递一个地址给&lt;code&gt;sys_write&lt;/code&gt;，不能仅仅将数字加载到寄存器中并调用我们的&lt;code&gt;print&lt;/code&gt;函数。其次，数字和字符串在汇编里大不相同。字符串被描述为一系列的 ASCII 值。这里有一个关于 &lt;a href=&#34;http://www.asciitable.com/&#34;&gt;ASCII&lt;/a&gt; 的一个不错的站点(怎么打开净是广告。。。) ，这套编码被用来规范跨计算机的字符串表示的统一标准。&lt;/p&gt;
&lt;p&gt;Remember，&lt;code&gt;数&lt;/code&gt;是无法打印的——打印出来的都是&lt;code&gt;字符串&lt;/code&gt;。为了数到 10，需要从标准的整数到对应的 ASCII 字符串的转换。看过 ASCII 码表之后，可以注意到，整数 1 对应的 ASCII 值是 49。实际上，对于 0 到 9 这 10 个整数，加 48 就是其对应的 ASCII 码。&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾个汇编程序邯郸学步&#34;&gt;我们的第拾个汇编程序——邯郸学步&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Count to 10)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-10.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-10.o -o helloworld-10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; ecx is initalised to zero.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextNumber:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; increment ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address of our integer into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; add 48 to our number to convert from integer to ascii for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push eax to the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; get the address of the character on the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; clean up the stack so we don&amp;#39;t have unneeded bytes taking up space&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; have we reached 10 yet? compare our counter with decimal 10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextNumber&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; jump if not equal and keep counting&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ nasm -f elf helloworld-10.asm
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ ld -m elf_i386 helloworld-10.o -o helloworld-10
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;$ ./helloworld-10
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices warning&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;错误&lt;/div&gt;
    &lt;p&gt;哦噢：我们的数字 10 打印成了冒号(:)，咋了呢？&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-11-数到十-itoa&#34;&gt;Lesson 11 数到十 (itoa)&lt;/h2&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;是 itoa，不是 iota&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;为什么 Lesson 10 的程序把 10 打印成了冒号(:)呢。嗯，让我们翻开 ASCII 表，能够看到冒号的 ASCII 值是 58 = 10 + 48，所以按上节的程序写法，就应该输出冒号并没有错。上节所说的 0 到 9 这 10 个整数，可以加 48 得到对应的 ASCII 值，然后传给&lt;code&gt;sys_write&lt;/code&gt;的输出对应的字符串；但是对于数字 10，他有两位，没有一个单独的 ASCII 来表示 10 的字符串形式。这个两位数需要两个 ASCII，一个表示 1，一个表示 0。因此，传给&lt;code&gt;sys_write&lt;/code&gt;一个&#39;4948&#39;才是数字 10 的正确字符串形式。10 直接加 48 不行，我们需要把数字的每一位除以 10 后逐个转换&lt;/p&gt;
&lt;p&gt;这里引入两个新的子例程，&lt;code&gt;iprint&lt;/code&gt;和&lt;code&gt;iprintLF&lt;/code&gt;。这些函数用来打印数字的字符串形式，数值本身使用&lt;code&gt;EAX&lt;/code&gt;装载，&lt;code&gt;ECX&lt;/code&gt;用来计数。然后重复除以 10 的过程，每次把余数加 48，结果值&lt;code&gt;PUSH&lt;/code&gt;到栈上以备后用。当除以 10 的商(存在&lt;code&gt;EAX&lt;/code&gt;里)为 0 时，将退出当前循环，进入另一个循环。在该循环里我们通过逐个&lt;code&gt;POP&lt;/code&gt;弹栈的方法，打印每一位数字的字符串形式。弹到什么时候为止呢？这正是我们在&lt;code&gt;ECX&lt;/code&gt;寄存器里存计数的目的，每弹一个值&lt;code&gt;ECX&lt;/code&gt;就减 1，直到减到 0。所有的这些都完成后，程序退出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;除法指令简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DIV&lt;/code&gt;和&lt;code&gt;IDIV&lt;/code&gt;指令将&lt;code&gt;EAX&lt;/code&gt;中的值做为被除数，除以指令的原操作数，商的部分存到&lt;code&gt;EAX&lt;/code&gt;(覆盖了原来的被除数)而余数部分存在&lt;code&gt;EDX&lt;/code&gt;中。(作者写的挺简单，实现上复杂的多：不同位数的策略；高位存什么、低位存什么；有符号、无符号的区别等等。)&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move 10 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move 10 into esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;idiv&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by esi (eax will equal 1 and edx will equal 0)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;idiv&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by esi again (eax will equal 0 and edx will equal 1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;只存余数，感觉会有问题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不会，因为这些都是整数。即便除数比被除数大，依然能够在余数中找到其原值，这是因为在这种情况下&lt;code&gt;EAX&lt;/code&gt;置 0，除法运算运行了 0 次，而被除数的原值作为余数被放到了&lt;code&gt;EDX&lt;/code&gt;中。真好~&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾壹个汇编程序知之非艰&#34;&gt;我们的第拾壹个汇编程序——知之非艰&lt;/h3&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;仅列出了新函数的注释&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;  1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void iprint(Integer number)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Integer printing function (itoa)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  4&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;iprint:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve eax on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  6&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve ecx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  7&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve edx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  8&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve esi on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; counter of how many bytes we need to print in the end&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;divideLoop:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 12&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; count each byte to print - number of characters&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; empty edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; mov 10 into esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;idiv&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; convert edx to it&amp;#39;s ascii representation - edx holds the remainder after a divide instruction&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push edx (string representation of an intger) onto the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; can the integer be divided anymore?&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jnz&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;di&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;videLoop&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; jump if not zero to the label divideLoop&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 21&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;printLoop:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; count down each byte that we put on the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; mov the stack pointer into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; remove last character from the stack to move esp forward&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; have we printed all bytes we pushed onto the stack?&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jnz&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;printLoop&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump is not zero to the label printLoop&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore esi from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore edx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore ecx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore eax from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 36&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 37&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void iprintLF(Integer number)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 38&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Integer printing function with linefeed (itoa)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 39&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;iprintLF:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our integer printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 41&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push eax onto the stack to preserve it while we use the eax register in this function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move 0Ah into eax - 0Ah is the ascii character for a linefeed&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push the linefeed onto the stack so we can get the address&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address of the current stack pointer into eax for sprint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our sprint function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; remove our linefeed character from the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore the original value of eax before our function was called&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 50&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 52&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 53&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; int slen(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 54&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String length calculation function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 55&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;slen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 59&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 64&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 65&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 68&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 69&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 70&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 71&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 72&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprint(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 73&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 74&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprint:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 75&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 76&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 77&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 78&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 79&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;slen&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 80&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 81&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 82&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 83&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 84&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 85&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 86&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 87&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 88&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 89&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 90&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 91&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 92&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 93&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 94&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 95&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 96&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprintLF(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 97&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing with line feed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 98&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprintLF:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 99&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;100&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;101&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;102&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0AH&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;103&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;104&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;105&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;106&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;107&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;108&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;109&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;110&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;111&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;112&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void exit()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;113&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Exit program and restore resources&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;114&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;quit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;115&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;116&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;117&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;118&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Count to 10 itoa)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-itoa.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-itoa.o -o helloworld-itoa&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-itoa&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextNumber:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; NOTE call our new integer printing function (itoa)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextNumber&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ nasm -f elf helloworld-itoa.asm
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ ld -m elf_i386 helloworld-itoa.o -o helloworld-itoa
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;$ ./helloworld-itoa
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-12-计算加法&#34;&gt;Lesson 12 计算——加法&lt;/h2&gt;
&lt;p&gt;这次的程序，将寄存器&lt;code&gt;EAX&lt;/code&gt;和&lt;code&gt;EBX&lt;/code&gt;中的值相加，和保存在&lt;code&gt;EAX&lt;/code&gt;中。首先&lt;code&gt;MOV&lt;/code&gt;其中一个加数到&lt;code&gt;EAX&lt;/code&gt;(本例中为 90)，然后&lt;code&gt;MOV&lt;/code&gt;另一个加数到&lt;code&gt;EBX&lt;/code&gt;(本例中为9)。我们需要调用&lt;code&gt;ADD&lt;/code&gt;指令来实现加法运算。&lt;code&gt;EBX&lt;/code&gt;和&lt;code&gt;EAX&lt;/code&gt;中的值将被加到一起，而结果和将被存回指令最左边的寄存器中(也就是本例的&lt;code&gt;EAX&lt;/code&gt;)。最后调用我们引以为傲的&lt;code&gt;数值-&amp;gt;字符串&lt;/code&gt;打印函数来完成程序。&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾贰个汇编程序聚沙成塔&#34;&gt;我们的第拾贰个汇编程序——聚沙成塔&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (Addition)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-addition.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-addition.o -o calculator-addition&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-addition&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our first number into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; move our second number into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; add ebx to eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; call our integer print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-addition.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-addition.o -o calculator-addition
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-addition
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-13-计算减法&#34;&gt;Lesson 13 计算——减法&lt;/h2&gt;
&lt;p&gt;这个程序与 Lesson 12 的唯一区别就是加法指令&lt;code&gt;ADD&lt;/code&gt;，换成了减法指令&lt;code&gt;SUB&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾叁个汇编程序红衰翠减&#34;&gt;我们的第拾叁个汇编程序——红衰翠减&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (Subtraction)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-subtraction.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-subtraction.o -o calculator-subtraction&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-subtraction&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our first number into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; move our second number into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; subtract ebx from eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; call our integer print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-subtraction.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-subtraction.o -o calculator-subtraction
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-subtraction
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;81&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-14-计算乘法&#34;&gt;Lesson 14 计算——乘法&lt;/h2&gt;
&lt;p&gt;在本程序中，我们将用&lt;code&gt;EBX&lt;/code&gt;中的值与&lt;code&gt;EAX&lt;/code&gt;中的值相乘。两个整数按照和 Lesson 12 一样的方式分别存入两个寄存器。这次的指令主角是&lt;code&gt;MUL&lt;/code&gt;，他是 NASM 中为数不多的几个单操作数指令之一。&lt;code&gt;MUL&lt;/code&gt;指令总是将其操作数与EAX中的值相乘，并将积存回&lt;code&gt;EAX&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾肆个汇编程序一登龙门&#34;&gt;我们的第拾肆个汇编程序——一登龙门&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (Multiplication)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-multiplication.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-multiplication.o -o calculator-multiplication&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-multiplication&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our first number into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; move our second number into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mul&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; multiply eax by ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; call our integer print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-multiplication.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-multiplication.o -o calculator-multiplication
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-multiplication
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;810&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-15-计算除法&#34;&gt;Lesson 15 计算——除法&lt;/h2&gt;
&lt;p&gt;除法指令我们已经见识过了，我们曾用他来实现数字值到 ASCII 码的转换。本例中，依然使用&lt;code&gt;EAX&lt;/code&gt;和&lt;code&gt;EBX&lt;/code&gt;。他们分别保存被除数和除数。如前所述，&lt;code&gt;DIV&lt;/code&gt;指令的行为如下：用其操作数去除&lt;code&gt;EAX&lt;/code&gt;中的值，商保存到&lt;code&gt;EAX&lt;/code&gt;，而余数保存到&lt;code&gt;EDX&lt;/code&gt;。最后将商和余数都打印出来&lt;/p&gt;
&lt;h3 id=&#34;又见除法的第拾伍个汇编程序经分之术&#34;&gt;又见除法的第拾伍个汇编程序——经分之术&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (Division)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-division.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-division.o -o calculator-division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39; remainder &amp;#39;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; a message string to correctly output result&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our first number into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; move our second number into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;div&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; divide eax by ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprint&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; call our integer print function on the quotient&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; move our message string into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; call our string print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; move our remainder into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; call our integer printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-division.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-division.o -o calculator-division
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-division
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; remainder &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-16-计算atoi&#34;&gt;Lesson 16 计算——atoi&lt;/h2&gt;
&lt;p&gt;将算数运算中的数值写死在代码里并不激动人心，这次我们要从命令行参数中动态获取变化的数值！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们先用&lt;code&gt;POP&lt;/code&gt;从栈上获得命令行参数的个数，并保存在&lt;code&gt;ECX&lt;/code&gt;寄存器；然后继续&lt;code&gt;POP&lt;/code&gt;出命令的名称，从&lt;code&gt;ECX&lt;/code&gt;中去掉他的计数；随后循环的弹出每个参数并执行加法逻辑。&lt;/li&gt;
&lt;li&gt;和输出一样，输入给我们的也都是字符串。在进行加法运算前，需要一个和输出时相反的转换操作：ASCII 码-&amp;gt;数字值，没有这个步骤加法的结果将不正确。&lt;/li&gt;
&lt;li&gt;这个转换操作由引入的子例程 Ascii to Integer(atoi) 来完成。这个函数将 ASCII 码值对应的数字保存在&lt;code&gt;EAX&lt;/code&gt;寄存器。每次我们都把&lt;code&gt;EAX&lt;/code&gt;的值加到&lt;code&gt;EDX&lt;/code&gt;里去。如果传递给我们的 ASCII 码不是表示 0-9 那是个数字的，就用 0 替代他。&lt;/li&gt;
&lt;li&gt;所有参数都经过转换并加到一起后，打印和并退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;atoi 原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将 ASCII 码转为整数并非易事。还记得我们之前是怎么把整数转成 ASCII 码的？现在然要进行其逆运算。&lt;/p&gt;
&lt;p&gt;首先，将字符串的地址移入&lt;code&gt;ESI&lt;/code&gt;(著名的源址寄存器)；然后，逐字节的遍历字符串(试着将每个字节看做是一个数字或十进制位)。对于每个数字，检测其值是否介于 48 到 57 之间( 0-9 的 ASCII 码)，如果满足条件，就执行以下逻辑：&lt;/p&gt;
&lt;p&gt;码值减去 48——得到该码值所表示的数字的十进制整数值，这个值存入&lt;code&gt;EAX&lt;/code&gt;，然后&lt;code&gt;EAX&lt;/code&gt;乘以 10，随着循环的进行，每一位的位权都在随着乘以 10 而提升，从而归到其所占的位上。&lt;/p&gt;
&lt;p&gt;当所有的字节都按照上面的逻辑处理完成，返回结果值之前，还要进入最后的一步：由于最后一位数字是个位数，他不应该乘以 10，但面的逻辑却这样做了。我们需要简单的除以一次 10 来纠正这个错误。当然，如果传递给程序的参数不是整数，这个除法操作就省略掉。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接下来的程序中使用了 BL 寄存器，这里简单说下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用寄存器的个数就没怎么变过，但是其位数却一扩再扩以提高CPU的计算能力。汇编指令中写&lt;code&gt;BL&lt;/code&gt;的意思是，使用32位&lt;code&gt;EBX&lt;/code&gt;寄存器的&lt;code&gt;低8位&lt;/code&gt;，因为单个 ASCII 码值只需要一个字节就可以放下。如果使用整个32位寄存器来存储这一个字节的数据，那么其中的24位都对我们毫无意义。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;EBX&lt;/code&gt;，其&lt;code&gt;0-16bits&lt;/code&gt;段称为&lt;code&gt;BX&lt;/code&gt;，而&lt;code&gt;BX&lt;/code&gt;则包含&lt;code&gt;BL&lt;/code&gt;和&lt;code&gt;BH&lt;/code&gt;(低8位，高8位)，显然我们只需要&lt;code&gt;BL&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;正向的学习汇编，往往从头开始捣寄存器的历史，名称的含义和位的大小等等。本教程是反向的，通过程序中用到的必要元素来追溯关键的概念和原理。完整的寄存器知识超出了本教程的范围，但之后的篇章将继续讨论，毕竟写汇编嘛，我们绕不过寄存器去 :-)&lt;/p&gt;
&lt;h3 id=&#34;欢迎我们的第拾陆个汇编程序反朴归真&#34;&gt;欢迎我们的第拾陆个汇编程序——反朴归真&lt;/h3&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;funcitons.asm 只列出了新引入的 atoi 子例程的代码&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; int atoi(Integer number)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Ascii to integer function (atoi)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;atoi:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve ebx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve ecx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve edx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve esi on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move pointer in eax into esi (our number to convert)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise eax with decimal value 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise ecx with decimal value 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.multiplyLoop:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; resets both lower and uppper bytes of ebx to be 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; move a single byte into ebx register&amp;#39;s lower half&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare ebx register&amp;#39;s lower half value against ascii value 48 (char value 0)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jl&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;.finished&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump if less than to label finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;57&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare ebx register&amp;#39;s lower half value against ascii value 57 (char value 9)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jg&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;.finished&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump if greater than to label finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; convert ebx register&amp;#39;s lower half to decimal representation of ascii value&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; add ebx to our interger value in eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move decimal value 10 into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mul&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; multiply eax by ebx to get place value&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; increment ecx (our counter register)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.multiplyLoop&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; continue multiply loop&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare ecx register&amp;#39;s value against decimal 0 (our counter register)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;.restore&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; jump if equal to 0 (no integer arguments were passed to atoi)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move decimal value 10 into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;div&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by value in ebx (in this case 10)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.restore:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore esi from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore edx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore ecx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore ebx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (ATOI)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-atoi.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-atoi.o -o calculator-atoi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-atoi 20 1000 317&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; first value on the stack is the number of arguments&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; second value on the stack is the program name (discarded when we initialise edx)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; decrease ecx by 1 (number of arguments without program name)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise our data register to store additions&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextArg:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; check to see if we have any arguments left&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;noMoreArgs&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; if zero flag is set jump to noMoreArgs label (jumping over the end of the loop)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; pop the next argument off the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;atoi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; convert our ascii string to decimal integer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; perform our addition logic&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; decrease ecx (number of arguments left) by 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextArg&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; jump to nextArg label&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;noMoreArgs:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move our data result into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our integer printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-atoi.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-atoi.o -o calculator-atoi
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-atoi &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;317&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-17-命名空间&#34;&gt;Lesson 17 命名空间&lt;/h2&gt;
&lt;p&gt;对于任何包含大量代码库的软件项目，命名空间都是不可或缺的构造。命名空间为标识符引入作用域的概念，使得重用命名约定成为可能，同时增强了代码的可读性和可维护性。在汇编语言中，全局标签标识子例程，而局部标签用来实现命名空间。&lt;/p&gt;
&lt;p&gt;之前的教程中，我们都只使用了全局标签。这意味着即便是实现相同逻辑的代码块，也必须有全局唯一的标签名，前面的&lt;code&gt;finished&lt;/code&gt;标签就是一例。同属一个全局作用域，意味着当在一个函数中需要跳出循环时，直接&lt;code&gt;JMP&lt;/code&gt;到该函数中的&lt;code&gt;finished&lt;/code&gt;标签就行。然而，如果需要从另一个函数中跳出循环，和&lt;code&gt;finished&lt;/code&gt;代码块功能相同的代码就得改名。我们希望能重用&lt;code&gt;finished&lt;/code&gt;这个名字，因为他能向代码的阅读者暗示出某种已知的逻辑。&lt;/p&gt;
&lt;p&gt;局部标签以&lt;code&gt;.&lt;/code&gt;开头，比如：&lt;code&gt;.finished&lt;/code&gt;。随着 functions.asm 的不断扩展，你可能已经注意到他的出现了。一个局部标签的命名空间，由离他最近的前面的一个全局标签限定。你可以使用&lt;code&gt;JMP&lt;/code&gt;跳转到局部标签，编译器将通过当前调用的作用域(基于其之上的全局标签)计算出应该引用哪一个局部标签。&lt;/p&gt;
&lt;h3 id=&#34;第拾柒个汇编程序各安生业&#34;&gt;第拾柒个汇编程序——各安生业&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Namespace&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf namespace.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 namespace.o -o namespace&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./namespace&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Jumping to finished label.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Inside subroutine number: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg3&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Inside subroutine &amp;#34;finished&amp;#34;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;subrountineOne:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg1 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.finished&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump to the local label under the subrountineOne scope&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg2 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; move the value one into eax (for subroutine number one)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our integer printing function with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;subrountineTwo:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg1 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our string print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.finished&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump to the local label under the subrountineTwo scope&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg2 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; move the value two into eax (for subroutine number two)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our integer printing function with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg1 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; jump to the global label finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg3&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg3 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf namespace.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 namespace.o -o namespace
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./namespace
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Jumping to finished label.
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Inside subroutine number: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;Jumping to finished label.
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;Inside subroutine number: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;Jumping to finished label.
&lt;span class=&#34;ln&#34;&gt;9&lt;/span&gt;Inside subroutine &lt;span class=&#34;s2&#34;&gt;&amp;#34;finished&amp;#34;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-18-fizzbuzz-游戏&#34;&gt;Lesson 18 FizzBuzz 游戏&lt;/h2&gt;
&lt;p&gt;FizzBuzz——老外在学校里教孩子除法的一组游戏。玩法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;玩家轮流计算从&lt;code&gt;1&lt;/code&gt;到&lt;code&gt;100&lt;/code&gt;的整数，&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;3的倍数&lt;/code&gt;就换成 Fizz，&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;5的倍数&lt;/code&gt;就换成 Buzz，&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;3和5的公倍数&lt;/code&gt;就换成 FizzBuzz。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;神奇的是这个儿童游戏已经成为计算机编程工作事实上的标准面试题之一，原因在于该题可以轻松的过滤掉连简单的逻辑门都构造不好的候选人。。。&lt;/p&gt;
&lt;p&gt;解题办法不止一种，有些语言提供了非常简单而优雅的方案。然而大都是躲不过 if 语句的；可能还会含有 else，这取决于是否利用了某些数学性质，如：既能被 3 整除也能被 5 整除的数必然可以被 3 * 5 = 15 整除。&lt;/p&gt;
&lt;p&gt;本篇的汇编实现，我们提供如下的方案：两个级联的 if 语句判断是否打印 Fizz 和/或 Buzz，以及一个 else 语句打印其他数字。每个输出都占一行，100个数字都处理完，程序退出。&lt;/p&gt;
&lt;h3 id=&#34;让我们的第拾捌个汇编程序来挑战一下大道至简&#34;&gt;让我们的第拾捌个汇编程序来挑战一下——大道至简&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Fizzbuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf fizzbuzz.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 fizzbuzz.o -o fizzbuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./fizzbuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fizz&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Fizz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buzz&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Buzz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise our checkFizz boolean variable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise our checkBuzz boolean variable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise our counter variable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextNumber:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; increment our counter variable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.checkFizz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; clear the edx register - this will hold our remainder after division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the value of our counter into eax for division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; move our number to divide by into ebx (in this case the value is 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;div&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move our remainder into edi (our checkFizz boolean variable)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare if the remainder is zero (meaning the counter divides by 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.checkBuzz&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; if the remainder is not equal to zero jump to local label checkBuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fizz&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; else move the address of our fizz string into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.checkBuzz:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; clear the edx register - this will hold our remainder after division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the value of our counter into eax for division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; move our number to divide by into ebx (in this case the value is 5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;div&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move our remainder into edi (our checkBuzz boolean variable)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare if the remainder is zero (meaning the counter divides by 5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.checkInt&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; if the remainder is not equal to zero jump to local label checkInt&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buzz&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; else move the address of our buzz string into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.checkInt:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; edi contains the remainder after the division in checkFizz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.continue&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; if equal (counter divides by 3) skip printing the integer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; esi contains the remainder after the division in checkBuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.continue&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; if equal (counter divides by 5) skip printing the integer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; else move the value in ecx (our counter) into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our integer printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.continue:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move an ascii linefeed character into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push the address of eax onto the stack for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; get the stack pointer (address on the stack of our linefeed char)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function to print a line feed&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; pop the stack so we don&amp;#39;t waste resources&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; compare if our counter is equal to 100&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextNumber&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; if not equal jump to the start of the loop&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; else call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ nasm -f elf fizzbuzz.asm
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ ld -m elf_i386 fizzbuzz.o -o fizzbuzz
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;$ ./fizzbuzz
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;Fizz
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;Buzz
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;Fizz
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;Fizz
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;Buzz
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;Fizz
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;FizzBuzz
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-19-执行命令&#34;&gt;Lesson 19 执行命令&lt;/h2&gt;
&lt;h3 id=&#34;再一次背景知识&#34;&gt;再一次，背景知识&lt;/h3&gt;
&lt;p&gt;通过指定的要运行的命令，调用&lt;code&gt;EXEC&lt;/code&gt;一族的函数将启动一个新进程来替换当前的。本节，我们将使用&lt;code&gt;sys_execve&lt;/code&gt;系统调用，启动 Linux 下的程序&lt;code&gt;/bin/echo&lt;/code&gt;，来替换程序运行中的进程，我们让&lt;code&gt;/bin/echo&lt;/code&gt;来输出&amp;quot;Hello,World!&amp;quot;&lt;/p&gt;
&lt;h3 id=&#34;命名约定&#34;&gt;命名约定&lt;/h3&gt;
&lt;p&gt;这一族的函数都以&lt;code&gt;exec&lt;/code&gt;开头，后面跟着的字母含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E，指向环境变量指针的数组，传给进程镜像&lt;/li&gt;
&lt;li&gt;L，命令行参数分别传给函数&lt;/li&gt;
&lt;li&gt;P，使用&lt;code&gt;PATH&lt;/code&gt;环境变量查找路径参数中的命令名并执行&lt;/li&gt;
&lt;li&gt;V，命令行参数作为指针数组传递给函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V 和 E 后缀的函数，意味着需要按如下格式传递参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是要被执行的命令的字符串，&lt;/li&gt;
&lt;li&gt;后面跟着该命令的参数数组，&lt;/li&gt;
&lt;li&gt;最后是新进程将用到的环境变量的数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们调用一个简单的命令时，不将任何特殊的环境变量传递给新进程，而是传递 0h (NULL)。&lt;/p&gt;
&lt;p&gt;命令的参数和环境变量都必须用指针的数组来传递。因此，在定义完字符串后，我们定义了一个包含变量名的null终结(0h结尾)的结构体(数组)。这样，就准备好了应传给&lt;code&gt;sys_execve&lt;/code&gt;的所有东西。一旦调用成功，新进程将替换我们的进程，输出返回给了终端。&lt;/p&gt;
&lt;h3 id=&#34;第拾玖个汇编程序委重投艰&#34;&gt;第拾玖个汇编程序——委重投艰&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf execute.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 execute.o -o execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;command&lt;/span&gt;         &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;/bin/echo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; command to execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arg1&lt;/span&gt;            &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arguments&lt;/span&gt;       &lt;span class=&#34;nv&#34;&gt;dd&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;                &lt;span class=&#34;kd&#34;&gt;dd&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;arg1&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; arguments to pass to commandline (in this case just one)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;                &lt;span class=&#34;kd&#34;&gt;dd&lt;/span&gt;      &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; end the struct&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;environment&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;dd&lt;/span&gt;      &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; arguments to pass as environment variables (inthis case none) end the struct&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;environment&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; address of environment variables&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; address of the arguments to pass to the commandline&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; address of the file to execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; invoke SYS_EXECVE (kernel opcode 11)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf execute.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 execute.o -o execute
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./execute
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;不妨试试其他命令&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;command&lt;/span&gt;         &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;/bin/ls&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; command to execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arg1&lt;/span&gt;            &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;-l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;command&lt;/span&gt;         &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;/bin/sleep&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; command to execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arg1&lt;/span&gt;            &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-20-process-forking&#34;&gt;Lesson 20 Process Forking&lt;/h2&gt;
&lt;h3 id=&#34;重入背景知识&#34;&gt;重入，背景知识&lt;/h3&gt;
&lt;p&gt;本节引入著名的&lt;code&gt;sys_fork&lt;/code&gt;。这个调用不是替换，而是复制我们的进程。该调用不接受任何参数，只要在当前进程中调用，那么新进程就会被创建。新进程与原进程并发执行。&lt;/p&gt;
&lt;p&gt;通过检测&lt;code&gt;EAX&lt;/code&gt;中的值，来判断当前是处于父进程还是子进程中。父进程返回一个正整数；子进程中&lt;code&gt;EAX&lt;/code&gt;为 0。以此可以对于父子进程进行分支逻辑。&lt;/p&gt;
&lt;p&gt;基于以上事实，我们在父子进程中打印不同的消息。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;每个进程需要各自安全退出&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;第贰拾个汇编程序如出一辙&#34;&gt;第贰拾个汇编程序——如出一辙&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Fork&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf fork.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 fork.o -o fork&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./fork&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;childMsg&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is the child process&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;parentMsg&lt;/span&gt;       &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is the parent process&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_FORK (kernel opcode 2)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; if eax is zero we are in the child process&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nb&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ild&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;; jump if eax is zero to child label&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;parent:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;parentMsg&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; inside our parent process move parentMsg into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; quit the parent process&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;child:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ildMsg&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; inside our child process move childMsg into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; quit the child process&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf fork.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 fork.o -o fork
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./fork
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;This is the parent process
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is the child process
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-21-输出时间&#34;&gt;Lesson 21 输出时间&lt;/h2&gt;
&lt;p&gt;在 NASM 中，生成一个 unix 时间戳只需简单的向内核调用&lt;code&gt;sys_time&lt;/code&gt;，也即：调用表中的 OPCODE 13。不需要参数，返回的&lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_time&#34;&gt;UNIX 纪元时间&lt;/a&gt;保存在&lt;code&gt;EAX&lt;/code&gt;寄存器中&lt;/p&gt;
&lt;h3 id=&#34;第贰拾壹个汇编程序只争朝夕&#34;&gt;第贰拾壹个汇编程序——只争朝夕&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf time.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 time.o -o time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Seconds since Jan 01 1970: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move our message string into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; invoke SYS_TIME (kernel opcode 13)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our integer printing function with linefeed&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf time.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 time.o -o &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./time
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Seconds since Jan &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; 1970: &lt;span class=&#34;m&#34;&gt;1374995660&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-22-文件操作create&#34;&gt;Lesson 22 文件操作——Create&lt;/h2&gt;
&lt;h3 id=&#34;相关背景&#34;&gt;相关背景&lt;/h3&gt;
&lt;p&gt;文件操作在 Linux 系统中涉及到一小股系统调用，包括：创建、更新、删除。这些函数都必须作用于&lt;a href=&#34;https://en.wikipedia.org/wiki/File_descriptor&#34;&gt;文件描述符&lt;/a&gt;——系统中用于标识文件的一个唯一的、非负整数。&lt;/p&gt;
&lt;p&gt;首先登场的是用于创建文件的&lt;code&gt;sys_creat&lt;/code&gt;。在后面的课程中，将在同一程序上不断扩展。最终，我们将有一个包含文件的创建、更新、打开、关闭和删除的完整功能的程序。&lt;/p&gt;
&lt;h3 id=&#34;我们的第贰拾贰个汇编程序本立道生&#34;&gt;我们的第贰拾贰个汇编程序——本立道生&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf create.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 create.o -o create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; set all permissions to read, write, execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; filename we will create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_CREAT (kernel opcode 8)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf create.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 create.o -o create
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;“没有消息就是好消息”，文件 readme.txt 将出现在与程序相同的目录中&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-23-文件操作write&#34;&gt;Lesson 23 文件操作——Write&lt;/h2&gt;
&lt;p&gt;基于上一节的程序，我们调用&lt;code&gt;sys_write&lt;/code&gt;将内容写到新创建的文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_write&lt;/code&gt;需要的 3 个参数由以下寄存器提供&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要写入的字节数载入&lt;code&gt;EDX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;要写入内容的指针载入&lt;code&gt;ECX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件描述符载入&lt;code&gt;EBX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 12 载入&lt;code&gt;EAX&lt;/code&gt;，熟悉的套路，&lt;code&gt;INT 80h&lt;/code&gt; 开调。留意，我们首先通过将文件名传给&lt;code&gt;sys_creat&lt;/code&gt;，进而从&lt;code&gt;EAX&lt;/code&gt;中得到文件描述符。&lt;/p&gt;
&lt;h3 id=&#34;我们的第贰拾叁个汇编程序握素怀铅&#34;&gt;我们的第贰拾叁个汇编程序——握素怀铅&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf write.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 write.o -o write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; the contents to write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; code continues from lesson 22&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; number of bytes to write - one for each letter of our contents string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the memory address of our contents string into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move the file descriptor of the file we created into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf write.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 write.o -o write
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./write
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;执行完打开 readme.txt 看看吧，该有 Hello, World! 才对&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-24-文件操作open&#34;&gt;Lesson 24 文件操作——Open&lt;/h2&gt;
&lt;p&gt;继续扩展前面的程序，这次轮到&lt;code&gt;sys_open&lt;/code&gt;登场。这个调用用来获取文件描述符，而文件描述符则作为后面其他文件相关函数的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_open&lt;/code&gt;需要的两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问模式(见下表)载入&lt;code&gt;ECX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;则存着文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统调用的方法我们已经很熟悉了：OPCODE 5 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_open&lt;/code&gt;也可以额外接受 0 个或多个表示文件创建和文件状态的标志，通过&lt;code&gt;EDX&lt;/code&gt;读取。详情参见：&lt;a href=&#34;https://man7.org/linux/man-pages/man2/open.2.html&#34;&gt;open(2) —— Linux manual page&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O_RDONLY&lt;/td&gt;
&lt;td&gt;只读打开&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O_WRONLY&lt;/td&gt;
&lt;td&gt;只写打开&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O_RDWR&lt;/td&gt;
&lt;td&gt;读写打开&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;调用&lt;code&gt;sys_open&lt;/code&gt;后，我们从&lt;code&gt;EAX&lt;/code&gt;中获得文件描述符，然后使用整数打印函数将这个在 Linux 中唯一的，非负整数的值打印出来&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;写下我们的第贰拾肆个汇编程序招之即来&#34;&gt;写下我们的第贰拾肆个汇编程序——招之即来&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Open&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf open.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 open.o -o open&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./open&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; the contents to write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; Create file from lesson 22&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; Write contents to file from lesson 23&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; flag for readonly access mode (O_RDONLY)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; filename we created above&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_OPEN (kernel opcode 5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our integer printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf open.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 open.o -o open
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./open
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-25-文件操作read&#34;&gt;Lesson 25 文件操作——Read&lt;/h2&gt;
&lt;p&gt;介绍了创建、写入、打开，也该读取了。本节我们使用&lt;code&gt;sys_read&lt;/code&gt;读取新建且打开的文件，内容存到一个变量中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_read&lt;/code&gt;的 3 个参数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要读取的字节数载入&lt;code&gt;EDX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;保存内容的变量地址载入&lt;code&gt;ECX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;中放文件描述符(通过上一节的&lt;code&gt;sys_open&lt;/code&gt;获取)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 3 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;h3 id=&#34;第贰拾伍个汇编程序一览无遗&#34;&gt;第贰拾伍个汇编程序——一览无遗&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf read.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 read.o -o read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; the contents to write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fileContents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; variable to store file contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; Create file from lesson 22&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; Write contents to file from lesson 23&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; Open file from lesson 24&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; number of bytes to read - one for each letter of the file contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fileContents&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; move the memory address of our file contents variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move the opened file descriptor into EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fileContents&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; move the memory address of our file contents variable into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf read.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 read.o -o &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./read
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-26-文件操作close&#34;&gt;Lesson 26 文件操作——Close&lt;/h2&gt;
&lt;p&gt;抱歉这么重要的操作现在才引入，正确的关闭文件等资源无论在那种语言编写的程序中都是不可或缺的步骤，本节引入&lt;code&gt;sys_close&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_close&lt;/code&gt;只需要一个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;藉由&lt;code&gt;EBX&lt;/code&gt;将文件描述符传给内核&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扩展上一节的程序——在获取到文件描述符后，我们将其放入EBX。&lt;/p&gt;
&lt;p&gt;OPCODE 6 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;h3 id=&#34;我们的负责任的第贰拾陆个汇编程序止戈散马&#34;&gt;我们的负责任的第贰拾陆个汇编程序——止戈散马&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Close&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf close.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 close.o -o close&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./close&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; the contents to write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fileContents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; variable to store file contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; Create file from lesson 22&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; Write contents to file from lesson 23&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; Open file from lesson 24&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; Read file from lesson 25&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fileContents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fileContents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; not needed but used to demonstrate that SYS_CLOSE takes a file descriptor from EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_CLOSE (kernel opcode 6)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf close.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 close.o -o close
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./close
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;我们正确的关闭了文件，将文件描述符等一干资源还回了操作系统&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-27-文件操作seek&#34;&gt;Lesson 27 文件操作——Seek&lt;/h2&gt;
&lt;p&gt;之前的课程都是对文件整存整取操作，但实际应用中的更多是对文件的局部修改。本节引入&lt;code&gt;sys_lseek&lt;/code&gt;，演示在文件的结尾追加内容。&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;sys_lseek&lt;/code&gt;你可以在文件中移动一个叫游标的玩意儿，同时用字节为单位的偏移量来精确定位。下面的例子演示了移动到文件结尾，并用 0 字节偏移量(这样保证我们在末尾写入而不是超出)来定位写入的位置。在&lt;code&gt;ECX&lt;/code&gt;和&lt;code&gt;EDX&lt;/code&gt;中尝试不同的值在文件的不同位置写入。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_lseek&lt;/code&gt;的3个参数这样传递：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EDX&lt;/code&gt;保存从哪开始，可选的值如下表&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SEEK_SET&lt;/td&gt;
&lt;td&gt;文件的开头&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SEEK_CUR&lt;/td&gt;
&lt;td&gt;当前位置偏移量&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SEEK_END&lt;/td&gt;
&lt;td&gt;文件的结尾&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;偏移量存进&lt;code&gt;ECX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后自然就是文件描述符了，由&lt;code&gt;EBX&lt;/code&gt;存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 19 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。定位到期望的位置后，我们调用了&lt;code&gt;sys_write&lt;/code&gt;更新文件的内容。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;本程序没有创建文件的过程，是在已经存在的 readme.txt 文件上操作的。程序运行后该文件的内容将被更新&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;有请我们的第贰拾柒个汇编程序上下求索&#34;&gt;有请我们的第贰拾柒个汇编程序——上下求索&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Seek&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf seek.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 seek.o -o seek&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./seek&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;-updated-&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; the contents to write at the start of the file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; flag for writeonly access mode (O_WRONLY)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; filename of the file to open&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_OPEN (kernel opcode 5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; whence argument (SEEK_END)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; move the cursor 0 bytes&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move the opened file descriptor into EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; invoke SYS_LSEEK (kernel opcode 19)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; number of bytes to write - one for each letter of our contents string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the memory address of our contents string into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move the opened file descriptor into EBX (not required as EBX already has the FD)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf seek.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 seek.o -o seek
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./seek
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-28-文件操作delete&#34;&gt;Lesson 28 文件操作——Delete&lt;/h2&gt;
&lt;p&gt;文件删除在 Linux 中由系统调用&lt;code&gt;sys_unlink&lt;/code&gt;(差点写成 unlike)提供。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_unlink&lt;/code&gt;只需要一个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把文件名放入&lt;code&gt;EBX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 10 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;readme.txt 是已经存在的文件。程序运行完成，该文件将被删除&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第贰拾捌个汇编程序一扫而尽&#34;&gt;我们的第贰拾捌个汇编程序——一扫而尽&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Unlink&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf unlink.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 unlink.o -o unlink&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./unlink&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to delete&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; filename we will delete&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; invoke SYS_UNLINK (kernel opcode 10)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf unlink.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 unlink.o -o unlink
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./unlink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-29-套接字create&#34;&gt;Lesson 29 套接字——Create&lt;/h2&gt;
&lt;h3 id=&#34;背景知识走起&#34;&gt;背景知识，走起&lt;/h3&gt;
&lt;p&gt;Linux 中的套接字编程，藉由&lt;code&gt;sys_socketcall&lt;/code&gt;内核函数提供。与文件操作的一族函数不同，他一人就封装了套接字相关的全部操作，全都以子例程的形式存在其中。我们通过在&lt;code&gt;EBX&lt;/code&gt;中传递给他不同的值，来区分诸如：创建、监听、发送、接受、关闭等操作。这里有&lt;a href=&#34;https://gist.github.com/DGivney/7196bd7a9f21a12c9397bdcf9ae040d2&#34;&gt;详细注释的完整程序&lt;/a&gt;以供参考。&lt;/p&gt;
&lt;p&gt;发起系统调用前，需要初始化一些寄存器，用以存储后面的重要数据。接着调用&lt;code&gt;sys_socketcall&lt;/code&gt;的第一个子例程&lt;code&gt;socket&lt;/code&gt;来创建套接字。之后的课程中，将在此程序基础上按需扩充。最终，我们将拥有一个包含：创建、绑定、监听、接受、读取、写入和关闭的完整套接字程序。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;socket&lt;/code&gt;接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 1 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;p&gt;在 Linux 中&lt;strong&gt;一切皆文件&lt;/strong&gt;，成功创建后的套接字将作为文件描述符(FD)由&lt;code&gt;EAX&lt;/code&gt;返回给用户程序。这个 FD 将用来实施其他的套接字函数。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;一个寄存器对自身进行 XOR 异或是初始化(清零)的好办法，这可以确保其中不包含意外的值，从而避免程序崩溃。&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;套接字我们的第贰拾玖个汇编程序来了只如初见&#34;&gt;套接字，我们的第贰拾玖个汇编程序来了——只如初见&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init eax 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init ebx 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init edi 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init esi 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 6 onto the stack (IPPROTO_TCP)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 1 onto the stack (SOCK_STREAM)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 2 onto the stack (PF_INET)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine SOCKET (1)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our integer printing function (print the file descriptor in EAX or -1 on error)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-30-套接字bind&#34;&gt;Lesson 30 套接字——Bind&lt;/h2&gt;
&lt;p&gt;上一节完成了套接字的创建，现在我们为这个套接字关联一个本地 IP 和端口以便其他程序与其建立连接。这个任务由&lt;code&gt;sys_cocketcall&lt;/code&gt;的第二个子例程&lt;code&gt;bind&lt;/code&gt;完成。&lt;/p&gt;
&lt;p&gt;这里引入新的寄存器&lt;code&gt;EDI&lt;/code&gt;来存储套接字的文件描述符(FD)。&lt;code&gt;EDI&lt;/code&gt;——目标索引寄存器，原做拷贝过程中存储目标文件的位置之用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;bind&lt;/code&gt;也接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 2 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;h3 id=&#34;第叁拾个汇编程序一朝比翼&#34;&gt;第叁拾个汇编程序——一朝比翼&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move return value of SYS_SOCKETCALL into edi (file descriptor for new socket, or -1 on error)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; push 0 dec onto the stack IP ADDRESS (0.0.0.0)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; push 9001 dec onto stack PORT (reverse byte order)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 2 dec onto stack AF_INET&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of stack pointer into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push 16 dec onto stack (arguments length)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the address of arguments onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the file descriptor onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine BIND (2)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-31-套接字listen&#34;&gt;Lesson 31 套接字——Listen&lt;/h2&gt;
&lt;p&gt;上一节完成了套接字的绑定。下面由&lt;code&gt;sys_socketcall&lt;/code&gt;的&lt;code&gt;listen&lt;/code&gt;子例程告诉我们的套接字监听&lt;code&gt;TCP&lt;/code&gt;的入站请求。这是在套接字上对与我们相互连接的程序进行读写的前提。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;listen&lt;/code&gt;也接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 4 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。调用成功后，套接字即开始监听入站请求。&lt;/p&gt;
&lt;h3 id=&#34;我们的第叁拾壹个汇编程序伫候佳音&#34;&gt;我们的第叁拾壹个汇编程序——伫候佳音&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; move 1 onto stack (max queue length argument)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the file descriptor onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine LISTEN (4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-32-套接字accept&#34;&gt;Lesson 32 套接字——Accept&lt;/h2&gt;
&lt;p&gt;前面的课程都是套接字的准备工作。入站请求到达后，还必须有接受逻辑，这由&lt;code&gt;sys_socketcall&lt;/code&gt;的&lt;code&gt;accept&lt;/code&gt;子例程实现。进入 ACCEPT 状态的套接字可以在远程连接上进行读写。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;accept&lt;/code&gt;也接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 5 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;code&gt;accept&lt;/code&gt;子例程将创建另一个文件描述符(FD)，用以标识入站连接。我们后面的课程将使用这个 FD 来进行实际的读写操作。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;运行本程序后，开启另一个终端窗口，键入&lt;code&gt;sudo netstat -plnt&lt;/code&gt;查看 9001 端口是否在监听之中&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;第叁拾贰个汇编程序宾至如归&#34;&gt;第叁拾贰个汇编程序——宾至如归&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; listen socket from lesson 31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_accept:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 0 dec onto stack (address length argument)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 0 dec onto stack (address argument)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the file descriptor onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine ACCEPT (5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-33-套接字read&#34;&gt;Lesson 33 套接字——Read&lt;/h2&gt;
&lt;p&gt;套接字也建立了，地址和端口也绑定了，监听中的套接字接受了入站连接，现在该让我们看看远端发来的请求里有什么了吧……&lt;/p&gt;
&lt;p&gt;当入站连接被套接字接受后，一个新的文件描述符(FD)通过&lt;code&gt;EAX&lt;/code&gt;返回给用户程序。本节将使用这个 FD 从连接中读取请求头。&lt;/p&gt;
&lt;p&gt;先将获取到的 FD 存入&lt;code&gt;ESI&lt;/code&gt;寄存器——原址索引寄存器，原做拷贝过程中存储来源文件的位置之用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_read&lt;/code&gt;是我们的老朋友了，就靠它从套接字连接中读取数据。正如前面的课程中所做的，我们用一个变量来保存从 FD 中读取的内容。本例的套接字使用传说中的&lt;code&gt;HTTP&lt;/code&gt;协议进行通讯。分析&lt;code&gt;HTTP&lt;/code&gt;请求头部，进而确认入站消息的长度、客户端接收的响应格式等内容超出了本教程的范畴。为了简化，只读取前 255 个字节并打印到标准输出。&lt;/p&gt;
&lt;p&gt;一旦入站连接被接受，Web 服务器通常会生成一个子进程来接管读/写通信。父进程得以抽身继续监听和接收新的请求。我们就用前不久学过的&lt;code&gt;sys_fock&lt;/code&gt;系统调用和&lt;code&gt;JMP&lt;/code&gt;汇编指令来实现这一模式。&lt;/p&gt;
&lt;p&gt;使用 curl 工具作为客户端来帮我们生成有效的请求头，并连接到套接字。当然你也可以使用浏览器。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;我们在 .bss 段预留 255 字节空间用以存储从 FD 中读取到的内容。.bss 段的信息可以回顾 &lt;a href=&#34;#lesson-9-%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%87%BA&#34;&gt;Lesson 9&lt;/a&gt;&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;程序运行起来后，在另一个终端窗口的命令行输入&lt;code&gt;curl http://localhost:9001&lt;/code&gt;来查看程序读取到的请求头&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第叁拾叁个汇编程序目营心匠&#34;&gt;我们的第叁拾叁个汇编程序——目营心匠&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; variable to store request headers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; listen socket from lesson 31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_accept:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; accept socket from lesson 32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_fork:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;66&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move return value of SYS_SOCKETCALL into esi (file descriptor for accepted socket, or -1 on error)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;68&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_FORK (kernel opcode 2)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;69&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;70&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;71&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; if return value of SYS_FORK in eax is zero we are in the child process&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;72&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;_read&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;; jmp in child process to _read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;73&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;74&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;_accept&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; jmp in parent process to _accept&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;75&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;76&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_read:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;77&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;78&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; number of bytes to read (we will only read the first 255 bytes for simplicity)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;79&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move the memory address of our buffer variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;80&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move esi into ebx (accepted socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;81&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;82&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;83&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;84&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move the memory address of our buffer variable into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;85&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;86&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;87&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;88&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;89&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;GET / HTTP/1.1
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Host: localhost:9001
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;User-Agent: curl/x.xx.x
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;Accept: */*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-34-套接字write&#34;&gt;Lesson 34 套接字——Write&lt;/h2&gt;
&lt;p&gt;上一节介绍完在套接字上读取，本节说说向套接字写入。&lt;/p&gt;
&lt;p&gt;得益于 Linux 中的&lt;strong&gt;一切皆文件&lt;/strong&gt;，我们可以使用已经掌握的&lt;code&gt;sys_write&lt;/code&gt;向套接字连接写入数据。程序依然使用&lt;code&gt;HTTP&lt;/code&gt;协议。这次作为服务端的我们的程序没人帮忙了，必须要自己构造规定的响应头给客户端程序。格式遵循 &lt;a href=&#34;https://tools.ietf.org/html/rfc2616?spm=5176.doc32013.2.3.Aimyd7#section-4.2&#34;&gt;RFC 标准&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;对于已知的值，使用 .data 段来存储。回顾 &lt;a href=&#34;#lesson-1-hello-world&#34;&gt;Lesson 1&lt;/a&gt; 关于 .data 段的信息&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;运行程序，在另一个终端窗口中输入命令&lt;code&gt;curl http://localhost:9001&lt;/code&gt;查看响应；或者使用浏览器访问上述地址&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;神功将成的第叁拾肆个汇编程序其应若响&#34;&gt;神功将成的第叁拾肆个汇编程序——其应若响&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;  1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;  6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;  7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;  8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  9&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; our response string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;HTTP/1.1 200 OK&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Type: text/html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Length: 14&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; variable to store request headers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 25&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 35&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 36&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 49&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 50&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; listen socket from lesson 31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 59&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_accept:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 60&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; accept socket from lesson 32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 64&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 65&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 68&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 69&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_fork:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 70&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 71&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; fork socket from lesson 33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 72&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 73&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 74&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 75&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 76&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;_read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 77&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 78&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;_accept&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 79&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 80&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_read:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 81&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 82&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; read socket from lesson 33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 83&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 84&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 85&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 86&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 87&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 88&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 89&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 90&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 91&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_write:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 92&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 93&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;78&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; move 78 dec into edx (length in bytes to write)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 94&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;response&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move address of our response variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 95&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move file descriptor into ebx (accepted socket id)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 96&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 97&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 98&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 99&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;100&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;101&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再开一个终端窗口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ curl http://localhost:9001
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-35-套接字close&#34;&gt;Lesson 35 套接字——Close&lt;/h2&gt;
&lt;p&gt;又一次，来到释放资源的关键步骤！正确的关闭链接和关闭文件一样重要。在程序将响应返回给客户端后，我们要关闭子进程中的活动套接字。归还的资源用来接收新到来的链接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_close&lt;/code&gt;不多说，直接秀码——&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;程序启动后，同样新开一个终端窗口查看响应&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第叁拾伍个汇编程序功成身退&#34;&gt;我们的第叁拾伍个汇编程序——功成身退&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;  1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;  6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;  7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;  8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  9&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; our response string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;HTTP/1.1 200 OK&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Type: text/html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Length: 14&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; variable to store request headers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 25&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 35&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 36&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 49&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 50&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; listen socket from lesson 31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 59&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_accept:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 60&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; accept socket from lesson 32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 64&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 65&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 68&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 69&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_fork:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 70&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 71&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; fork socket from lesson 33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 72&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 73&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 74&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 75&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 76&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;_read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 77&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 78&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;_accept&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 79&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 80&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_read:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 81&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 82&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; read socket from lesson 33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 83&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 84&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 85&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 86&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 87&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 88&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 89&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 90&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 91&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_write:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 92&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 93&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;78&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; write socket from lesson 34&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 94&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;response&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 95&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 96&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 97&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 98&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 99&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_close:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;100&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;101&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move esi into ebx (accepted socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;102&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_CLOSE (kernel opcode 6)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;103&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;104&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;105&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;106&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;107&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，再另一个终端窗口中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ curl http://localhost:9001
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-36-套接字下载网页&#34;&gt;Lesson 36 套接字——下载网页&lt;/h2&gt;
&lt;p&gt;前面的课程中，我们见识了&lt;code&gt;sys_socketcall&lt;/code&gt;的众多子例程是如何创建、管理 Linux 套接字并在其中传输数据的，主要集中在服务端程序。接下来，从客户端的角度，使用&lt;code&gt;connect&lt;/code&gt;子例程来演示——从远端下载网页。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先调用&lt;code&gt;sys_socketcall&lt;/code&gt;的&lt;code&gt;socket&lt;/code&gt;子例程创建套接字，用来将请求发送到远端&lt;/li&gt;
&lt;li&gt;然后调用&lt;code&gt;sys_socketcall&lt;/code&gt;的&lt;code&gt;connect&lt;/code&gt;子例程将刚创建的套接字连到远程 Web 服务器&lt;/li&gt;
&lt;li&gt;之后调用&lt;code&gt;sys_write&lt;/code&gt;发送&lt;code&gt;HTTP&lt;/code&gt;格式的请求&lt;/li&gt;
&lt;li&gt;接着调用&lt;code&gt;sys_read&lt;/code&gt;接收来自 Web 服务器的&lt;code&gt;HTTP&lt;/code&gt;格式响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器返回的响应内容，自然由我们的字符串打印函数代劳输出到终端上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单介绍下 HTTP 请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP 规范涉及多个版本的标准：&lt;a href=&#34;https://tools.ietf.org/html/rfc1945&#34;&gt;1.0 in RFC1945&lt;/a&gt;，&lt;a href=&#34;https://tools.ietf.org/html/rfc2068&#34;&gt;1.1 in RFC2068&lt;/a&gt; 以及 &lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34;&gt;2.0 in RFC7540&lt;/a&gt;。1.1 版本时至今日依然是主流。&lt;/p&gt;
&lt;p&gt;一个 HTTP 请求包含 3 个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个包含&lt;code&gt;请求方法&lt;/code&gt;、&lt;code&gt;请求 URL&lt;/code&gt;和&lt;code&gt;协议版本&lt;/code&gt;的行&lt;/li&gt;
&lt;li&gt;可选的&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&#34;&gt;请求头&lt;/a&gt;部分&lt;/li&gt;
&lt;li&gt;一个空行，用以告知服务器请求方以完成请求并等待服务器响应&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个典型的到根文档的 HTTP 请求一般长这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;GET / HTTP/1.1                  &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; A line containing the request method, url and version
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;Host: asmtutor.com              &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; A section of request headers
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;                                &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; A required empty line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本节的程序与上一节的程序拥有相似的开头部分，但作为客户端的我们，不需要调用&lt;code&gt;bind&lt;/code&gt;，取而代之的是调用&lt;code&gt;connect&lt;/code&gt;，连接到指定 IP 地址和端口的远程 Web 服务器。然后使用&lt;code&gt;sys_write&lt;/code&gt;和&lt;code&gt;sys_read&lt;/code&gt;在两个套接字之间通过&lt;code&gt;HTTP请求&lt;/code&gt;和&lt;code&gt;HTTP响应&lt;/code&gt;来传输数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;connect&lt;/code&gt;接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 3 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;提示：为避免返回的内容过多而充斥屏幕，可在运行程序时使用输出重定向&lt;code&gt;./crawler &amp;gt; index.html&lt;/code&gt;来保存服务器响应到一个文件，而不是直接输出到终端上。&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的集大成的第叁拾陆个汇编程序百川朝海&#34;&gt;我们的集大成的第叁拾陆个汇编程序——百川朝海&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Crawler&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf crawler.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 crawler.o -o crawler&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./crawler&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; our request string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;GET / HTTP/1.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Host: 139.162.39.66:80&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; variable to store response&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init eax 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init ebx 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init edi 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 6 onto the stack (IPPROTO_TCP)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 1 onto the stack (SOCK_STREAM)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 2 onto the stack (PF_INET)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine SOCKET (1)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_connect:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move return value of SYS_SOCKETCALL into edi (file descriptor for new socket, or -1 on error)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x4227a28b&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; push 139.162.39.66 onto the stack IP ADDRESS (reverse byte order)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x5000&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; push 80 onto stack PORT (reverse byte order)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 2 dec onto stack AF_INET&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of stack pointer into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push 16 dec onto stack (arguments length)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the address of arguments onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the file descriptor onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine CONNECT (3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_write:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;43&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; move 43 dec into edx (length in bytes to write)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;request&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move address of our request variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move file descriptor into ebx (created socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_read:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; number of bytes to read (we will read 1 byte at a time)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move the memory address of our buffer variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move edi into ebx (created socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;65&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; if return value of SYS_READ in eax is zero, we have reached the end of the file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;_close&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; jmp to _close if we have reached the end of the file (zero flag set)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;67&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;68&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move the memory address of our buffer variable into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;69&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;70&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;_read&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;; jmp to _read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;71&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;72&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_close:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;73&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;74&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move edi into ebx (connected socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;75&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_CLOSE (kernel opcode 6)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;76&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;77&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;79&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;80&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ nasm -f elf crawler.asm
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ ld -m elf_i386 crawler.o -o crawler
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;$ ./crawler
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;Content-Type: text/html
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&amp;lt;html &lt;span class=&#34;nv&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;...
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$$
The\ End.
$$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文采用 &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;知识共享署名许可协议（CC-BY 4.0）&lt;/a&gt;进行许可，转载注明来源即可。如有错误劳烦评论或邮件指出。&lt;img src=&#34;/images/site/CC-BY_icon.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
