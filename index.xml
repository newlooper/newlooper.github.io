<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Looper 的博客</title>
    <link>/</link>
    <description>Recent content on Looper 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright © Dylan(github.com/newlooper); all rights reserved.</copyright>
    <lastBuildDate>Tue, 01 Jun 2021 14:12:22 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gomoku Protocol [译]</title>
      <link>/post/original/game/board-game/renju/gomoku-protocol/</link>
      <pubDate>Tue, 01 Jun 2021 14:12:22 +0800</pubDate>
      
      <guid>/post/original/game/board-game/renju/gomoku-protocol/</guid>
      <description>
        
          &lt;h2 id=&#34;0-译序&#34;&gt;0 译序&lt;/h2&gt;
&lt;p&gt;动机 —— 研究学习五子棋 AI 的同时，对比了很多支持主流五子棋 AI 的 GUI。&lt;/p&gt;
&lt;p&gt;结论是：都有一些体验不佳之处，决定自定写一个。要与 AI 程序交互，需要适配 AI 的接口，因此翻译这篇文章 &lt;a href=&#34;http://petr.lastovicka.sweb.cz/protocl2en.htm&#34;&gt;Gomoku New protocol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;意图 —— 研究过接口协议后，五子棋 GUI 的实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对主流 AI 的支持&lt;/li&gt;
&lt;li&gt;人人对战、人机对战、机机对战&lt;/li&gt;
&lt;li&gt;良好的用户体验、高度定制&lt;/li&gt;
&lt;li&gt;跨平台、易扩展&lt;/li&gt;
&lt;li&gt;恰当的开源协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-简介&#34;&gt;1 简介&lt;/h2&gt;
&lt;p&gt;此文档描述了一个 AI (Artificial Intelligence) 如何与 go-moku 管理器(一个管理和控制比赛的程序)进行交互。&lt;/p&gt;
&lt;p&gt;管理器创建两个管道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个用来从管理器向 AI 发送指令&lt;/li&gt;
&lt;li&gt;第二个则从 AI 向管理器传递响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该 AI 使用标准输入/输出函数(如：C 语言的 &lt;code&gt;scanf&lt;/code&gt; 和 &lt;code&gt;printf&lt;/code&gt; ，Pascal 的 &lt;code&gt;readln&lt;/code&gt; 和 &lt;code&gt;writeln&lt;/code&gt; )因而可以使用任何编程语言编写。该 AI 程序必须是一个控制台应用程序，没有 GUI 界面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意！&lt;/p&gt;
&lt;p&gt;一些运行时库会缓存输出，比如：在 C 的 &lt;code&gt;printf&lt;/code&gt; 之后需要调用&lt;code&gt;fflush(stdout)&lt;/code&gt;
AI 实现者也可以调用一些低级的函数： &lt;code&gt;ReadFile&lt;/code&gt; 和 &lt;code&gt;WriteFile&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每一行包含一条指令（只有一个例外）。管理器采用 &lt;code&gt;CR LF&lt;/code&gt; (0x0d,0x0a) 标识一行的结束。AI 则可以用 &lt;code&gt;CR LF&lt;/code&gt;， &lt;code&gt;LF&lt;/code&gt; 或 &lt;code&gt;CR&lt;/code&gt; 来标识响应行的结尾。管理器将忽略空的行。如何行内容过长，可以静默的截断该行但程序不能崩溃。&lt;/p&gt;
&lt;p&gt;如果 AI 是单线程的，则在 AI 在进行思考或响应一条指令时，不要读取输入，否则导致死锁（AI 和 管理器均进入等待状态）。在上述情况下，一个回合的时限达到后，管理器将终止 AI 程序。&lt;/p&gt;
&lt;p&gt;AI 可以使用两个线程来避免上述问题。一个线程读取指令，而另一个负责计算和回写响应。鉴于多个线程的方案，同步机制也必须引入（事件、锁、信号量等）。&lt;/p&gt;
&lt;p&gt;AI 的线程数对于比赛来说并不重要，一个线程比赛足够了。但是两个线程对于人类玩家来说很有用，比如有的人可能想在 AI 思考过程中改变比赛时限。&lt;/p&gt;
&lt;p&gt;AI 的思考应该可以中断而不必关闭 AI 程序。&lt;/p&gt;
&lt;p&gt;AI 必须处理这些指令： &lt;code&gt;START&lt;/code&gt;  &lt;code&gt;BEGIN&lt;/code&gt;  &lt;code&gt;INFO&lt;/code&gt;  &lt;code&gt;BORAD&lt;/code&gt;  &lt;code&gt;TURN&lt;/code&gt;  &lt;code&gt;END&lt;/code&gt; 。如果接受到除此之外的指令则统一返回： &lt;code&gt;UNKNOWN&lt;/code&gt; (为了向后兼容以及未来的协议扩展)&lt;/p&gt;
&lt;h2 id=&#34;2-ai-名称与临时文件&#34;&gt;2 AI 名称与临时文件&lt;/h2&gt;
&lt;p&gt;AI 名称只能包含：英文字母 &lt;code&gt;[A-Za-z]&lt;/code&gt;、阿拉伯数字 &lt;code&gt;[0-9]&lt;/code&gt;、横杠 &lt;code&gt;(-)&lt;/code&gt;、下划线 &lt;code&gt;(_)&lt;/code&gt;和点 &lt;code&gt;(.)&lt;/code&gt;。程序名比如以 &lt;code&gt;pbrain-&lt;/code&gt; 为前缀&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;pbrain-swine.exe
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;pbrain-pisq5.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前缀的要求仅限制可执行程序的名称，压缩打包文件本身没有此限制。压缩打包文件中可以同时包含 32位 和 64位 的 EXE 文件，且 64位 的可执行文件名必须包含 64 后缀&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;MyGomo.zip
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- pbrain-MyGomo.exe
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- pbrain-MyGomo64.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;籍此，管理器可以在不同的平台上，选择适配的程序。&lt;/p&gt;
&lt;p&gt;工作目录由管理器来设定，该目录不必与 AI 程序所在路径相同，AI 必须用完整路径来指出其所使用的所有数据文件的位置。该路径可以通过函数 GetModuleFileName 或者程序启动时的命令行参数获得。管理器必须采用上述方式启动 AI 程序，使得 AI 程序可以打开那些数据文件。&lt;/p&gt;
&lt;p&gt;AI 可以在当前目录创建一个文件夹来存储临时文件。该目录的名称必须与 AI 的名称一致，该目录的大小限制在 Gomocup 网页中描述（当前为 20MB）。当管理器退出时，或比赛结束时，管理器可以删除所有临时文件。&lt;/p&gt;
&lt;p&gt;指令 &lt;code&gt;INFO folder&lt;/code&gt; 用来指定需要持久保存的文件的位置。&lt;/p&gt;
&lt;h2 id=&#34;3-强制指令&#34;&gt;3 强制指令&lt;/h2&gt;
&lt;h3 id=&#34;31-start-size&#34;&gt;3.1 START [size]&lt;/h3&gt;
&lt;p&gt;AI 接收到此指令时，执行自身初始化并绘制一个空棋盘，但此时没有任何行棋的动作。&lt;/p&gt;
&lt;p&gt;参数 &lt;code&gt;size&lt;/code&gt; 用来指定棋盘的大小，AI 必须支持 20x20 大小的棋盘&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，这是 Gomocpu 锦标赛的规定尺寸。&lt;/p&gt;
&lt;p&gt;建议但不强制 AI 支持其他尺寸的棋盘，若 AI 不支持指令给出的尺寸，则需以 &lt;code&gt;ERROR&lt;/code&gt; 响应&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送:
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;	START &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;AI 回答：
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;	OK &lt;span class=&#34;c1&#34;&gt;# 一切正常&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;	ERROR &amp;lt;message&amp;gt; &lt;span class=&#34;c1&#34;&gt;# 不支持的棋盘尺寸或其他错误&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-turn-xy&#34;&gt;3.2 TURN [X],[Y]&lt;/h3&gt;
&lt;p&gt;参数 &lt;code&gt;[X],[Y]&lt;/code&gt; 表示对手的落子位置，横纵坐标都属于 [0,N] ，其中 N 为自然数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      TURN 10,10
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;AI 回答：
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      11,10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;33-begin&#34;&gt;3.3 BEGIN&lt;/h3&gt;
&lt;p&gt;此指令在一局比赛的开始，由管理器发送给其中一个 AI。表明期望该 AI 在一个空棋盘上开始行棋。之后其他的 AI 通过接收 &lt;code&gt;TURN&lt;/code&gt; 指令的方式得悉对手的落子。 &lt;code&gt;BEGIN&lt;/code&gt; 指令在启用&lt;strong&gt;自动开局&lt;/strong&gt;时将不被使用，这是因为参赛的双方 AI 都将接收 &lt;code&gt;BOARD&lt;/code&gt; 指令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      BEGIN
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;AI 回答：
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      10,10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;34-board&#34;&gt;3.4 BOARD&lt;/h3&gt;
&lt;p&gt;此指令强制规定整个行棋局面。适合从中途延续一局比赛、或执行撤销/重做等用户指令的场景。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOARD&lt;/code&gt; 指令通常在 &lt;code&gt;START&lt;/code&gt; ， &lt;code&gt;RESTART&lt;/code&gt; 或 &lt;code&gt;RECTSTART&lt;/code&gt; 指令之后执行，此时棋盘为空。如果当前有任何比赛在进行中，管理器将在发送 &lt;code&gt;BOARD&lt;/code&gt; 指令前发送 &lt;code&gt;RESTART&lt;/code&gt; 指令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOARD&lt;/code&gt; 指令之后，发送局面数据，格式为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[X],[Y],[field]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[X],[Y]&lt;/code&gt; 为坐标&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[field]&lt;/code&gt; 为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 表示自己的落子&lt;/li&gt;
&lt;li&gt;2 表示对手的落子&lt;/li&gt;
&lt;li&gt;3 仅在设置了&lt;strong&gt;持续行棋&lt;/strong&gt;选项后，表示胜利线中的落子，或者(renju规则)禁手点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是 renju 规则，则管理器必须按照真实的行棋顺序发送局面数据。&lt;/p&gt;
&lt;p&gt;如果是 Gomoku 规则，则管理器可以用任意顺序发送局面数据，且 AI 需自行处理这些数据。&lt;/p&gt;
&lt;p&gt;数据发送完成后，管理器发送 &lt;code&gt;DONE&lt;/code&gt; 指令通知 AI，用以期望 AI 的计算应答，以及后续的 &lt;code&gt;TURN&lt;/code&gt; 或 &lt;code&gt;BEGIN&lt;/code&gt; 指令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      BOARD
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;      10,10,1
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      10,11,2
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;      11,11,1
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;      9,10,2
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;      DONE
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;AI 回答：
&lt;span class=&#34;ln&#34;&gt;9&lt;/span&gt;      9,9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;35-info-key-value&#34;&gt;3.5 INFO [key] [value]&lt;/h3&gt;
&lt;p&gt;AI 可以忽略这条指令。然而，若无限制的忽略则直接判负。&lt;/p&gt;
&lt;p&gt;AI 必须能够应对&lt;strong&gt;管理器没有通过INFO指令给出下面文档中提到的全部信息&lt;/strong&gt;的情况。&lt;/p&gt;
&lt;p&gt;下列信息全部在一局比赛开始时发送，锦标赛期间时限信息将不被修改。&lt;/p&gt;
&lt;p&gt;建议 AI 在任何情况下都响应该指令，因为人类对手可以在 AI 思考过程中修改下列信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;timeout_turn  - &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; limit &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; each move &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;milliseconds, &lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;play as fast as possible&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;timeout_match - &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; limit of a whole match &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;milliseconds, &lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;no limit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;max_memory    - memory limit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes, &lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;no limit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;time_left     - remaining &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; limit of a whole match &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;milliseconds&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;game_type     - &lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;opponent is human, &lt;span class=&#34;nv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;opponent is brain, &lt;span class=&#34;nv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;tournament, &lt;span class=&#34;nv&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;network tournament
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;rule          - bitmask or sum of &lt;span class=&#34;nv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;exactly five in a row win, &lt;span class=&#34;nv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;continuous game, &lt;span class=&#34;nv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;renju
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;evaluate      - coordinates X,Y representing current position of the mouse cursor
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;folder        - folder &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; persistent files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;时限和内存限制在第一步棋之前发送(在 &lt;code&gt;START&lt;/code&gt; 指令之前、或紧跟 &lt;code&gt;START&lt;/code&gt; )；&lt;/p&gt;
&lt;p&gt;time_left 在每一步棋之前发送(也就是 &lt;code&gt;TURN&lt;/code&gt; , &lt;code&gt;BEGIN&lt;/code&gt; 和 &lt;code&gt;BOARD&lt;/code&gt; 之前)；&lt;/p&gt;
&lt;p&gt;当 AI 超时的情况下，剩余时间可以是负值；&lt;/p&gt;
&lt;p&gt;对于无时限的对局，剩余时间为：2147483647；&lt;/p&gt;
&lt;p&gt;对于有时限的对局，管理器必须发送 time_left，从而 AI 可以忽略 timeout_match 仅响应 time_left&lt;/p&gt;
&lt;p&gt;一局比赛的时间是从进程创建到比赛结束（但不包含对手回合的时间），一个回合的时间包含除了初始化指令( &lt;code&gt;START&lt;/code&gt; , &lt;code&gt;RECTSTART&lt;/code&gt; , &lt;code&gt;RESTART&lt;/code&gt; )的全部时间，回合时限为 0 表示 AI 应该尽可能快的行棋（例如：只进行静态评估而不搜索可能的行棋）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;INFO folder&lt;/code&gt; 用来指定需要被持久化的文件保存到哪里。由于这些文件对于其他 AI 和程序都是可见的，因此 AI 必须创建自己的子目录，目录名与 AI 名一致。如果管理器没有发送 &lt;code&gt;INFO folder&lt;/code&gt;，则 AI 不能持久保存文件&lt;/p&gt;
&lt;p&gt;只有调试版本的程序才应该响应 &lt;code&gt;INFO evaluate&lt;/code&gt; 指令，比如在某些窗口中打印评估信息，这些信息不应该打印到标准输出。发布版本的程序应该忽略 &lt;code&gt;INFO evaluate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问：AI 接收到不认识的 &lt;code&gt;INFO&lt;/code&gt; 怎么办&lt;/p&gt;
&lt;p&gt;答：忽略，该指令大概不重要；如果他是重要的，就不该出现在 &lt;code&gt;INFO&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;问：AI 接收到不现实的 &lt;code&gt;INFO&lt;/code&gt; 怎么办(比如：特别小的内存限制值)&lt;/p&gt;
&lt;p&gt;答：AI 应该在标准输出上等待，直到管理器发送一个非 &lt;code&gt;INFO&lt;/code&gt; 指令( &lt;code&gt;TURN&lt;/code&gt; , &lt;code&gt;BOARD&lt;/code&gt; or &lt;code&gt;BEGIN&lt;/code&gt; )，管理器发送 &lt;code&gt;INFO&lt;/code&gt; 指令时并不读取 AI 的响应&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;INFO timeout_match &lt;span class=&#34;m&#34;&gt;300000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;INFO timeout_turn &lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;INFO max_memory &lt;span class=&#34;m&#34;&gt;83886080&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 没有期待的响应&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;36-end&#34;&gt;3.6 END&lt;/h3&gt;
&lt;p&gt;AI 在接收到这条指令时应该尽快中止。管理器等待 AI 自行完成，但若中止过程太久（比如1秒），则管理器将结束 AI 进程。AI 在接收到 &lt;code&gt;END&lt;/code&gt; 指令后，不应该在标准输出上写任何信息。但在 AI 进程结束前，管理器不要关闭管道。&lt;/p&gt;
&lt;p&gt;AI 应该删除其临时文件&lt;/p&gt;
&lt;h3 id=&#34;37-about&#34;&gt;3.7 ABOUT&lt;/h3&gt;
&lt;p&gt;管理器期望 AI 在一个行内给出自身的一些信息，信息的格式为 key=&amp;quot;info&amp;quot;，多个信息用逗号隔开，建议的 key 包括：name, version, author, country, www, email。管理器应当识别这些信息，但是也必须能够应对旧版 AI 中曾经使用的非结构化的人类习惯文本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      ABOUT
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;AI 回答：
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SomeBrain&amp;#34;&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Nymand&amp;#34;&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-可选命令&#34;&gt;4 可选命令&lt;/h2&gt;
&lt;p&gt;本章节中的扩展命令在 Gomocup 锦标赛中并不强制要求支持，但在人类对弈过程中是很有用的。&lt;/p&gt;
&lt;h3 id=&#34;41-rectstart-widthheight&#34;&gt;4.1 RECTSTART [width],[height]&lt;/h3&gt;
&lt;p&gt;与 &lt;code&gt;START&lt;/code&gt; 类似，区别在于棋盘为矩形。&lt;code&gt;[width]&lt;/code&gt; 描述横轴，&lt;code&gt;[height]&lt;/code&gt; 描述纵轴。若棋盘为正方形则必须使用 &lt;code&gt;START&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      RECTSTART 30,20
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;AI 回答：
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      OK &lt;span class=&#34;c1&#34;&gt;# parameters are good&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;      ERROR message &lt;span class=&#34;c1&#34;&gt;# rectangular board is not supported or other error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;42-restart&#34;&gt;4.2 RESTART&lt;/h3&gt;
&lt;p&gt;该指令在一局比赛结束或中止后执行。棋盘尺寸不变。AI 释放上一局的棋盘和其他资源，创建一个新的空棋盘并使自己准备开始新的一局比赛，准备停当后 AI 回写 &lt;code&gt;OK&lt;/code&gt; 并等待后续的对局指令。如果 AI 回答 &lt;code&gt;UNKNOWN&lt;/code&gt; ，管理器将发送 &lt;code&gt;END&lt;/code&gt; 并重新运行 AI 进程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      RESTART
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;AI 回答：
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;43-takeback-xy&#34;&gt;4.3 TAKEBACK [X],[Y]&lt;/h3&gt;
&lt;p&gt;该指令用于撤销最后的一步行棋，AI 移除 &lt;code&gt;[X],[Y]&lt;/code&gt; 处的落子后回答 &lt;code&gt;OK&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      TAKEBACK 9,10
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;AI 回答：
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;44-play-xy&#34;&gt;4.4 PLAY [X],[Y]&lt;/h3&gt;
&lt;p&gt;仅当 AI 发送 &lt;code&gt;SUGGEST&lt;/code&gt; 指令时，用来强制 AI 行棋在 &lt;code&gt;[X],[Y]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;期望的响应：与 &lt;code&gt;PLAY&lt;/code&gt; 指令指定的 &lt;code&gt;[X],[Y]&lt;/code&gt; 相同；若 AI 不认同管理器发送的坐标，其可以回答一个不同于 &lt;code&gt;PLAY&lt;/code&gt; 指令的坐标，但行棋位置必须按照 &lt;code&gt;PLAY&lt;/code&gt; 指令指定的位置落子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;AI 发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      SUGGEST 10,10
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      PLAY 12,10
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;AI 在 12,10 落子并且回答:
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;      12,10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-由-ai-发送的指令&#34;&gt;5 由 AI 发送的指令&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以下指令由 AI 按需发送，管理器必须能够识别这些指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;51-unknown-error-message&#34;&gt;5.1 UNKNOWN [error message]&lt;/h3&gt;
&lt;p&gt;AI 发送此指令，表明其接收到了未知的或未实现的指令。这意味着在 AI 接收到奇怪的指令时不是退出程序。&lt;/p&gt;
&lt;p&gt;指令后跟随的消息被用来通过管理器展现给用户。若管理器发送的可选指令未由 AI 实现，则管理器应当转而发送强制指令。&lt;/p&gt;
&lt;h3 id=&#34;52-error-error-message&#34;&gt;5.2 ERROR [error message]&lt;/h3&gt;
&lt;p&gt;AI 发送此指令，表明其接收到了已经实现的指令，但是在处理过程中出现了错误。比如内存限制太小或者棋盘尺寸太大。&lt;/p&gt;
&lt;p&gt;指令后跟随的简短消息将由管理器写入日志窗口或日志文件。&lt;/p&gt;
&lt;p&gt;管理器也可是试图修改一些游戏选项并重发指令！&lt;/p&gt;
&lt;h3 id=&#34;53-message-message&#34;&gt;5.3 MESSAGE [message]&lt;/h3&gt;
&lt;p&gt;发送给用户的消息。管理器可以将该消息写入日志窗口或日志文件。期望的是，AI 在响应管理器的一些指令之前，发送这些消息。一条消息中不可以有换行符，多行文本应该拆分成多个 &lt;code&gt;MESSAGE&lt;/code&gt; 指令发送给管理器&lt;/p&gt;
&lt;p&gt;建议之发送英文消息。若 AI 发送其他语种的消息，其应该检测系统的 &lt;code&gt;code page&lt;/code&gt; 并且不要发送该 &lt;code&gt;code page&lt;/code&gt; 中无法显示的字符&lt;/p&gt;
&lt;h3 id=&#34;54-debug-message&#34;&gt;5.4 DEBUG [message]&lt;/h3&gt;
&lt;p&gt;与 &lt;code&gt;MESSAGE&lt;/code&gt; 指令类似，但仅面向 AI 的作者提供调试信息。这些信息在 Gomocup 锦标赛中将不被公开可见。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;管理器发送：
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;      TURN 10,15
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;AI 回答:
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;      DEBUG The most promising move now is &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;10,14&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;alfa&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10025&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;beta&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8641&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;      DEBUG The most promising move now is &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;11,14&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;alfa&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10125&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;beta&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8641&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;      MESSAGE I will be the winner  
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;      10,16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;55-suggest-xy&#34;&gt;5.5 SUGGEST [X],[Y]&lt;/h3&gt;
&lt;p&gt;AI 可以自行推荐行棋的坐标，而内部的局面状态并不改变。管理器可能忽略 AI 的建议而强制另一个坐标给 AI。期望的管理器应答是 &lt;code&gt;PLAY&lt;/code&gt; 或者 &lt;code&gt;END&lt;/code&gt; 指令。&lt;/p&gt;
&lt;p&gt;在 Gomocup 锦标赛中，管理器始终采纳 AI 在SUGGEST指令中给出的行棋位置。大多数 AI 都不使用此指令&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;(五子棋棋盘的默认大小为15x15，详见：http://renju.net/study/rifrules.php)&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

        
      </description>
    </item>
    
    <item>
      <title>Hugo 添加 Staticman 评论功能</title>
      <link>/post/original/cs/blog/hugowithstaticman/</link>
      <pubDate>Tue, 11 May 2021 13:00:00 +0800</pubDate>
      
      <guid>/post/original/cs/blog/hugowithstaticman/</guid>
      <description>
        
          &lt;h2 id=&#34;描述&#34;&gt;描述&lt;/h2&gt;
&lt;p&gt;能为静态站点提供评论功能的第三方模块有很多(排名无先后)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Talkyard&lt;/li&gt;
&lt;li&gt;HyperComments&lt;/li&gt;
&lt;li&gt;Remarkbox&lt;/li&gt;
&lt;li&gt;IntenseDebate&lt;/li&gt;
&lt;li&gt;Gitalk&lt;/li&gt;
&lt;li&gt;Gitment&lt;/li&gt;
&lt;li&gt;Vuukle&lt;/li&gt;
&lt;li&gt;Muut&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;且都各有其优缺点。要取舍这些模块，先明确功能与特性的需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;免费&lt;/li&gt;
&lt;li&gt;无广告&lt;/li&gt;
&lt;li&gt;高度定制&lt;/li&gt;
&lt;li&gt;评论信息保存在站点所有者可控的存储介质中&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;迁移成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过筛选，决定使用 &lt;a href=&#34;https://staticman.net/&#34;&gt;staticman&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该系统可以满足上述需求，唯一的缺点是部署步骤较多，因此撰写此文，方便参考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文专注：无(低)成本的让 staticman 在 Hugo 中运行，因此诸如 Hugo 的安装配置，相关站点的注册等则省略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;涉及应用&#34;&gt;涉及应用&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Ver&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Hugo&lt;/td&gt;
&lt;td&gt;静态博客构建&lt;/td&gt;
&lt;td&gt;0.83.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Staticman&lt;/td&gt;
&lt;td&gt;博客评论工具&lt;/td&gt;
&lt;td&gt;Branch master&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Heroku&lt;/td&gt;
&lt;td&gt;提供 Staticman 线上运行环境&lt;/td&gt;
&lt;td&gt;cloud service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Github&lt;/td&gt;
&lt;td&gt;博客代码线上仓库、评论数据线上仓库&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Netlify&lt;/td&gt;
&lt;td&gt;博客发布平台&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;h3 id=&#34;0准备工作&#34;&gt;0、准备工作&lt;/h3&gt;
&lt;p&gt;在 &lt;a href=&#34;https://signup.heroku.com/&#34;&gt;https://signup.heroku.com/&lt;/a&gt; 注册，从而为 staticman 提供云服务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若计划将 staticman 搭建在自己的平台或其他平台可省略此步骤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1部署-staticman&#34;&gt;1、部署 staticman&lt;/h3&gt;
&lt;p&gt;假设 步骤0 已完成&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进入 &lt;a href=&#34;https://github.com/eduardoboucas/staticman&#34;&gt;https://github.com/eduardoboucas/staticman&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;点击紫色的 &lt;code&gt;Deploy on Heroku&lt;/code&gt; 按钮，进入 Heroku 站点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;填写 &lt;strong&gt;App name&lt;/strong&gt;: blog-commenter&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deploy app 提交成功后，进入刚创建的 App 的 settings 页面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/3.png&#34; alt=&#34;&#34;&gt;
在 &lt;strong&gt;Config Vars&lt;/strong&gt; 栏 Add 如下变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GITHUB_APP_ID&lt;/strong&gt;: 值从 步骤2 获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GITHUB_PRIVATE_KEY&lt;/strong&gt;: 值从 步骤2 获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RSA_PRIVATE_KEY&lt;/strong&gt;: 自行生成 rsa 秘钥，例如：openssl genrsa -out key.pem；将 key.pem 内容填入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NODE_ENV&lt;/strong&gt;: production&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2github-app&#34;&gt;2、Github App&lt;/h3&gt;
&lt;p&gt;这是 staticman 推荐的授权方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进入 &lt;a href=&#34;https://github.com/settings/apps/new&#34;&gt;https://github.com/settings/apps/new&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;填写的内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GitHub App name&lt;/strong&gt;: my-blog-commenter(不重名就行)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Homepage&lt;/strong&gt;: &lt;a href=&#34;https://staticman.net/&#34;&gt;https://staticman.net/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Webhook URL&lt;/strong&gt;: &amp;quot;https://{这里的名字取自 步骤1 的App Name}.herokuapp.com/v1/webhook&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;: Read &amp;amp; Write - Necessary to read the Staticman site config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull Requests&lt;/strong&gt;: Read &amp;amp; Write - Necessary to merge pull requests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Subscribe&lt;/strong&gt;: 勾选 Pull request events&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;点击&lt;code&gt;Create GitHub App&lt;/code&gt;提交，创建成功后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;点击 &lt;code&gt;Generate a private key&lt;/code&gt; 为该 App 生成私钥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器会自动下载刚刚生成的秘钥，名为：xxxxxxxxxxx.private-key.pem&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至此，&lt;strong&gt;App ID&lt;/strong&gt; 和 &lt;strong&gt;私钥&lt;/strong&gt; 都已知，分别填回 步骤1 的 &lt;strong&gt;GITHUB_APP_ID&lt;/strong&gt; 和 &lt;strong&gt;GITHUB_PRIVATE_KEY&lt;/strong&gt; 即可&lt;/p&gt;
&lt;h3 id=&#34;3评论仓库&#34;&gt;3、评论仓库&lt;/h3&gt;
&lt;p&gt;建立单独的 repo 以存储评论数据，以 github.com 为例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进入 &lt;a href=&#34;https://github.com/new&#34;&gt;https://github.com/new&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本例名为&lt;code&gt;blog-comments&lt;/code&gt;
&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建成功后，进入 &lt;a href=&#34;https://github.com/settings/apps&#34;&gt;https://github.com/settings/apps&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Edit&lt;/code&gt; 编辑 App&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;点击 &lt;code&gt;Install App&lt;/code&gt;，安装 my-blog-commenter 到 &lt;code&gt;blog-comments&lt;/code&gt; 的所有者的 github.com 账号&lt;/p&gt;
&lt;p&gt;Repository access 设置为 Only select repositories，选择 &lt;code&gt;blog-comments&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;保存&lt;/p&gt;
&lt;h3 id=&#34;4hugo-配置&#34;&gt;4、Hugo 配置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;config.toml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;staticman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://{这里的名字取自 步骤1 的App Name}.herokuapp.com/v3/entry/github/{你的github账号名}/blog-comments/master/comments&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5staticman-配置&#34;&gt;5、staticman 配置&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;blog-comments&lt;/code&gt; 的根下，建立：&lt;code&gt;staticman.yml&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，配置文件的名称严格对应，一个字母都不能差&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;staticman.yml，此例的配置可以适配 Hugo 主题 Beautiful Hugo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Name of the property. You can have multiple properties with completely&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# different config blocks for different sections of your site.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# For example, you can have one property to handle comment submission and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# another one to handle posts.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;comments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# (*) REQUIRED&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Names of the fields the form is allowed to submit. If a field that is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# not here is part of the request, an error will be thrown.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedFields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedOrigins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yoursite.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# (*) REQUIRED&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Name of the branch being used. Must match the one sent in the URL of the&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# request.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;master&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Text to use as the commit message or pull request title. Accepts placeholders.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;commitMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;New comment in {options.slug}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# (*) REQUIRED&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Destination path (filename) for the data files. Accepts placeholders.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;entry-{@timestamp}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The format of the generated data files. Accepted values are &amp;#34;json&amp;#34;, &amp;#34;yaml&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# or &amp;#34;frontmatter&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yaml&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# List of fields to be populated automatically by Staticman and included in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# the data file. Keys are the name of the field. The value can be an object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# with a `type` property, which configures the generated field, or any value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# to be used directly (e.g. a string, number or array)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;generatedFields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;timestamp-seconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Whether entries need to be appproved before they are published to the main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# branch. If set to `true`, a pull request will be created for your approval.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Otherwise, entries will be published to the main branch automatically.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;moderation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Name of the site. Used in notification emails.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yoursite&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Notification settings. When enabled, users can choose to receive notifications&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# via email when someone adds a reply or a new comment. This requires an account&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# with Mailgun, which you can get for free at http://mailgun.com.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#notifications:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Enable notifications&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#enabled: true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# (!) ENCRYPTED&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Mailgun API key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#apiKey: &amp;#34;1q2w3e4r&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# (!) ENCRYPTED&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Mailgun domain (encrypted)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#domain: &amp;#34;4r3e2w1q&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;67&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# (*) REQUIRED&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;69&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Destination path (directory) for the data files. Accepts placeholders.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{options.slug}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;71&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;72&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Names of required fields. If any of these isn&amp;#39;t in the request or is empty,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;73&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# an error will be thrown.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;74&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requiredFields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;75&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;76&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# List of transformations to apply to any of the fields supplied. Keys are&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;77&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# the name of the field and values are possible transformation types.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;79&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;81&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;6博客仓库中引入评论仓库&#34;&gt;6、博客仓库中引入评论仓库&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;将评论仓库 &lt;code&gt;blog-comments&lt;/code&gt; 作为博客仓库的 Git 子模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; your_hugo_blog_repo_working_dir
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ git submodule add https://github.com/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;你的github账号名&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;/blog-comments.git data/comments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;7netlify-配置可选&#34;&gt;7、Netlify 配置(可选)&lt;/h3&gt;
&lt;p&gt;经过之前的操作，staticman 模块已经可以收集用户的评论；根据设置的不同，staticman 使用 Pull Requests (PR) 或直接 push 的方式将评论数据发送到 &lt;code&gt;blog-comments&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是目前还需要&lt;strong&gt;手动&lt;/strong&gt;的重新构建博客，才能在静态页面中显示用户的评论；想要在用户评论被接受后，&lt;strong&gt;自动&lt;/strong&gt;的构建博客，需要进行进一步的设置&lt;/p&gt;
&lt;p&gt;这里以 Netlify 为例说明&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;站点注册、Github 关联、域名设置等省略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;71-build-hooks-in-netlify&#34;&gt;7.1 Build hooks in Netlify&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;进入 netlify 的站点设置，选择&lt;code&gt;Build &amp;amp; Deploy&lt;/code&gt;标签&lt;/p&gt;
&lt;p&gt;在 Build hooks 栏添加新 hook&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;保存后，netlify 将为该站点生成一个唯一的 url，用来从外部触发自动构建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;72-webhooks-in-github&#34;&gt;7.2 Webhooks in Github&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;进入 &lt;code&gt;blog-comments&lt;/code&gt; 仓库的设置页面，选择 Webhooks 标签&lt;/p&gt;
&lt;p&gt;将 步骤7.1 中得到的 url 填入 Payload URL&lt;/p&gt;
&lt;p&gt;选择触发该 hook 的事件 ( Pull Requests、Pushes )&lt;/p&gt;
&lt;p&gt;完成添加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;73-build-settings-in-netlify&#34;&gt;7.3 Build settings in Netlify&lt;/h4&gt;
&lt;p&gt;经过 步骤7.1 和 步骤7.2 后，每当有新的用户评论被接受，Github 将通过 Webhook 的 URL 通知 Netlify 构建部署博客&lt;/p&gt;
&lt;p&gt;但是注意：&lt;/p&gt;
&lt;p&gt;步骤6 中，&lt;code&gt;blog-comments&lt;/code&gt;仅仅是作为 submodule 被引入到博客仓库的，而 Netlify 的默认构建配置，并没有为 submodule 提供相应的操作，因此需要修改默认构建配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进入 netlify 的站点设置，选择&lt;code&gt;Build &amp;amp; Deploy&lt;/code&gt;标签&lt;/p&gt;
&lt;p&gt;在 Build settings 栏，更新配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/blog/HugoWithStaticman/12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此，staticman 为 hugo 博客提供的评论功能，基本配置完毕&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;h3 id=&#34;扩展配置&#34;&gt;扩展配置&lt;/h3&gt;
&lt;p&gt;在 staticman 的配置文件中，还可以引入验证码、评论审核、过滤等功能，详情参见官方文档&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>EOF，到底怎么回事</title>
      <link>/post/original/cs/io/eof/</link>
      <pubDate>Mon, 03 Aug 2020 15:52:41 +0800</pubDate>
      
      <guid>/post/original/cs/io/eof/</guid>
      <description>
        
          &lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;首先，确未想到，为说清楚这个玩意儿，居然要用不少的篇幅；其次，当涉及对一些概念、原理的追溯时，递归到多深的地步，也不容易拿捏；好在，写这些文字主要是为了将来碰到某些反直觉的情况时可以有个快捷解答；最后若能得到碰巧逛到这里的同仁指点迷津，纠正错误，互通有无，就算赚到了 :-)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;希望读完此文，能够消除一些关于 EOF 的疑惑，再碰到关于她的一些争论时，大家能够相视一笑。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;愿此文，能解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是 EOF？&lt;/li&gt;
&lt;li&gt;为什么需要 EOF？&lt;/li&gt;
&lt;li&gt;文件里包不包含 EOF？&lt;/li&gt;
&lt;li&gt;终端输入时的 EOF 的表示方式和处理行为是怎么样的?&lt;/li&gt;
&lt;li&gt;不同计算机语言的 EOF 如何定义的？&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;li&gt;&lt;em&gt;may your blade never dull&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;section-0&#34;&gt;section-0&lt;/h2&gt;
&lt;h3 id=&#34;概念澄清&#34;&gt;概念澄清&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, end-of-file (commonly abbreviated &lt;a href=&#34;https://en.wikipedia.org/wiki/End-of-file&#34;&gt;EOF&lt;/a&gt;) is a condition in a computer operating system where no more data can be read from a data source. The data source is usually called a file or stream.&lt;/p&gt;
&lt;p&gt;——Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;难为下定义的人们，描述既不能太复杂，又要尽可能的说清一个事物的本质。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好，从上面的叙述中，我们萃取出关于 EOF：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;范畴：&lt;code&gt;计算机操作系统中&lt;/code&gt;，其他领域看来用不着这玩意儿&lt;/li&gt;
&lt;li&gt;含义：一种&lt;code&gt;状况&lt;/code&gt;，什么状况？表明从数据源(通常指文件或流)中已无数据可读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果只看到这里，EOF 似乎只是抽象概念而已，她应该独立于操作系统的种类、也应该独立于能够在某种操作系统下编译的计算机语言，everything before &#39;but&#39; is bullshit。&lt;/p&gt;
&lt;p&gt;但是，维基百科在紧挨着定义的下一段里说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the &lt;strong&gt;C Standard Library&lt;/strong&gt;, the character reading functions such as &lt;strong&gt;getchar&lt;/strong&gt; return a value equal to the symbolic value (macro) &lt;strong&gt;EOF&lt;/strong&gt; to indicate that an end-of-file condition has occurred. The actual value of &lt;strong&gt;EOF&lt;/strong&gt; is implementation-dependent (but is commonly &lt;strong&gt;-1&lt;/strong&gt;, such as in glibc[2]) and is &lt;strong&gt;distinct from&lt;/strong&gt; all &lt;strong&gt;valid character codes&lt;/strong&gt;. Block-reading functions return the number of bytes read, and if this is fewer than asked for, then the end of file was reached or an error occurred (checking of &lt;strong&gt;errno&lt;/strong&gt; or dedicated function, such as &lt;strong&gt;ferror&lt;/strong&gt; is often required to determine which).&lt;/p&gt;
&lt;p&gt;——Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义既然说：EOF 表明了&amp;quot;已无数据可读&amp;quot;的状况，那么识别这种状况的依据是什么？&lt;/li&gt;
&lt;li&gt;计算机语言上千种，唯独选了 C 来描述 EOF 的实现，隐约感到虽然不同语言对于 EOF 的实现可能不同，但 C 的很有代表性&lt;/li&gt;
&lt;li&gt;只要能起到识别&lt;strong&gt;结尾在哪&lt;/strong&gt;的作用就成，并没有一个标准说 EOF 该怎么实现，但&lt;strong&gt;通常&lt;/strong&gt;是用一个能够&lt;strong&gt;区别&lt;/strong&gt;于&lt;strong&gt;全部有效字符码&lt;/strong&gt;的&lt;strong&gt;值&lt;/strong&gt;，比如 glibc 里用 &lt;strong&gt;-1&lt;/strong&gt;。啊，越来越具体，越来越靠近 CPU 里那些用于判断的指令和寄存器&lt;/li&gt;
&lt;li&gt;短暂的概念陈述后，定义者放下了遮面的琵琶，挥舞着藏在身上的各种刀凿斧锯迎面扑来——阻塞 IO 中的读函数，返回读取到的字节数，如果实际数据长度小于指定的长度，
&lt;ul&gt;
&lt;li&gt;重点 1：就会产生一个 EOF(谁产生的后面说)&lt;/li&gt;
&lt;li&gt;重点 2：出错了呢？也是返个 EOF 给你。啊？那我的程序怎么办，到底是读完了还是出错了？别慌——瞧 errno 或问 ferror 去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，我们暂且可以总结出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从功用的角度说 EOF，其对于输入输出操作时标识结尾具有不可或缺性，这种概括屏蔽掉了实现细节&lt;/li&gt;
&lt;li&gt;一旦讨论具体实现时，就不可避免的要限定在某种操作系统和某种计算机语言的环境中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，新的疑问自然产生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尝听人说，在现代操作系统中，对于输入输出这类操作，运行在用户态的应用程序一般是不直接访问硬件的，要请求叫做系统调用的内核接口通过缓冲区来间接进行，那么 EOF 是由内核生成并返给应用程序的吗？除了直接告诉我答案是或否，哪里有直接的证据？&lt;/li&gt;
&lt;li&gt;EOF 的实现没有具体规范，那么操作系统与应用程序之间是如何打招呼：“文件已经读完”的呢？&lt;/li&gt;
&lt;li&gt;EOF 的处理策略与表现特征，是跨平台跨语言统一的，还是各家有各家的高招儿呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们带着疑问，误入藕花深处……&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;随笔&lt;/div&gt;
    &lt;p&gt;下定义，但不规定具体的实现，这下好了，且看众多的操作系统和计算机语言们如何搭配自己的 EOF &amp;quot;卡组&amp;quot;。&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;section-1&#34;&gt;section-1&lt;/h2&gt;
&lt;h3 id=&#34;先说文件&#34;&gt;先说文件&lt;/h3&gt;

&lt;div class=&#34;notices warning&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;不要将 Linux 中的&lt;code&gt;一切皆文件&lt;/code&gt;的&lt;code&gt;文件&lt;/code&gt;二字，与我们现在所说的&lt;code&gt;文件&lt;/code&gt;混淆，这里说的文件，就是通常在外部存储器(如：磁盘)中保存的那些普通文件，特别是文本文件。&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;静态的相对单纯些，我们就从其开始——&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some MS-DOS programs, including parts of the Microsoft MS-DOS shell (COMMAND.COM) and operating-system utility programs (such as EDLIN), treat a &lt;strong&gt;Control-Z in a text file&lt;/strong&gt; as marking the end of meaningful data, and/or append a Control-Z to the end when writing a text file. This was done for two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Backward compatibility with CP/M. The CP/M file system only recorded the lengths of files in multiples of 128-byte &amp;quot;records&amp;quot;, so by convention a Control-Z character was used to mark the end of meaningful data if it ended in the middle of a record. The MS-DOS filesystem has always &lt;strong&gt;recorded the exact byte-length of files&lt;/strong&gt;, so this was never necessary on MS-DOS.&lt;/li&gt;
&lt;li&gt;It allows programs to use the &lt;strong&gt;same code&lt;/strong&gt; to &lt;strong&gt;read&lt;/strong&gt; input from both a &lt;strong&gt;terminal&lt;/strong&gt; and a &lt;strong&gt;text file&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;乍看之下，为了兼容性和代码复用以及便利性，某些 MS-DOS 程序在保存文件的时候会在最后多写入一个和正文无关的，但用来标识有意义数据的结尾的字符，只不过选的值不是 -1(这是必然的，ASCII 里没 -1)，而是一个有效的 ASCII 字符，即：替换字符( Control-Z 码值 26)，这算不算文件中包含 EOF？&lt;/p&gt;
&lt;p&gt;嗯，不算。&lt;/p&gt;

&lt;div class=&#34;notices info&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;简明结论&lt;/div&gt;
    &lt;p&gt;文件中不包含 EOF。或者说，文件不通过在自身内容的最后放一个特殊的额外的字符来标记自己的结尾！&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;说的这么绝对，那上面的(Control-Z 码值 26)被写在了某些文件的尾部该作何解？&lt;/p&gt;
&lt;p&gt;可以这么说：这个在某些文件中的(Control-Z 码值 26)字符，只有在那些把他&lt;code&gt;当作文件结尾标识&lt;/code&gt;来对待的程序中，才表现得具备了 EOF 的特征；换句话说，对于那些不把(Control-Z 码值 26)当做文件结尾标识的程序来说，这就是个普通的 ASCII，只不过他&lt;a href=&#34;https://web.itu.edu.tr/sgunduz/courses/mikroisl/ascii.html&#34;&gt;不可打印&lt;/a&gt;而已。&lt;/p&gt;
&lt;p&gt;$$
那文件的结尾到底在哪？
$$&lt;/p&gt;
&lt;p&gt;回答之前，我们先问这样一个问题：假设文件中有一个或多个字节的数据用来标明其结尾，那么对于二进制文件，如何区分内容和结尾呢？&lt;/p&gt;
&lt;p&gt;嗯，不太灵光呢。看来，单靠文件内容本身，做不到这一点。&lt;/p&gt;
&lt;p&gt;$$
『文件的结尾在哪』这个问题该转换为：怎么判断文件读完了？
$$&lt;/p&gt;
&lt;p&gt;听老辈们说——戏不够，神仙凑~&lt;/p&gt;

&lt;div class=&#34;notices info&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;简明结论&lt;/div&gt;
    &lt;p&gt;读取文件时，判断是否读完全部内容，不是靠文件内容中的特殊字符，而是文件系统中的重要元数据之一——文件长度&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/io/eof/one_byte.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;长度，居然不是文件内容的附属品，有这么重要的作用？为了突出这一点，我们来做个实验，感受一下文件长度的威力，只关注 EOF 的话可以跳过这一段：(不开虚拟机了，怪麻烦的，就手头的 Windows 了)&lt;/p&gt;
&lt;p&gt;通常情况下，我们无法直接修改诸如文件大小、创建时间等重要的元数据信息，但我们可以间接地晃 Windows 一枪……&lt;/p&gt;
&lt;p&gt;删文件大家都干过，那么 Windows 的回收站想必不陌生，我们的实验步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;为演示方便先清空回收站。然后随便建个什么文件，本例是空的 txt，叫 empty.txt；这个文件扔进回收站，右键属性：&lt;img src=&#34;/images/post/original/cs/io/eof/win_recycle_bin_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理员身份启动 cmd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取当前用户的 SID 后，进入该用户对应的回收站&lt;img src=&#34;/images/post/original/cs/io/eof/win_recycle_bin_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以 &lt;code&gt;$R&lt;/code&gt; 开头的那个是我们删除的文件本身，大小是 0 没错；而我们关注的是在回收站中与其成对出现的以 &lt;code&gt;$I&lt;/code&gt; 开头的文件，本例中名为：$ICPJMHU.txt。他的大小不是 0，看来里头有东西，我们来看一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ICPJMHU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u輏&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\Users\Looper\Desktop\empty.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;嗯，有能看懂的，有乱码的。我们需要从二进制视角来看他的内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/&#34;&gt;WSL&lt;/a&gt;，我们已经知道 SID了，所以这次直接进目录&lt;img src=&#34;/images/post/original/cs/io/eof/win_recycle_bin_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vi -b $ICPJMHU.txt 二进制打开，调 xxd 查看十六进制显示&lt;img src=&#34;/images/post/original/cs/io/eof/win_recycle_bin_4.png&#34; alt=&#34;&#34;&gt;
路径的部分，没什么可说的，除了每个字符占了俩字节(这是因为 Windows 默认存的是 UTF-16)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们逐个说明各个二进制段的作用&lt;img src=&#34;/images/post/original/cs/io/eof/win_recycle_bin_6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;好，吟唱完毕，施法~&lt;br&gt;
我们把&lt;code&gt;8~15&lt;/code&gt;的&lt;code&gt;8&lt;/code&gt;个字节修改成：&lt;code&gt;FFFF FFFF FFFF FF7F&lt;/code&gt;&lt;br&gt;
保存退出，回到 Windows，从新查看被删除文件的属性&lt;br&gt;
&lt;img src=&#34;/images/post/original/cs/io/eof/win_recycle_bin_5.png&#34; alt=&#34;&#34;&gt;
$$
7.99 EB = 7.99 * 1024 PB
$$
$$
7.99 EB = 7.99 * 1024 * 1024 TB
$$
$$
7.99 EB = 7.99 * 1024 * 1024 * 1024 GB = 8579197173.76 GB
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;友情提示&lt;/div&gt;
    &lt;p&gt;24~27的4个字节存了一个长度。欸，你怎么就和文件大小长得那么像呢~&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;再说终端&#34;&gt;再说终端&lt;/h3&gt;
&lt;p&gt;上一节中，在已知文件长度的情况下，不需要 EOF 存在于文件中，就可以知道何时文件读取完毕。然而，对于处理在终端中输入的数据来说，怎么标识出输入的结束呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input from a terminal &lt;strong&gt;never really &amp;quot;ends&amp;quot;&lt;/strong&gt; (unless the device is disconnected), but it is useful to enter more than one &amp;quot;&lt;strong&gt;file&lt;/strong&gt;&amp;quot;into a terminal, so &lt;strong&gt;a key sequence&lt;/strong&gt; is &lt;strong&gt;reserved&lt;/strong&gt; to indicate end of input. In &lt;strong&gt;UNIX&lt;/strong&gt; the translation of the keystroke to EOF is performed by the &lt;strong&gt;terminal driver&lt;/strong&gt;, so a program does not need to distinguish terminals from other input files. By default, the driver converts a &lt;strong&gt;Control-D character&lt;/strong&gt; at the start of a line into an end-of-file indicator. To insert an actual Control-D (ASCII 04) character into the input stream, the user precedes it with a &amp;quot;quote&amp;quot; command character (usually Control-V). AmigaDOS is similar but uses Control-\ instead of Control-D.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;DOS and Windows&lt;/strong&gt; (and in CP/M and many DEC operating systems such as RT-11 or VMS), reading from the terminal will &lt;strong&gt;never produce an EOF&lt;/strong&gt;. Instead, programs &lt;strong&gt;recognize&lt;/strong&gt; that the source is a terminal (or other &amp;quot;character device&amp;quot;) and interpret a given &lt;strong&gt;reserved character or sequence as an end-of-file indicator&lt;/strong&gt;; most commonly this is an &lt;strong&gt;ASCII Control-Z, code 26&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;——Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;诚然，这回长度是未知的了，若不指明在何时在哪里结束，程序将无法得知：一段输入已经结束。&lt;/p&gt;
&lt;p&gt;虽然，定义规范并没有限制要用那个值来表示 EOF，可实现者却无法规避以下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个值不能和任何有效字符冲突&lt;/li&gt;
&lt;li&gt;这个值得能从键盘输入，且不能太麻烦&lt;/li&gt;
&lt;li&gt;这个值虽然特殊，但没有特殊到占用太多的内存，为其设计特别的处理逻辑的地步&lt;/li&gt;
&lt;li&gt;键盘上就那么些组合，怎么才能同时满足以上 3 点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;且看，具有代表性的实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 UNIX 中，组合键击(Control-D 码值 04)&lt;strong&gt;转换&lt;/strong&gt;为 EOF 是由终端驱动完成的，因此应用程序&lt;strong&gt;不需要&lt;/strong&gt;将终端和普通文件&lt;strong&gt;区别对待&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提问&lt;/strong&gt;：既然我们从键盘输入的(Control-D 码值 04)被终端截胡转成 EOF 了，文件中又不存 EOF，那我要想在文件中切实的存一个(Control-D 码值 04)怎么办呢？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答&lt;/strong&gt;：转义，先按(Control-V)紧接着按(Control-D)。注意，这不是把 EOF 输入进去了，是把没被转成 EOF 的(Control-D)的原本码值输入进去了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 DOS 和 Windows 中，从终端读取永远不会产生 EOF。取而代之的，因为程序知道数据源是终端而不是文件(留意其与 UNIX 策略的不同)，所以将特定的保留字符或序列当作文件结束指示符看待，最常见的是(Control-Z 码值 26)。(哦~ Control-Z 好像在哪里见过你。)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;section-2&#34;&gt;section-2&lt;/h2&gt;
&lt;h3 id=&#34;let-us-reading-the-fucking-source-code&#34;&gt;let us reading the fucking source code...&lt;/h3&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;随笔&lt;/div&gt;
    &lt;p&gt;就说嘛，拿个 echo 和 hexdump 就想糊弄过去？笑~&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;在 faq.cprogramming.com 站点上，有一篇很古老的文章 &lt;a href=&#34;https://faq.cprogramming.com/cgi-bin/smartfaq.cgi?answer=1048865140&amp;amp;id=1043284351&#34;&gt;Definition of EOF and how to use it effectively&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开篇就一锤定音的说到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EOF 不是 A char&lt;/li&gt;
&lt;li&gt;EOF 不是 A value that exists at the end of a file&lt;/li&gt;
&lt;li&gt;EOF 不是 A value that could exist in the middle of a file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还好还好，和我们前面说的不冲突。该文作者的目的，是希望学习该语言的程序员不要掉进该语言的 EOF 的一些陷阱，留意作者所说的关于与 EOF 比较时变量类型的坑。其与我们当前关注的问题并不直接关联，因此在这里仅做了链接，不打算展开。&lt;/p&gt;
&lt;p&gt;回到我们的探索。&lt;/p&gt;
&lt;p&gt;C 语言中对 EOF 的定义简单明了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;stdio.h&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define EOF     (-1)
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;真的是&lt;code&gt;-1&lt;/code&gt;，那么，各家都是用的&lt;code&gt;-1&lt;/code&gt;吗？我们看一看 &lt;a href=&#34;https://www.gnu.org/software/libc/manual/html_node/index.html&#34;&gt;The GNU C Library&lt;/a&gt; 怎么说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/libc/manual/html_node/EOF-and-Errors.html&#34;&gt;12.15 End-Of-File and Errors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Macro: int EOF&lt;br&gt;
This macro is an integer value that is returned by a number of narrow stream functions to indicate an end-of-file condition, or some other error situation. With the GNU C Library, EOF is -1. In other libraries, &lt;strong&gt;its value may be some other negative number.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，程序要做判断时 EOF 不可与 -1 互换。欸，NULL 和 ‘\0’ 何尝不是如此。像这类规范中不限定具体实现的例子，在 CS(Computer Science) 世界里比比皆是，比如 Go 的包导入；比如 C++ 自增自减运算符的副作用；比如……停，眼前这点儿事还没扯完呢。&lt;/p&gt;
&lt;p&gt;记得之前我们说在某些条件下，会产生 EOF，但那时没说是谁产生的。&lt;/p&gt;
&lt;p&gt;下面就去代码中寻觅答案，这也能捎带着回答 section-0 末尾提出的问题。&lt;/p&gt;
&lt;p&gt;我们选 glibc-2.31 (clone 能不能快点)里的 getc 为例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;glibc-2.31/libio/getc.c&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;libioP.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_getc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;CHECK_FILE&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_need_lock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_IO_getc_unlocked&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;_IO_acquire_lock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_IO_getc_unlocked&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;_IO_release_lock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个需要确保线程安全的函数，可以看到其为了进入临界区而获得锁的逻辑。这里关注的是 &lt;code&gt;_IO_getc_unlocked&lt;/code&gt;，查看此宏，看到他又展开为另一个宏(老一些的版本没有这个步骤)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;glibc-2.31/libio/libio.h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define _IO_getc_unlocked(_fp) __getc_unlocked_body (_fp) 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续定位&lt;code&gt;__getc_unlocked_body&lt;/code&gt;，这是一个内联宏，作用是可以用不调函数的方式执行从流中读取数据的逻辑。其中，&lt;code&gt;__glibc_unlikely&lt;/code&gt;并不改变比较结果，而是用来通知编译器在此处进行恰当优化的，他与我们的读调用何时产生 EOF 无关，不展开了，继续追索：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;glibc-2.31/bits/types/struct_FILE.h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* These macros are used by bits/stdio.h and internal headers.  */&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define __getc_unlocked_body(_fp)                                 \
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;(__glibc_unlikely ((_fp)-&amp;gt;_IO_read_ptr &amp;gt;= (_fp)-&amp;gt;_IO_read_end)    \
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;? __uflow (_fp) : *(unsigned char *) (_fp)-&amp;gt;_IO_read_ptr++)
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们离真相，还差一步，这里先把不太直观的代码简化为等价的函数体：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__getc_unlocked_body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__uflow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如果，&lt;code&gt;_IO_read_ptr &amp;gt;= _IO_read_end&lt;/code&gt;，说明缓冲区已读完，需要重新从 IO 设备中读取数据到缓冲区。&lt;/li&gt;
&lt;li&gt;否则，说明尚未到达缓冲区末尾，只需返回&lt;code&gt;_IO_read_ptr&lt;/code&gt;所指向的一个字节大小的内容，然后&lt;code&gt;_IO_read_ptr&lt;/code&gt;加 1(指针加减要留神)，指向下一个字节。&lt;/li&gt;
&lt;li&gt;最初的时候&lt;code&gt;_IO_read_ptr&lt;/code&gt;和&lt;code&gt;_IO_read_end&lt;/code&gt;是相等的，这样才会从键盘中进行读取。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终，定位到 &lt;code&gt;__uflow&lt;/code&gt; 函数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;glibc-2.31/libio/genops.c&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__uflow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_vtable_offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_IO_fwide&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;_IO_fwide&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_in_put_mode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_switch_to_get_mode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_in_backup&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;_IO_switch_to_main_get_area&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_have_markers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save_for_backup&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_read_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_IO_have_backup&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;_IO_free_backup_area&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_IO_UFLOW&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;呜呼呀，满屏的 EOF。——注意上面代码的语境，程序领空中运行在用户态的库函数。&lt;/p&gt;
&lt;p&gt;关于 EOF 是在哪里产生的，这里还有一篇老外的文章，&lt;a href=&#34;https://ruslanspivak.com/eofnotchar/&#34;&gt;EOF is not a character&lt;/a&gt;。图文并茂，既有跨语言的横向对比，又有纵深的底层原理说明。比我写的好多了，大家有空可以看看。&lt;/p&gt;
&lt;p&gt;我们摘抄一段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do the high-level I/O routines in the examples above determine the end-of-file condition? On Linux systems the routines either directly or indirectly use the read() system call provided by the kernel. The getc() function (or macro) in C, for example, uses the read() system call and returns EOF if read() indicated the end-of-file condition. The read() system call returns 0 to indicate the EOF condition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/io/eof/getc_read.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里就告诉了我们结论，EOF 并非由内核直接产生，库函数是通过判断系统调用的返回值，进而决定是否要返回 EOF 给调用者的。(老外随手画的图，看起来比我费半天劲用 visio 做的一点不差。莫非是因为：只要不是汉字，其他的看起来就都是画儿的缘故。。。)&lt;/p&gt;
&lt;p&gt;另外多说一句：其实到&lt;code&gt;int __uflow (FILE *fp)&lt;/code&gt;这里还没完，还有很多宏、函数，可以细追下去，比如在最终的系统调用&lt;code&gt;sys_read&lt;/code&gt;之前，能追到&lt;code&gt;int _IO_new_file_underflow (FILE *fp)&lt;/code&gt;，但可能需要运行时调试。因其与产生 EOF 的关系不是直接的，为省略篇幅就不全粘过来了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;section-3&#34;&gt;section-3&lt;/h2&gt;
&lt;h3 id=&#34;举起我们的栗子&#34;&gt;举起我们的栗子&lt;/h3&gt;
&lt;p&gt;看了那么多别人的代码，我们自己也应该试着写一写，写不好没关系，反正也不是拿去卖钱的。&lt;/p&gt;
&lt;p&gt;$$
\left ( \frac{表演真正的技术}{露一把真正的怯}\right )^{是时候了}= 1
$$&lt;/p&gt;
&lt;p&gt;原则，我们的程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要尽量简单&lt;/li&gt;
&lt;li&gt;要能达到让我们不再对 EOF 的怪异行为困惑的目的&lt;/li&gt;
&lt;li&gt;尽量不只使用一种系统、一种语言，免得孤证不证，以偏概全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然是问题带我们误入的藕花深处，为了解答疑问，就让我们——争渡，睁渡&lt;/p&gt;
&lt;p&gt;记得前文中，UNIX 和 Windows 下的终端对于文件结尾的处理策略是不同的，具体差在哪呢？&lt;/p&gt;
&lt;p&gt;看如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fgetc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;STDIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\t&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;char-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\t&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段程序的功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动后阻塞，等待用户输入，遇到文件结尾标记(注意我这里没用 EOF 的叫法)就退出。&lt;/li&gt;
&lt;li&gt;在遇到文件结尾标记之前，用户每输入一次回车，就执行循环内的代码，fgetc 负责读取一个字符(不是字节)，而 ord 将被读到的字符的第一个字节转为 0-255 之间的值(就是对应的 ASCII)。&lt;/li&gt;
&lt;li&gt;把经过处理的输入，用稍微友好一点的格式打印出来。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;步骤&lt;/div&gt;
    &lt;p&gt;在 Windows 10 终端下，使用 php-cli 7.x 执行此程序，输入的过程是：&lt;br&gt;
ENTER、a ENTER、A ENTER、abc ENTER、aBc ENTER、CTRL-D ENTER、CTRL-DCTRL-D ENTER、CTRL-Z ENTER&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;输出如下：# 和后面的内容是我加的注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;		char-1  &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CR \r&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;		char-2  &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of LF \n&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;a      
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;		char-3  &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of a&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;		char-4  &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CR \r&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;		char-5  &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of LF \n&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;A      
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;		char-6  &lt;span class=&#34;m&#34;&gt;65&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of A&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;		char-7  &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CR \r&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;		char-8  &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of LF \n&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;abc    
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;		char-9  &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of a&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;		char-10 &lt;span class=&#34;m&#34;&gt;98&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of b&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;		char-11 &lt;span class=&#34;m&#34;&gt;99&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of c&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;		char-12 &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CR \r&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;		char-13 &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of LF \n&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;aBc    
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;		char-14 &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of a&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;		char-15 &lt;span class=&#34;m&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of B&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;		char-16 &lt;span class=&#34;m&#34;&gt;99&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of c&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;		char-17 &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CR \r&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;		char-18 &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of LF \n&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;^D     
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;		char-19 &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# ASCII of CTRL-D&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;		char-20 &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CR \r&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;		char-21 &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of LF \n&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;^D^D   
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;		char-22 &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# ASCII of CTRL-D&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;		char-23 &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# ASCII of CTRL-D&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;		char-24 &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CR \r&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;		char-25 &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of LF \n&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;^Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于 CR 和 LF 的话题，网络上的文章比关于 EOF 的多，可以搜索来看。在 Linux 和 MacOS 下，同样的程序，同样的输入，输出会与 Windows 不同。例如在 MacOS 下 ENTER 只对应一个单独的 \n，没有 \r。&lt;/p&gt;
&lt;p&gt;我们目前的关注点不在于不同系统对于 CR 和 LF 的不同策略，那是一个可以追溯到没有计算机时代的故事。现在想看的是不同平台下，对待表示输入结束的文件结尾标识的异同。&lt;/p&gt;
&lt;p&gt;首先，前文中说过，Windows 中从终端读取输入，不会产生 EOF；其次，为了表示文件结尾，他选用了 CTRL-Z ASCII 26，作为输入结束的标记，所以我们才能够看到对于 CTRL-D，Windows 将其视作普通字符，程序读取该字符并将其 ASCII 码值打印到屏幕上。而当我们输入了 CTRL-Z 并 ENTER 后，程序退出(实际上是退出的循环，但因为退出循环后没别的代码了，程序自然退出)，并没有打印 CTRL-Z 的 ASCII 码值。那么，能不能让该程序在 Windows 下打出这个 CTRL-Z 的码值，并且不退出程序呢？可以的，这样操作：

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;步骤&lt;/div&gt;
    &lt;p&gt;启动程序，输入一些除了 CTRL-Z 以外的其他输入，然后 CTRL-Z，最后回车。&lt;br&gt;
比如：anything but &amp;quot;CTRL-Z&amp;quot;，然后 CTRL-Z，最后 ENTER&lt;/p&gt;

  &lt;/div&gt;

输出如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;anything but &lt;span class=&#34;s2&#34;&gt;&amp;#34;CTRL-Z&amp;#34;&lt;/span&gt;^Z
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;		char-1  &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 我该选个字母少的句子。。。懒，省略一些注释&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;		char-2  &lt;span class=&#34;m&#34;&gt;110&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;		char-3  &lt;span class=&#34;m&#34;&gt;121&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;		char-4  &lt;span class=&#34;m&#34;&gt;116&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;		char-5  &lt;span class=&#34;m&#34;&gt;104&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;		char-6  &lt;span class=&#34;m&#34;&gt;105&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;		char-7  &lt;span class=&#34;m&#34;&gt;110&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;		char-8  &lt;span class=&#34;m&#34;&gt;103&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;		char-9  &lt;span class=&#34;m&#34;&gt;32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;		char-10 &lt;span class=&#34;m&#34;&gt;98&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;		char-11 &lt;span class=&#34;m&#34;&gt;117&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;		char-12 &lt;span class=&#34;m&#34;&gt;116&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;		char-13 &lt;span class=&#34;m&#34;&gt;32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;		char-14 &lt;span class=&#34;m&#34;&gt;34&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;		char-15 &lt;span class=&#34;m&#34;&gt;67&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;		char-16 &lt;span class=&#34;m&#34;&gt;84&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;		char-17 &lt;span class=&#34;m&#34;&gt;82&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;		char-18 &lt;span class=&#34;m&#34;&gt;76&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;		char-19 &lt;span class=&#34;m&#34;&gt;45&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;		char-20 &lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;		char-21 &lt;span class=&#34;m&#34;&gt;34&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;		char-22 &lt;span class=&#34;m&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CTRL-Z，哦，26，我们终于亲眼见到了你&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;		char-23 &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of CR \r&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;		char-24 &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ASCII of LF \n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序打印了 CTRL-Z 26，并且没有退出，继续等待我们的下一轮输入。为什么没退出，后面详解。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在其他平台下运行同样程序的操作留给有好奇心的你我他。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;让我们的 Windows 先那儿等着，说说其他系统。&lt;/p&gt;
&lt;p&gt;比如 Linux 下，输入 CTRL-Z，程序会被切入后台执行，需用 fg 命令唤回，这个和我们的 EOF 无关，略过。那么输入 CTRL-D 呢，不必输入 ENTER 了，程序会立刻对 EOF 做出响应。&lt;/p&gt;
&lt;p&gt;系统和语言都换一换——&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 你好，号称 C+Python 的 Golang
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;bufio&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bufio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadByte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EOF&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// println(&amp;#34;\tchar|&amp;#34;, line, &amp;#34;\t&amp;#34;, c) // 注意 Go 对于这种情况下 c 值的处理
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;			&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;		&lt;span class=&#34;nb&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\tchar-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;步骤&lt;/div&gt;
    &lt;p&gt;以下为 Ubuntu 20.04 终端下，go 1.14.4 运行该程序的输出&lt;br&gt;
输入过程：ENTER、a ENTER、A ENTER、abc ENTER、aBc ENTER、CTRL-D&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;		char-1          &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;a      
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;		char-2          &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;		char-3          &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;A      
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;		char-4          &lt;span class=&#34;m&#34;&gt;65&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;		char-5          &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;abc    
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;		char-6          &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;		char-7          &lt;span class=&#34;m&#34;&gt;98&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;		char-8          &lt;span class=&#34;m&#34;&gt;99&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;		char-9          &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;aBc    
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;		char-10         &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;		char-11         &lt;span class=&#34;m&#34;&gt;66&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;		char-12         &lt;span class=&#34;m&#34;&gt;99&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;		char-13         &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，不同平台下的终端对待 ENTER 的行为是一致的，但对待文件结束标记却不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 下输入 CTRL-Z，并不会有响应，必须等 ENTER 后，才进入判断和处理流程( EOF 跑 ENTER 前头去了？No。后文详述)&lt;/li&gt;
&lt;li&gt;Linux 下只要输入 CTRL-D，就会立刻进入处理流程( EOF 变成 ENTER 了？No。后文详述)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还没完，记得之前的例子，我们曾用某种输入方式让那个 PHP 程序在 Windows 下打印了我们输入的 CTRL-Z 的码值，那么对于这个 GO 程序，是否适用呢？很遗憾，GO 并不把 EOF 当作有效输入返回给用户程序，无论在哪个平台；可以通过取消上面代码中 io.EOF 判断块中的注释来验证这点。&lt;/p&gt;
&lt;p&gt;虽然无法让 GO 打印出我们通过终端输入的 EOF 的码值，但前面的方法(先输入一些内容，不回车直接给 EOF)的确改变了文件结尾标记的默认行为，下面解释其原理：&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/contents.html&#34;&gt;The Open Group Base Specifications Issue 7, 2018 edition&lt;/a&gt;(如果感觉这玩意儿名字陌生，他还有另一个名字：POSIX。虽然也可能像我一样，久闻其名，却不知其全貌，但起码比第一个名字脸熟多了)的&lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap11.html#tag_11&#34;&gt;11.1.9 Special Characters&lt;/a&gt;中，关于 EOF 的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EOF&lt;br&gt;
Special character on input, which is recognized if the ICANON flag is set. When received, all the bytes waiting to be read are immediately passed to the process without waiting for a &amp;lt;newline&amp;gt;, and the EOF is discarded. Thus, if there are no bytes waiting (that is, the EOF occurred at the beginning of a line), a byte count of zero shall be returned from the read(), representing an end-of-file indication. If ICANON is set, the EOF character shall be discarded when processed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们来试着翻译一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EOF&lt;br&gt;
输入中的特殊字符，在 ICANON 标志为真时被识别。当遇到这个字符时，所有等待被读取的字节将&lt;strong&gt;立刻&lt;/strong&gt;被传给处理程序而&lt;strong&gt;无需等待&lt;/strong&gt;一个&lt;strong&gt;新行符&lt;/strong&gt;，同时该 EOF 被&lt;strong&gt;丢弃&lt;/strong&gt;。然而，如果当前没有字节等待被处理(也即：EOF 出现在了一行的&lt;strong&gt;行首&lt;/strong&gt;)，一个 0 长度的字节计数将被 read() 返回，表现出一种 EOF 迹象。如果 ICANON 为真，EOF 字符在被处理后应该被丢弃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;EOF 就够晕的了，怎么又杀出个 ICANON flag？&lt;/p&gt;
&lt;p&gt;嗯，规范中也是都写清楚了的，是终端 I/O 工作模式相关的内容(欸~就不能只有一种键盘，一种鼠标，一种显示器，一种系统，一种接口么。。。)，EOF 在其中只是很小的一部分。可以看看国内这哥们儿的一篇文章：&lt;a href=&#34;https://www.cnblogs.com/nufangrensheng/p/3575752.html&#34;&gt;终端 I/O 之综述&lt;/a&gt;，弄清楚终端 I/O 的故事，有助于我们正向的理解终端处理用户输入的各种策略。&lt;/p&gt;
&lt;p&gt;最后一例：代码取自我翻译的一个老外的汇编教程，原址：https://asmtutor.com/&lt;/p&gt;
&lt;p&gt;高级语言看真相，总是隔着层纱，我们需要定性的结论&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Getting input)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-input.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-input.o -o helloworld-input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Please enter your name: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; message string asking user for input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;; message string to use after user has entered their name&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sinput:&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;resb&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;                                 &lt;span class=&#34;c1&#34;&gt;; reserve a 255 byte space in memory for the users input string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; number of bytes to read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nput&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; reserved space to store our input (known as a buffer)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; read from the STDIN file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nput&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our buffer into eax (Note: input contains a linefeed)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-input.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-input.o -o helloworld-input
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-input
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Please enter your name: Dylan
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Hello, Dylan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ENTER 后程序结束。嗯？EOF 呢？&lt;/p&gt;
&lt;p&gt;如果，你的阻塞读，只需要处理一次(在 &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/007908775/xbd/termios.html#tag_008_001_006&#34;&gt;Canonical mode input processing&lt;/a&gt; 里就是一行)输入，那么 ENTER 就够用了，用不着 EOF。ENTER 的作用只是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这一行输入已完成(结束)，读函数别阻塞了，排空缓冲区，立刻返回。还想再读？从新发 sys_read！(嘿，老铁，你的煎饼熟了，拿走吧，钱货两清。要加个蛋？那您从新下单)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，如果你需要不停的处理用户输入，则要将阻塞读扔进循环，通常是满足某种条件就 break 的死循环(一如：Server 端的 ACCEPT 所属的循环)。而这时，ENTER 还是那个 ENTER，该起什么作用还起什么作用，但他不能用来退出这个循环，那咱们选个谁来退出这个循环？&lt;/p&gt;
&lt;p&gt;啊～ EOF，掀起你的盖头来(你说啥？杀进程、重启机器、拔插销……噫，夫子乱人之性也！)&lt;/p&gt;
&lt;p&gt;哦噫，那人，你一开始说 C 的实现很具有代表性，结果你仨例子没一个 C 的？(忘了我 多难过 多不能接受；忘了我 只要你好过 就足够；忘了我 忘了我们的梦；当你想起我 我已不是我……)&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;我们多空出一些空间，给出比较重要的结论：&lt;/p&gt;
&lt;p&gt;EOF 对于在整个阻塞读过程中的系统、终端、用户程序来说，至关重要。因而关于 EOF 的众多描述，往往是系统、终端、程序和 EOF 放一堆儿全搓了。这容易产生系统和终端的 EOF 和某种语言定义的 EOF 是一回事的错觉。&lt;/p&gt;
&lt;p&gt;而实际上——操作系统并不关心也不必知道某种计算机语言所定义的 EOF 是什么样子；他只是和终端配合，识别出由某种组合键击标识的他俩所认识的 EOF。当满足条件时结束阻塞，终端和系统按自己的逻辑处理后将控制权返给某种语言的库函数，库函数此时有 100% 解释权，比如：出错就直接捏一个自己定义的 EOF 返回(也就是说，在库函数按自己的逻辑解释系统的返回之前，压根儿就没有语言自己定义的 EOF 什么事呢)。&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;至此，我们大概可以解释——&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EOF 做什么用的？没有行不行？&lt;/li&gt;
&lt;li&gt;EOF 是归语言的，还是归系统的？&lt;/li&gt;
&lt;li&gt;取名字可是个学问，老外管这个“用来解决前面那一堆文字阐述的事儿”的玩意儿叫：End-of-File。你觉得是否传神呢。&lt;/li&gt;
&lt;li&gt;计算机唯快不破的，怎么分清个头尾居然这么麻烦。&lt;/li&gt;
&lt;li&gt;为什么阻塞读所在的循环，在已经输入了一些内容到终端的情况下，要按两次 CTRL-D 才能退出。&lt;/li&gt;
&lt;li&gt;ENTER 不能替代 EOF，但 EOF 有时却起到了 ENTER 的效用。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;场外乱入一下，之后的内容大都与本文无关可略：写到这里的时候，不知怎么的，忽然忆起了一个关于32位操作系统和4G物理内存的故事，有兴趣可以递归浏览一把，这哥们写的挺好，让我不必再为这个话题在脑子里反转剧情了：&lt;a href=&#34;https://www.zhihu.com/question/22594254&#34;&gt;为何微软不在新的操作系统中让 32 位支持大于 4GB 的内存？&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;section-nan&#34;&gt;section-NaN&lt;/h2&gt;
&lt;h3 id=&#34;多余的话&#34;&gt;多余的话&lt;/h3&gt;
&lt;p&gt;今天，我们使用计算机也好，学习计算机相关的知识技术也罢，都已经是在面对一个封装到几乎无可在封、间接到几乎无缝可插、象与质天差地别、与其诞生伊始相去甚远的集大成的存在了。用起来固然比旧时要愉悦(比如：输入方式一再的简化)，但乱花渐欲迷人眼，对于追溯着学习这门学科并试图窥其全貌的人就不那么友好了……时常是，原本好奇心给足了动力的，就是向回捣着捣着就困了。端的是不如从一开始就看着计算机经过飞速成长，激烈蜕变，无奈取舍等等过程而演化成今天的样子来的自然。(好在，据那些玩过大型机的人自己说，还是微机省电~)&lt;/p&gt;
&lt;p&gt;各行有各行的业障，各界有各界的风景。在 CS 世界里——&lt;/p&gt;
&lt;p&gt;我们有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图灵的杯具&lt;/li&gt;
&lt;li&gt;二极管诞生的趣闻&lt;/li&gt;
&lt;li&gt;快摩尔不下去的定律&lt;/li&gt;
&lt;li&gt;因为 Intel 曾把地址总线和数据总线做的不一边宽而造成的内存管理的违和，以及为了兼容之而不得不背到今后的内存分段包袱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人月神话中绕不过的怪圈&lt;/li&gt;
&lt;li&gt;被日本的毒舌程序员喷的体无完肤、他自己却耍的飞起的 C 指针声明&lt;/li&gt;
&lt;li&gt;IBM 发现应该摁住微软但已经来不及时的故事，被微软和谷歌换位上演&lt;/li&gt;
&lt;li&gt;Sping 望着 EJB 远去的背影，独自呢喃——我终于变成了自己当年所讨厌的样子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;曾记否：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今日大红大紫的 iOS 因为 jobs 和 linus 两人的&amp;quot;矜持&amp;quot;而没能跑在 Linux 上的&amp;quot;佳话&amp;quot;&lt;/li&gt;
&lt;li&gt;感谢 BitMover 公司，我们能用上 linus 用快的难以望其项背的速度开发的免费开源的 GIT；哦对，别忘记听一听关于 GIT 用 C 却没用 C++ 编写而引起的论战，其规模和影响力丝毫不亚于宏内核与微内核之辩&lt;/li&gt;
&lt;li&gt;我至今记忆犹新的一个笑话——【1987 - Larry Wall 在电脑前打了个盹，脑门子压到了键盘上。醒来之后，Larry Wall 深信 ，在他的显示器上出现的神秘字符串并非是随机的，那是某种编程语言之程序样例的神谕。那必是上帝要他的先知——Larry Wall，去设计的。Perl 语言就此诞生了。】容我先笑一阵&lt;/li&gt;
&lt;li&gt;高德纳老爷子说，读不懂《计算机程序设计艺术》就不要学习编程，给我造成的是不是入错行的疑问，好伤心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不可略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自互联网普及以来，现实中的种种在虚拟中的微妙映射&lt;/li&gt;
&lt;li&gt;尚未从“心，脑，计算机”的灵魂拷问中醒过神来的人们，面对人工智能时的不知所措与欲罢不能&lt;/li&gt;
&lt;li&gt;似乎这个领域生来就是未走先跑，因而其衍生与附属也就难免其俗&lt;/li&gt;
&lt;li&gt;太多了，太多了……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;别忘了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序员们可以为争论哪种语言天下第一而错过人生中许多更重要的事情，比如休息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有还有，梦中的橄榄树，橄榄树……&lt;/p&gt;


&lt;p style=&#34;text-align:right&#34;&gt;——2020年08月01日，北京丰台&lt;/p&gt;


&lt;hr&gt;
&lt;p&gt;本文采用 &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;知识共享署名许可协议（CC-BY 4.0）&lt;/a&gt;进行许可，转载注明来源即可。如有错误劳烦评论或邮件指出。&lt;img src=&#34;/images/site/CC-BY_icon.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;

        
      </description>
    </item>
    
    <item>
      <title>Learn Assembly Language 汇编语言学习(拙译)</title>
      <link>/post/trans/learn-assembly-language/</link>
      <pubDate>Sat, 01 Aug 2020 16:29:01 +0800</pubDate>
      
      <guid>/post/trans/learn-assembly-language/</guid>
      <description>
        
          &lt;h2 id=&#34;index-0&#34;&gt;Index-0&lt;/h2&gt;
&lt;p&gt;原址：https://asmtutor.com/&lt;br&gt;
环境：nasm on x64 linux&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动机：程序员——多掌握几门计算机语言，还是有好处的&lt;/li&gt;
&lt;li&gt;主题：汇编语言——有其不可替代的作用&lt;/li&gt;
&lt;li&gt;呈示：天下语言逾千——汇编笑看沉舟侧畔&lt;/li&gt;
&lt;li&gt;展开：欲知程序真相——反编译难，反汇编易&lt;/li&gt;
&lt;li&gt;再现：大道器也不器——初见时如茶味甘苦，洞悉后若灌顶醍醐；原以为听多说多皆已昨，忽回首似曾相识又如陌；罢，风流不在谈峰健，相对无言味更长……&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原文作者自己说 『&lt;em&gt;This project was put together to teach myself NASM assembly language on linux.&lt;/em&gt;』&lt;/p&gt;
&lt;p&gt;欸~，原来是很窄众的哦。&lt;/p&gt;
&lt;p&gt;写的虽然通俗，但依然能感到其面向的并不是毫无编程基础的人群，所谓“某子不能隐真恶”，无论怎样努力的将大量概念、原理、知识安排到看似聊天般的文字中，这里都要提醒读者注意，提防因为好奇心而陷入递归学习的泥潭……&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lesson-1-hello-world&#34;&gt;Lesson 1 Hello, world!&lt;/h2&gt;
&lt;h3 id=&#34;背景知识&#34;&gt;背景知识&lt;/h3&gt;
&lt;p&gt;汇编语言是一种&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BD%8E%E7%BA%A7%E8%AF%AD%E8%A8%80&#34;&gt;低级语言&lt;/a&gt;，汇编程序员与底层硬件之间唯一的接口只有&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8&#34;&gt;内核&lt;/a&gt;本身。用汇编语言编程，涉及到 Linux 内核提供的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&#34;&gt;系统调用&lt;/a&gt;机制。这些系统调用是操作系统内置的库函数，提供诸如读取键盘输入以及将输出显示到屏幕之类的功能。&lt;/p&gt;
&lt;p&gt;当用户程序发起系统调用时，内核将立即&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8C%82%E8%B5%B7&#34;&gt;挂起&lt;/a&gt;该程序，进而通过驱动程序让相关硬件完成用户程序所发起的任务请求，最后，将控制权交还给用户程序。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;驱动程序的驱动二字，形象的描述了内核对硬件的控制&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;在汇编语言中发起系统调用，需要向&lt;code&gt;EAX&lt;/code&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%84%E5%AD%98%E5%99%A8&#34;&gt;寄存器&lt;/a&gt;写入相应调用的函数编号(也即：操作码&lt;code&gt;OPCODE&lt;/code&gt;)，同时设置其他几个寄存器的值作为实际参数，一切准备停当后，指令&lt;code&gt;INT&lt;/code&gt;发送一个软&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%B7&#34;&gt;中断&lt;/a&gt;，内核收到中断请求后接受参数并执行相应的库函数。简单直接。&lt;/p&gt;
&lt;h3 id=&#34;来写我们的第壹个汇编程序吧美玉有瑕&#34;&gt;来写我们的第壹个汇编程序吧——美玉有瑕&lt;/h3&gt;
&lt;p&gt;还是从著名的例子——$$Hello, world! $$ 开始，我们的汇编程序将把这个让无数程序员产生&lt;code&gt;我已经学会这种语言了&lt;/code&gt;的错觉的字符串打印到&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E4%B8%B2%E6%B5%81#%E6%A8%99%E6%BA%96%E8%BC%B8%E5%87%BA_(stdout)&#34;&gt;标准输出&lt;/a&gt;上。&lt;/p&gt;
&lt;p&gt;首先，在数据段定义一个&lt;code&gt;msg&lt;/code&gt;变量，并赋给其一个字符串类型的值作为程序的输出。而在代码段中，通过编写全局标签&lt;code&gt;_start:&lt;/code&gt;，告诉内核我们(写的诗)程序开始的地方(没有远方)&lt;/p&gt;
&lt;p&gt;实际参数通过以下寄存器传给内核：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EDX&lt;/code&gt;存储字符串的长度(字节数)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ECX&lt;/code&gt;存储字符串的首地址(定义在数据段中的&lt;code&gt;msg&lt;/code&gt;变量加载到内存后所在的位置)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;存储字符串写操作的目标文件——本例中是&lt;code&gt;STDOUT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据类型和实际参数的含义可以在函数定义中查到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# https:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//github.com/torvalds/linux/blob/master/include/linux/syscalls.h
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asmlinkage&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sys_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，编译、链接、运行程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program - asmtutor.com&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld.o -o helloworld&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; assign msg variable with your message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; number of bytes to write - one for each letter plus 0Ah (line feed character)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; move the memory address of our message string into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; write to the STDOUT file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld.o -o helloworld
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello World!
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Segmentation fault
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices warning&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;错误&lt;/div&gt;
    &lt;p&gt;系统报告了错误——Segmentation fault&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-2-程序退出的正确姿势&#34;&gt;Lesson 2 程序退出的正确姿势&lt;/h2&gt;
&lt;h3 id=&#34;若干背景知识&#34;&gt;若干背景知识&lt;/h3&gt;
&lt;p&gt;让我们从第一课成功发起系统调用的短暂喜悦中回过神来，学习内核中另一个最重要的系统调用&lt;code&gt;sys_exit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还记得，上一课中，程序运行并打印了 $$Hello, world!$$ 字符串后，还看到了一句&lt;code&gt;Segmentation fault&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;嘛，计算机程序可看作是装载到内存中且被分割成若干节(或段)的一长条的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4&#34;&gt;指令&lt;/a&gt;序列，这个通用的内存池实际上被所有程序共享，保存着变量、指令，其他程序等等……每一个段都有一个地址，以便其中存储的二进制信息之后的定位访问。&lt;/p&gt;
&lt;p&gt;要执行加载到内存中的程序，我们使用全局标签&lt;code&gt;_start:&lt;/code&gt;来告诉操作系统从哪里找到并开始执行我们的程序。从那个位置开始，内存将依据程序的逻辑所决定的下一个地址被依次访问。内核在这些地址上愉悦的跳来跳去，执行着程序。&lt;/p&gt;
&lt;p&gt;与告诉内核&lt;strong&gt;一个程序从哪里开始&lt;/strong&gt;同样重要的是：&lt;strong&gt;程序在哪里结束&lt;/strong&gt;。这正是上一课中的程序所缺少的步骤。因为这个重要步骤的缺失，在调用完&lt;code&gt;sys_write&lt;/code&gt;，内核把控制权交还给我们的程序之后，程序继续顺序执行内存中紧挨在&lt;code&gt;int     80h&lt;/code&gt;之后的地址中的&amp;quot;指令&amp;quot;(天知道那一刻那里存的是啥)，我们不知道内核将执行什么指令，但显然在这个例子中内核噎住了，并且不高兴(非正常)的终止了进程，严肃的招待了我们一个：&lt;code&gt;Segmentation fault&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在程序的末尾调用&lt;code&gt;sys_exit&lt;/code&gt;吧！&lt;/p&gt;
&lt;h3 id=&#34;开写我们的第贰个汇编程序善始善终&#34;&gt;开写我们的第贰个汇编程序——善始善终&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sys_exit&lt;/code&gt;的定义简单明了。在&lt;a href=&#34;http://faculty.nps.edu/cseagle/assembly/sys_call.html&#34;&gt;Linux 系统调用表&lt;/a&gt;中，操作码&lt;code&gt;OPCODE 1&lt;/code&gt;被分配给了她，同时她比&lt;code&gt;sys_write&lt;/code&gt;节省一些，调用她只需要传一个参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# https:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//github.com/torvalds/linux/blob/master/include/linux/syscalls.h
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asmlinkage&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sys_exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error_code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;她要被要这样调：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;里存&lt;code&gt;0&lt;/code&gt;意为&lt;code&gt;零个错误&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EAX&lt;/code&gt;当然就存&lt;code&gt;1&lt;/code&gt;了 (sys_exit 的 OPCODE)&lt;/li&gt;
&lt;li&gt;然后，软中断&lt;code&gt;INT 80h&lt;/code&gt;和上一个例子一样&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program - asmtutor.com&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld.o -o helloworld&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; return 0 status on exit - &amp;#39;No Errors&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; invoke SYS_EXIT (kernel opcode 1)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld.o -o helloworld
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$$We\ will\ meet\ again,\ Segmentation\ fault$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lesson-3-计算字符串长度&#34;&gt;Lesson 3 计算字符串长度&lt;/h2&gt;
&lt;h3 id=&#34;又一些背景知识&#34;&gt;又一些背景知识&lt;/h3&gt;
&lt;p&gt;为什么需要计算字符串的长度？&lt;/p&gt;
&lt;p&gt;嘛，&lt;code&gt;sys_write&lt;/code&gt;必须知道我们传给她的字符串的指针和长度(字节数)，才能够打印输出。如果修改了&lt;code&gt;msg&lt;/code&gt;字符串的内容，也必须相应的更新字符串的长度，否则打印操作将不正确。&lt;/p&gt;
&lt;p&gt;为了验证这一点，我们用第二课中的例子。将&lt;code&gt;msg&lt;/code&gt;字符串修改为：(中括号帮助标识边界用)
$$[Hello,\ brave\ new\ world!]$$
编译、链接、执行修改后的程序。输出变为：
$$[Hello,\ brave\ ]$$
(仅有前 13 个 ascii 字符，空格也算)，这是因为我们没有将长度实参的值从原来的 13，更新为新字符串长度 23&lt;/p&gt;
&lt;h3 id=&#34;我们的第叁个汇编程序登场魔尺道丈&#34;&gt;我们的第叁个汇编程序登场——魔尺道丈&lt;/h3&gt;
&lt;p&gt;要计算某个字符串的长度，这里引入一种称作&lt;a href=&#34;https://www.tutorialspoint.com/cprogramming/c_pointer_arithmetic.htm&#34;&gt;指针算数&lt;/a&gt;的技术。具体步骤为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选两个寄存器初始化为相同的内存地址&lt;/li&gt;
&lt;li&gt;用其中一个寄存器(本例中使用&lt;code&gt;EAX&lt;/code&gt;)遍历要输出的字符串中的字符，在每次遇到 1 个字符的时候给自己加 1，直到其遇到一个代表字符串结尾的特殊字符&lt;/li&gt;
&lt;li&gt;此时用&lt;code&gt;EAX&lt;/code&gt;减去一开始初始化为相同值的另一个寄存器的值，结果就是字符的个数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有点像两个数组做减法，差表示了两个地址之间的元素的个数。我们用这个差值替代旧例子中的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%AB%E6%AD%BB&#34;&gt;硬编码&lt;/a&gt;值，传递给&lt;code&gt;sys_write&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;汇编程序中，通常用&lt;code&gt;CMP&lt;/code&gt;指令进行某种判断，根据其两个操作数的比较结果来置位标志寄存器，后续指令根据标志寄存器的值来决定如何推进程序的流程。&lt;/p&gt;
&lt;p&gt;在接下来的代码中，我们关注的是&lt;code&gt;ZF (Zero Flag)&lt;/code&gt;标志寄存器。如果&lt;code&gt;EAX&lt;/code&gt;寄存器中的地址所指向的字符 ascii 值等于 0，则&lt;code&gt;ZF&lt;/code&gt;被置位。而后&lt;code&gt;JZ&lt;/code&gt;指令看到&lt;code&gt;ZF&lt;/code&gt;为 1，就跳转到其操作数所指明的位置(流程改变)，这个跳转为的是退出 nextchar 循环从而执行后续的程序代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Calculating string length)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-len.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-len.o -o helloworld-len&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-len&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; we can modify this now without having to update anywhere else in the program&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address of our message string into EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address in EBX into EAX as well (Both now point to the same segment in memory)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; compare the byte pointed to by EAX at this address against zero (Zero is an end of string delimiter)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; jump (if the zero flagged has been set) to the point in the code labeled &amp;#39;finished&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; increment the address in EAX by one byte (if the zero flagged has NOT been set)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; jump to the point in the code labeled &amp;#39;nextchar&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; subtract the address in EBX from the address in EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;                            &lt;span class=&#34;c1&#34;&gt;; remember both registers started pointing to the same address (see line 15)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;                            &lt;span class=&#34;c1&#34;&gt;; but EAX has been incremented one byte for each character in the message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;                            &lt;span class=&#34;c1&#34;&gt;; when you subtract one memory address from another of the same type&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;                            &lt;span class=&#34;c1&#34;&gt;; the result is number of segments between them - in this case the number of bytes&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; EAX now equals the number of bytes in our string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; the rest of the code should be familiar now&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-len.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-len.o -o helloworld-len
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-len
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-4-子例程&#34;&gt;Lesson 4 子例程&lt;/h2&gt;
&lt;h3 id=&#34;引入子例程&#34;&gt;引入子例程&lt;/h3&gt;
&lt;p&gt;子例程——函数也。他们是可复用的代码片段，能够被用户程序调用完成各种各样的任务。和前面定义程序入口点一样，子例程也通过定义标签来声明其起始位置(如&lt;code&gt;strlen:&lt;/code&gt;)，然而不同之处在于程序不使用&lt;code&gt;JMP&lt;/code&gt;指令来访问子例程，取而代之的是使用&lt;code&gt;CALL&lt;/code&gt;指令。同样，子例程执行完成后的跳转回地址也不使用&lt;code&gt;JMP&lt;/code&gt;而是使用&lt;code&gt;RET&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同样是跳转到指令的所在处(memory address)，为什么子例程不使用&lt;code&gt;JMP&lt;/code&gt;呢？&lt;/p&gt;
&lt;p&gt;子例程的威力在于其可复用性，想在程序中的任意位置随时调用子例程，除了要跳转到子例程所在的地址外，还必须要编写一些逻辑来确定子例程运行完后跳转回的位置，如果使用&lt;code&gt;JMP&lt;/code&gt;将导致我们的代码中到处是非必要的标签。而使用&lt;code&gt;CALL&lt;/code&gt;和&lt;code&gt;RET&lt;/code&gt;，汇编语言将采用称作&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88&#34;&gt;堆栈&lt;/a&gt;的机制代为处理这些细节。&lt;/p&gt;
&lt;h3 id=&#34;引入栈&#34;&gt;引入栈&lt;/h3&gt;
&lt;p&gt;栈也在内存中，然而某个程序的栈内存对其而言具备一些特殊性质。栈内存的存取遵循&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%88%E9%80%B2%E5%85%88%E5%87%BA%E5%92%8C%E5%BE%8C%E9%80%B2%E5%85%88%E5%87%BA%E6%9C%83%E8%A8%88%E6%B3%95&#34;&gt;后进先出&lt;/a&gt; Last In First Out memory (LIFO)原则。可以将其想象成厨房中的一摞碟子，最后一个放在顶上的碟子也正是下一次用碟子时第一个被取走的。&lt;/p&gt;
&lt;p&gt;诚然，汇编中的栈内存放不下碟子，但是能放二进制数据。变量、地址、甚至其他程序都可以放进去。当调用子例程时，我们需要使用栈来临时存放上述数据以便子例程使用。&lt;/p&gt;
&lt;p&gt;通常，执行中的一段代码所使用着的任何寄存器，都应该在调用子例程之前，使用&lt;code&gt;PUSH&lt;/code&gt;指令将其中的数据压入栈，以此确保子例程返回后可以还原这些寄存器的原有值(因为子例程有可能会使用上述寄存器存储新的数据，不预先保存的话被覆盖后就丢失了)，还原通过与&lt;code&gt;PUSH&lt;/code&gt;指令执行顺序相反的顺序执行&lt;code&gt;POP&lt;/code&gt;指令来完成。如此，就不必担心子例程执行过程中对上述寄存的修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CALL&lt;/code&gt;和&lt;code&gt;RET&lt;/code&gt;两个指令与&lt;code&gt;PUSH&lt;/code&gt;和&lt;code&gt;POP&lt;/code&gt;相似，也使用到了堆栈，但他们除了压栈/弹栈外还做了额外的工作，当&lt;code&gt;CALL&lt;/code&gt;一个子例程时，&lt;code&gt;CALL&lt;/code&gt;指令所在位置的下一个内存地址(return address)被压入栈，同时子例程所在地址被存入&lt;code&gt;EIP&lt;/code&gt;。这个存在栈内存中的地址(return address)将由在子例程中的&lt;code&gt;RET&lt;/code&gt;指令弹给&lt;code&gt;EIP&lt;/code&gt;从而跳转回调用者的代码继续执行。希望这段描述能够些许的消除【内联标签使用&lt;code&gt;JMP&lt;/code&gt;，而子例程(函数)调用使用&lt;code&gt;CALL&lt;/code&gt;】的疑惑。&lt;/p&gt;
&lt;h3 id=&#34;我们的第肆个汇编程序管中窥豹&#34;&gt;我们的第肆个汇编程序——管中窥豹&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Subroutines)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-len.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-len.o -o helloworld-len&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-len&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address of our message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;strlen&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our function to calculate the length of the string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; our function leaves the result in EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; this is all the same as before&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;strlen:&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;; this is our first function declaration&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push the value in EBX onto the stack to preserve it while we use EBX in this function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address in EAX into EBX (Both point to the same segment in memory)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;; this is the same as lesson3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; pop the value on the stack back into EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;; return to where the function was called&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-len.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-len.o -o helloworld-len
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-len
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-5-外部包含文件&#34;&gt;Lesson 5 外部包含文件&lt;/h2&gt;
&lt;p&gt;外部包含文件使得我们能够将程序的代码分散不同文件中。对于撰写清晰、易维护的程序来说这个技术很有用。可重用代码能够写成子例程保存在分散的文件中，这类文件被称为库。当你想使用库中的某段代码时，包含该库文件到你的程序，就好像该文件的内容是就是你程序的一部分一样。&lt;/p&gt;
&lt;p&gt;本节我们把计算字符串长度的子例程移到外部文件中。同时，将字符串打印和程序退出逻辑也都修缮为子例程一并移到外部文件里。如此，瘦身后的程序看起来更加清晰、易读。&lt;/p&gt;
&lt;p&gt;这里多声明一条消息，调用两次字符串打印子例程来演示对代码的复用。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;之后的课程中，除非 functions.asm 发生了改变，否则其代码将被省略&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第伍个汇编程序他山之石&#34;&gt;我们的第伍个汇编程序——他山之石&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; functions.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; int slen(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String length calculation function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;slen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprint(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprint:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;slen&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void exit()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Exit program and restore resources&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;quit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (External file include)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-inc.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-inc.o -o helloworld-inc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-inc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;                             &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; include our external file
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; our first message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is how we recycle in NASM.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; our second message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of our first message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of our second message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-inc.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-inc.o -o helloworld-inc
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-inc
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is how we recycle in NASM.
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices warning&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;错误&lt;/div&gt;
    &lt;p&gt;貌似第二条消息被打印了两次，我们在下节课修正:-)&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-6-null-终止符&#34;&gt;Lesson 6 NULL 终止符&lt;/h2&gt;
&lt;p&gt;好吧，上一节的结尾我用“貌似”二字修饰了&lt;code&gt;msg2&lt;/code&gt;被打印了两次这一现象，实际上程序并没有逻辑错误，她忠实的履行了职责，完成了我们的任务委托，也即：上一节的代码写法，输出就应该是那样子的。解释现象之前，先分别注释掉打印&lt;code&gt;msg1&lt;/code&gt;或&lt;code&gt;msg2&lt;/code&gt;的代码，只留其中一个看看效果&lt;/p&gt;
&lt;p&gt;如果，只注释&lt;code&gt;msg1&lt;/code&gt;的打印指令，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   mov     eax, msg1       ; move the address of our first message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   call    sprint          ; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;    
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of our second message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出和我们预期的相符。&lt;/p&gt;
&lt;p&gt;如果，只注释&lt;code&gt;msg2&lt;/code&gt;的打印指令，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of our first message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;    
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   mov     eax, msg2       ; move the address of our second message string into EAX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;   call    sprint          ; call our string printing function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;Hello, brave new world!
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等一下，打印&lt;code&gt;msg1&lt;/code&gt;的指令，怎么把第二个字符串也打印了？&lt;/p&gt;
&lt;p&gt;答案在于，对于&lt;code&gt;msg1&lt;/code&gt;字符串，我们没有给出明确的结尾。在数据段中的两条相邻的&lt;code&gt;db&lt;/code&gt;代码，内存的分配也是相邻的，因此，&lt;code&gt;msg1&lt;/code&gt;字符串的最后一个字节紧挨着&lt;code&gt;msg2&lt;/code&gt;的第一个字节。记得之前，计算字符串长度所采用的方法——通过比较值为 0 的字节作为结尾！Lesson 5 的代码在运行到计算&lt;code&gt;msg1&lt;/code&gt;的长度时，子例程读完了所有&lt;code&gt;msg1&lt;/code&gt;的字节后，并没有遇到值为 0 的字节，所以她认为这个字符串还没完，程序继续从&lt;code&gt;msg2&lt;/code&gt;的第一个字节逐个比较，直到&lt;code&gt;msg2&lt;/code&gt;的所有字节也读完了，才找到字符串结尾。&lt;/p&gt;
&lt;p&gt;因此看上去&lt;code&gt;msg2&lt;/code&gt;被打印两次，实际上是视觉上的问题，实际的输出过程是：&lt;/p&gt;
&lt;p&gt;先输出了&lt;code&gt;Hello, brave new world!\nThis is how we recycle in NASM.\n&lt;/code&gt;
又输出了&lt;code&gt;This is how we recycle in NASM.\n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再等一下，你或许会问，&lt;code&gt;msg2&lt;/code&gt;我也没看到有字符串结尾啊？被你逮到了:-)这是因为数据段的内存在开辟时，都被初始化成了 0h。&lt;/p&gt;
&lt;h3 id=&#34;我们的第陆个汇编程序楚河汉界&#34;&gt;我们的第陆个汇编程序——楚河汉界&lt;/h3&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;汇编程序中，用 0h 表示 NULL 字节，而 NULL 字节标识了字符串的结尾&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (NULL terminating bytes)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-inc.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-inc.o -o helloworld-inc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-inc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; NOTE the null terminating byte&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is how we recycle in NASM.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; NOTE the null terminating byte&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-inc.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-inc.o -o helloworld-inc
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-inc
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-7-换行&#34;&gt;Lesson 7 换行&lt;/h2&gt;
&lt;p&gt;换行的重要性对于控制台程序而言是不言而喻的，尤其是构建需要用户输入的程序时，更是如此。但是换行又是难以摆弄的，处理字符串时有时需要包含换行，有时又需要去掉他。如果始终把表示换行符的 ascii 码 0Ah 硬编码在我们的变量中，就要面对一个问题——在不需要输出换行符的地方得写额外的代码来去掉他。&lt;/p&gt;
&lt;p&gt;如果有个专门的子例程输出我们指定的字符串，由该子例程负责在结尾打印一个换行符。就可以在需要打印换行符的地方调用这个子例程，而在不需要打印换行符的地方还使用我们的&lt;code&gt;sprint&lt;/code&gt;子例程就可以了。&lt;/p&gt;
&lt;p&gt;记得前文中，想调用&lt;code&gt;sys_write&lt;/code&gt;必须提供要打印内容的地址及其长度，所以仅仅传递换行符是不够的，同时我们也不想仅仅为了这一个字符单独定义一个变量来保存他，因此使用栈内存来实现新的子例程。&lt;/p&gt;
&lt;p&gt;招法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;换行符存进&lt;code&gt;EAX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUSH EAX&lt;/code&gt;的值到栈上，并获取&lt;code&gt;ESP&lt;/code&gt;的值(当前栈顶所在的地址)&lt;/li&gt;
&lt;li&gt;通过当前的&lt;code&gt;ESP&lt;/code&gt;知道了换行符所在内存地址，那么调用&lt;code&gt;sys_write&lt;/code&gt;的必要条件已然具备&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;且看我们的第柒个汇编程序路转峰回&#34;&gt;且看我们的第柒个汇编程序——路转峰回&lt;/h3&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;观察 functions.asm 中的 sprintLF 子例程&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; int slen(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String length calculation function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;slen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprint(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprint:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;slen&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprintLF(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing with line feed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprintLF:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; push eax onto the stack to preserve it while we use the eax register in this function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; move 0Ah into eax - 0Ah is the ascii character for a linefeed&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; push the linefeed onto the stack so we can get the address&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; move the address of the current stack pointer into eax for sprint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; call our sprint function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; remove our linefeed character from the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; restore the original value of eax before our function was called&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; return to our program&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void exit()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Exit program and restore resources&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;quit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;65&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Print with line feed)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-lf.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-lf.o -o helloworld-lf&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-lf&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, brave new world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; NOTE we have removed the line feed character 0Ah&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is how we recycle in NASM.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; NOTE we have removed the line feed character 0Ah&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; NOTE we are calling our new print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; NOTE we are calling our new print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-lf.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-lf.o -o helloworld-lf
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-lf
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello, brave new world!
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is how we recycle in NASM.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-8-命令行参数&#34;&gt;Lesson 8 命令行参数&lt;/h2&gt;
&lt;p&gt;在 NASM 中，接收命令行参数也使用堆栈。程序启动时，所有参数被反序的压入堆栈，然后程序名被压入栈，最后是参数的个数被压入栈。对于 NASM 编写的程序，最顶上的两个栈内存单元总是保存着程序名和参数个数。&lt;/p&gt;
&lt;p&gt;要处理这些参数，我们所要做的就是执行若干次&lt;code&gt;POP&lt;/code&gt;逐个弹出参数信息，然后迭代每一个参数并运行我们的程序逻辑。在本例中，简单的调用&lt;code&gt;sprintLF&lt;/code&gt;函数打印输出。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;我们使用&lt;code&gt;ECX&lt;/code&gt;寄存器作为循环计数器。这个通用寄存器最初的设计意图就是计数。&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第捌个汇编程序兵来将挡&#34;&gt;我们的第捌个汇编程序——兵来将挡&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Passing arguments from the command line)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-args.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-args.o -o helloworld-args&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-args&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; first value on the stack is the number of arguments&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextArg:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; check to see if we have any arguments left&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;noMoreArgs&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; if zero flag is set jump to noMoreArgs label (jumping over the end of the loop)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; pop the next argument off the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; decrease ecx (number of arguments left) by 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextArg&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; jump to nextArg label&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;noMoreArgs:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-args.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-lf.o -o helloworld-args
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-args &lt;span class=&#34;s2&#34;&gt;&amp;#34;This is one argument&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;This is another&amp;#34;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;101&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;./helloworld-args
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is one argument
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;This is another
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;101&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-9-处理用户输出&#34;&gt;Lesson 9 处理用户输出&lt;/h2&gt;
&lt;h3 id=&#34;引入-bss-段&#34;&gt;引入 bss 段&lt;/h3&gt;
&lt;p&gt;目前为止，我们用到了代码段&lt;code&gt;.text&lt;/code&gt;和数据段&lt;code&gt;.data&lt;/code&gt;。接下来引入&lt;code&gt;.bss&lt;/code&gt;段——全称 BLOCK Started by Symbol。这块内存用来保存程序中的未初始化变量。这些预留的空间通常用来存储用户输入的数据，这类数据的特点在于无法在编程时知道其具体的大小。&lt;/p&gt;
&lt;p&gt;变量声明语法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName1:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;RESB&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 byte&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName2:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;RESW&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 word&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName3:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;RESD&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 double word&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName4:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;RESQ&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 double precision float (quad word)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;variableName5:&lt;/span&gt;      &lt;span class=&#34;kd&#34;&gt;REST&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; reserve space for 1 extended precision float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是时候引入另一个重要的系统调用&lt;code&gt;sys_read&lt;/code&gt;了，让用户输入来的更猛烈些吧。在 Linux 系统调用表中，此函数的&lt;code&gt;OPCODE 3&lt;/code&gt;。和&lt;code&gt;sys_write&lt;/code&gt;一样也接收 3 个参数，详情如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EDX&lt;/code&gt;载入读取的最大长度(以字节为单位)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ECX&lt;/code&gt;载入&lt;code&gt;.bss&lt;/code&gt;中创建的变量的地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;载入要读取的文件描述符(在本例中为STDIN)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样，函数参数的数据类型和含义可在行数定义中找到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;# https:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//github.com/torvalds/linux/blob/master/include/linux/syscalls.h
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;asmlinkage&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sys_read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;sys_read&lt;/code&gt;的行为：一旦读到一个&lt;code&gt;LF&lt;/code&gt;，就返回到调用者程序，此时他至今为止读到的内容被存放在&lt;code&gt;ECX&lt;/code&gt;中保存的地址所指向的内存中。&lt;/p&gt;
&lt;p&gt;延伸阅读——&lt;a href=&#34;/post/original/cs/io/eof/&#34;&gt;EOF，到底怎么回事&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;这是我们的第玖个汇编程序不预则废&#34;&gt;这是我们的第玖个汇编程序——不预则废&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Getting input)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-input.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-input.o -o helloworld-input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Please enter your name: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; message string asking user for input&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;; message string to use after user has entered their name&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sinput:&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;resb&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;                                 &lt;span class=&#34;c1&#34;&gt;; reserve a 255 byte space in memory for the users input string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; number of bytes to read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nput&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; reserved space to store our input (known as a buffer)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; read from the STDIN file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nput&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our buffer into eax (Note: input contains a linefeed)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf helloworld-input.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 helloworld-input.o -o helloworld-input
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./helloworld-input
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Please enter your name: Daniel Givney
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Hello, Daniel Givney
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-10-数到十&#34;&gt;Lesson 10 数到十&lt;/h2&gt;
&lt;h3 id=&#34;又来了背景知识&#34;&gt;又来了，背景知识&lt;/h3&gt;
&lt;p&gt;与直觉上相反，在汇编语言中计数并不那么简单直接。首先，我们得传递一个地址给&lt;code&gt;sys_write&lt;/code&gt;，不能仅仅将数字加载到寄存器中并调用我们的&lt;code&gt;print&lt;/code&gt;函数。其次，数字和字符串在汇编里大不相同。字符串被描述为一系列的 ASCII 值。这里有一个关于 &lt;a href=&#34;http://www.asciitable.com/&#34;&gt;ASCII&lt;/a&gt; 的一个不错的站点(怎么打开净是广告。。。) ，这套编码被用来规范跨计算机的字符串表示的统一标准。&lt;/p&gt;
&lt;p&gt;Remember，&lt;code&gt;数&lt;/code&gt;是无法打印的——打印出来的都是&lt;code&gt;字符串&lt;/code&gt;。为了数到 10，需要从标准的整数到对应的 ASCII 字符串的转换。看过 ASCII 码表之后，可以注意到，整数 1 对应的 ASCII 值是 49。实际上，对于 0 到 9 这 10 个整数，加 48 就是其对应的 ASCII 码。&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾个汇编程序邯郸学步&#34;&gt;我们的第拾个汇编程序——邯郸学步&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Count to 10)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-10.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-10.o -o helloworld-10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; ecx is initalised to zero.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextNumber:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; increment ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address of our integer into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; add 48 to our number to convert from integer to ascii for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push eax to the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; get the address of the character on the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; clean up the stack so we don&amp;#39;t have unneeded bytes taking up space&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; have we reached 10 yet? compare our counter with decimal 10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextNumber&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; jump if not equal and keep counting&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ nasm -f elf helloworld-10.asm
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ ld -m elf_i386 helloworld-10.o -o helloworld-10
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;$ ./helloworld-10
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices warning&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;错误&lt;/div&gt;
    &lt;p&gt;哦噢：我们的数字 10 打印成了冒号(:)，咋了呢？&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-11-数到十-itoa&#34;&gt;Lesson 11 数到十 (itoa)&lt;/h2&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;是 itoa，不是 iota&lt;/p&gt;

  &lt;/div&gt;

&lt;p&gt;为什么 Lesson 10 的程序把 10 打印成了冒号(:)呢。嗯，让我们翻开 ASCII 表，能够看到冒号的 ASCII 值是 58 = 10 + 48，所以按上节的程序写法，就应该输出冒号并没有错。上节所说的 0 到 9 这 10 个整数，可以加 48 得到对应的 ASCII 值，然后传给&lt;code&gt;sys_write&lt;/code&gt;的输出对应的字符串；但是对于数字 10，他有两位，没有一个单独的 ASCII 来表示 10 的字符串形式。这个两位数需要两个 ASCII，一个表示 1，一个表示 0。因此，传给&lt;code&gt;sys_write&lt;/code&gt;一个&#39;4948&#39;才是数字 10 的正确字符串形式。10 直接加 48 不行，我们需要把数字的每一位除以 10 后逐个转换&lt;/p&gt;
&lt;p&gt;这里引入两个新的子例程，&lt;code&gt;iprint&lt;/code&gt;和&lt;code&gt;iprintLF&lt;/code&gt;。这些函数用来打印数字的字符串形式，数值本身使用&lt;code&gt;EAX&lt;/code&gt;装载，&lt;code&gt;ECX&lt;/code&gt;用来计数。然后重复除以 10 的过程，每次把余数加 48，结果值&lt;code&gt;PUSH&lt;/code&gt;到栈上以备后用。当除以 10 的商(存在&lt;code&gt;EAX&lt;/code&gt;里)为 0 时，将退出当前循环，进入另一个循环。在该循环里我们通过逐个&lt;code&gt;POP&lt;/code&gt;弹栈的方法，打印每一位数字的字符串形式。弹到什么时候为止呢？这正是我们在&lt;code&gt;ECX&lt;/code&gt;寄存器里存计数的目的，每弹一个值&lt;code&gt;ECX&lt;/code&gt;就减 1，直到减到 0。所有的这些都完成后，程序退出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;除法指令简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DIV&lt;/code&gt;和&lt;code&gt;IDIV&lt;/code&gt;指令将&lt;code&gt;EAX&lt;/code&gt;中的值做为被除数，除以指令的原操作数，商的部分存到&lt;code&gt;EAX&lt;/code&gt;(覆盖了原来的被除数)而余数部分存在&lt;code&gt;EDX&lt;/code&gt;中。(作者写的挺简单，实现上复杂的多：不同位数的策略；高位存什么、低位存什么；有符号、无符号的区别等等。)&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move 10 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move 10 into esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;idiv&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by esi (eax will equal 1 and edx will equal 0)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;idiv&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by esi again (eax will equal 0 and edx will equal 1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;只存余数，感觉会有问题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不会，因为这些都是整数。即便除数比被除数大，依然能够在余数中找到其原值，这是因为在这种情况下&lt;code&gt;EAX&lt;/code&gt;置 0，除法运算运行了 0 次，而被除数的原值作为余数被放到了&lt;code&gt;EDX&lt;/code&gt;中。真好~&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾壹个汇编程序知之非艰&#34;&gt;我们的第拾壹个汇编程序——知之非艰&lt;/h3&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;仅列出了新函数的注释&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;  1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void iprint(Integer number)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Integer printing function (itoa)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  4&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;iprint:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve eax on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  6&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve ecx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  7&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve edx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  8&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve esi on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; counter of how many bytes we need to print in the end&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;divideLoop:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 12&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; count each byte to print - number of characters&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; empty edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; mov 10 into esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;idiv&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; convert edx to it&amp;#39;s ascii representation - edx holds the remainder after a divide instruction&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push edx (string representation of an intger) onto the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; can the integer be divided anymore?&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jnz&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;di&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;videLoop&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; jump if not zero to the label divideLoop&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 21&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;printLoop:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; count down each byte that we put on the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; mov the stack pointer into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; remove last character from the stack to move esp forward&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; have we printed all bytes we pushed onto the stack?&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jnz&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;printLoop&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump is not zero to the label printLoop&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore esi from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore edx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore ecx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore eax from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 36&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 37&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void iprintLF(Integer number)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 38&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Integer printing function with linefeed (itoa)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 39&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;iprintLF:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our integer printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 41&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push eax onto the stack to preserve it while we use the eax register in this function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move 0Ah into eax - 0Ah is the ascii character for a linefeed&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push the linefeed onto the stack so we can get the address&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the address of the current stack pointer into eax for sprint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our sprint function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; remove our linefeed character from the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore the original value of eax before our function was called&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 50&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 52&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 53&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; int slen(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 54&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String length calculation function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 55&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;slen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 59&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextchar:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextchar&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 64&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 65&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 68&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 69&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 70&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 71&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 72&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprint(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 73&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 74&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprint:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 75&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 76&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 77&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 78&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 79&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;slen&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 80&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 81&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 82&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 83&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 84&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 85&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 86&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 87&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 88&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 89&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 90&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 91&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 92&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 93&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 94&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 95&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 96&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void sprintLF(String message)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 97&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; String printing with line feed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 98&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;sprintLF:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 99&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;100&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;101&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;102&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0AH&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;103&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;104&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;105&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;106&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;107&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;108&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;109&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;110&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;111&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;112&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; void exit()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;113&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Exit program and restore resources&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;114&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;quit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;115&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;116&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;117&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;118&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Hello World Program (Count to 10 itoa)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf helloworld-itoa.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 helloworld-itoa.o -o helloworld-itoa&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./helloworld-itoa&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextNumber:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; NOTE call our new integer printing function (itoa)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextNumber&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ nasm -f elf helloworld-itoa.asm
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ ld -m elf_i386 helloworld-itoa.o -o helloworld-itoa
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;$ ./helloworld-itoa
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-12-计算加法&#34;&gt;Lesson 12 计算——加法&lt;/h2&gt;
&lt;p&gt;这次的程序，将寄存器&lt;code&gt;EAX&lt;/code&gt;和&lt;code&gt;EBX&lt;/code&gt;中的值相加，和保存在&lt;code&gt;EAX&lt;/code&gt;中。首先&lt;code&gt;MOV&lt;/code&gt;其中一个加数到&lt;code&gt;EAX&lt;/code&gt;(本例中为 90)，然后&lt;code&gt;MOV&lt;/code&gt;另一个加数到&lt;code&gt;EBX&lt;/code&gt;(本例中为9)。我们需要调用&lt;code&gt;ADD&lt;/code&gt;指令来实现加法运算。&lt;code&gt;EBX&lt;/code&gt;和&lt;code&gt;EAX&lt;/code&gt;中的值将被加到一起，而结果和将被存回指令最左边的寄存器中(也就是本例的&lt;code&gt;EAX&lt;/code&gt;)。最后调用我们引以为傲的&lt;code&gt;数值-&amp;gt;字符串&lt;/code&gt;打印函数来完成程序。&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾贰个汇编程序聚沙成塔&#34;&gt;我们的第拾贰个汇编程序——聚沙成塔&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (Addition)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-addition.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-addition.o -o calculator-addition&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-addition&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our first number into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; move our second number into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; add ebx to eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; call our integer print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-addition.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-addition.o -o calculator-addition
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-addition
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-13-计算减法&#34;&gt;Lesson 13 计算——减法&lt;/h2&gt;
&lt;p&gt;这个程序与 Lesson 12 的唯一区别就是加法指令&lt;code&gt;ADD&lt;/code&gt;，换成了减法指令&lt;code&gt;SUB&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾叁个汇编程序红衰翠减&#34;&gt;我们的第拾叁个汇编程序——红衰翠减&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (Subtraction)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-subtraction.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-subtraction.o -o calculator-subtraction&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-subtraction&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our first number into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; move our second number into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; subtract ebx from eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; call our integer print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-subtraction.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-subtraction.o -o calculator-subtraction
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-subtraction
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;81&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-14-计算乘法&#34;&gt;Lesson 14 计算——乘法&lt;/h2&gt;
&lt;p&gt;在本程序中，我们将用&lt;code&gt;EBX&lt;/code&gt;中的值与&lt;code&gt;EAX&lt;/code&gt;中的值相乘。两个整数按照和 Lesson 12 一样的方式分别存入两个寄存器。这次的指令主角是&lt;code&gt;MUL&lt;/code&gt;，他是 NASM 中为数不多的几个单操作数指令之一。&lt;code&gt;MUL&lt;/code&gt;指令总是将其操作数与EAX中的值相乘，并将积存回&lt;code&gt;EAX&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;我们的第拾肆个汇编程序一登龙门&#34;&gt;我们的第拾肆个汇编程序——一登龙门&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (Multiplication)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-multiplication.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-multiplication.o -o calculator-multiplication&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-multiplication&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our first number into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; move our second number into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mul&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; multiply eax by ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; call our integer print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-multiplication.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-multiplication.o -o calculator-multiplication
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-multiplication
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;810&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-15-计算除法&#34;&gt;Lesson 15 计算——除法&lt;/h2&gt;
&lt;p&gt;除法指令我们已经见识过了，我们曾用他来实现数字值到 ASCII 码的转换。本例中，依然使用&lt;code&gt;EAX&lt;/code&gt;和&lt;code&gt;EBX&lt;/code&gt;。他们分别保存被除数和除数。如前所述，&lt;code&gt;DIV&lt;/code&gt;指令的行为如下：用其操作数去除&lt;code&gt;EAX&lt;/code&gt;中的值，商保存到&lt;code&gt;EAX&lt;/code&gt;，而余数保存到&lt;code&gt;EDX&lt;/code&gt;。最后将商和余数都打印出来&lt;/p&gt;
&lt;h3 id=&#34;又见除法的第拾伍个汇编程序经分之术&#34;&gt;又见除法的第拾伍个汇编程序——经分之术&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (Division)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-division.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-division.o -o calculator-division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39; remainder &amp;#39;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; a message string to correctly output result&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; move our first number into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; move our second number into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;div&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; divide eax by ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprint&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; call our integer print function on the quotient&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; move our message string into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; call our string print function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; move our remainder into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; call our integer printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-division.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-division.o -o calculator-division
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-division
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; remainder &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-16-计算atoi&#34;&gt;Lesson 16 计算——atoi&lt;/h2&gt;
&lt;p&gt;将算数运算中的数值写死在代码里并不激动人心，这次我们要从命令行参数中动态获取变化的数值！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们先用&lt;code&gt;POP&lt;/code&gt;从栈上获得命令行参数的个数，并保存在&lt;code&gt;ECX&lt;/code&gt;寄存器；然后继续&lt;code&gt;POP&lt;/code&gt;出命令的名称，从&lt;code&gt;ECX&lt;/code&gt;中去掉他的计数；随后循环的弹出每个参数并执行加法逻辑。&lt;/li&gt;
&lt;li&gt;和输出一样，输入给我们的也都是字符串。在进行加法运算前，需要一个和输出时相反的转换操作：ASCII 码-&amp;gt;数字值，没有这个步骤加法的结果将不正确。&lt;/li&gt;
&lt;li&gt;这个转换操作由引入的子例程 Ascii to Integer(atoi) 来完成。这个函数将 ASCII 码值对应的数字保存在&lt;code&gt;EAX&lt;/code&gt;寄存器。每次我们都把&lt;code&gt;EAX&lt;/code&gt;的值加到&lt;code&gt;EDX&lt;/code&gt;里去。如果传递给我们的 ASCII 码不是表示 0-9 那是个数字的，就用 0 替代他。&lt;/li&gt;
&lt;li&gt;所有参数都经过转换并加到一起后，打印和并退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;atoi 原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将 ASCII 码转为整数并非易事。还记得我们之前是怎么把整数转成 ASCII 码的？现在然要进行其逆运算。&lt;/p&gt;
&lt;p&gt;首先，将字符串的地址移入&lt;code&gt;ESI&lt;/code&gt;(著名的源址寄存器)；然后，逐字节的遍历字符串(试着将每个字节看做是一个数字或十进制位)。对于每个数字，检测其值是否介于 48 到 57 之间( 0-9 的 ASCII 码)，如果满足条件，就执行以下逻辑：&lt;/p&gt;
&lt;p&gt;码值减去 48——得到该码值所表示的数字的十进制整数值，这个值存入&lt;code&gt;EAX&lt;/code&gt;，然后&lt;code&gt;EAX&lt;/code&gt;乘以 10，随着循环的进行，每一位的位权都在随着乘以 10 而提升，从而归到其所占的位上。&lt;/p&gt;
&lt;p&gt;当所有的字节都按照上面的逻辑处理完成，返回结果值之前，还要进入最后的一步：由于最后一位数字是个位数，他不应该乘以 10，但面的逻辑却这样做了。我们需要简单的除以一次 10 来纠正这个错误。当然，如果传递给程序的参数不是整数，这个除法操作就省略掉。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接下来的程序中使用了 BL 寄存器，这里简单说下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用寄存器的个数就没怎么变过，但是其位数却一扩再扩以提高CPU的计算能力。汇编指令中写&lt;code&gt;BL&lt;/code&gt;的意思是，使用32位&lt;code&gt;EBX&lt;/code&gt;寄存器的&lt;code&gt;低8位&lt;/code&gt;，因为单个 ASCII 码值只需要一个字节就可以放下。如果使用整个32位寄存器来存储这一个字节的数据，那么其中的24位都对我们毫无意义。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;EBX&lt;/code&gt;，其&lt;code&gt;0-16bits&lt;/code&gt;段称为&lt;code&gt;BX&lt;/code&gt;，而&lt;code&gt;BX&lt;/code&gt;则包含&lt;code&gt;BL&lt;/code&gt;和&lt;code&gt;BH&lt;/code&gt;(低8位，高8位)，显然我们只需要&lt;code&gt;BL&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;正向的学习汇编，往往从头开始捣寄存器的历史，名称的含义和位的大小等等。本教程是反向的，通过程序中用到的必要元素来追溯关键的概念和原理。完整的寄存器知识超出了本教程的范围，但之后的篇章将继续讨论，毕竟写汇编嘛，我们绕不过寄存器去 :-)&lt;/p&gt;
&lt;h3 id=&#34;欢迎我们的第拾陆个汇编程序反朴归真&#34;&gt;欢迎我们的第拾陆个汇编程序——反朴归真&lt;/h3&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;funcitons.asm 只列出了新引入的 atoi 子例程的代码&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; int atoi(Integer number)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Ascii to integer function (atoi)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;atoi:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve ebx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve ecx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve edx on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; preserve esi on the stack to be restored after function runs&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move pointer in eax into esi (our number to convert)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise eax with decimal value 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise ecx with decimal value 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.multiplyLoop:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; resets both lower and uppper bytes of ebx to be 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; move a single byte into ebx register&amp;#39;s lower half&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare ebx register&amp;#39;s lower half value against ascii value 48 (char value 0)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jl&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;.finished&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump if less than to label finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;57&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare ebx register&amp;#39;s lower half value against ascii value 57 (char value 9)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jg&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;.finished&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump if greater than to label finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;bl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; convert ebx register&amp;#39;s lower half to decimal representation of ascii value&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; add ebx to our interger value in eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move decimal value 10 into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mul&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; multiply eax by ebx to get place value&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; increment ecx (our counter register)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.multiplyLoop&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; continue multiply loop&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare ecx register&amp;#39;s value against decimal 0 (our counter register)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;.restore&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; jump if equal to 0 (no integer arguments were passed to atoi)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move decimal value 10 into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;div&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by value in ebx (in this case 10)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.restore:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore esi from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore edx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore ecx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; restore ebx from the value we pushed onto the stack at the start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Calculator (ATOI)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf calculator-atoi.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 calculator-atoi.o -o calculator-atoi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./calculator-atoi 20 1000 317&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; first value on the stack is the number of arguments&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; second value on the stack is the program name (discarded when we initialise edx)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; decrease ecx by 1 (number of arguments without program name)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise our data register to store additions&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextArg:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; check to see if we have any arguments left&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;noMoreArgs&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; if zero flag is set jump to noMoreArgs label (jumping over the end of the loop)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; pop the next argument off the stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;atoi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; convert our ascii string to decimal integer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; perform our addition logic&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;dec&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; decrease ecx (number of arguments left) by 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextArg&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; jump to nextArg label&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;noMoreArgs:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move our data result into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our integer printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf calculator-atoi.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 calculator-atoi.o -o calculator-atoi
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./calculator-atoi &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;317&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1337&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-17-命名空间&#34;&gt;Lesson 17 命名空间&lt;/h2&gt;
&lt;p&gt;对于任何包含大量代码库的软件项目，命名空间都是不可或缺的构造。命名空间为标识符引入作用域的概念，使得重用命名约定成为可能，同时增强了代码的可读性和可维护性。在汇编语言中，全局标签标识子例程，而局部标签用来实现命名空间。&lt;/p&gt;
&lt;p&gt;之前的教程中，我们都只使用了全局标签。这意味着即便是实现相同逻辑的代码块，也必须有全局唯一的标签名，前面的&lt;code&gt;finished&lt;/code&gt;标签就是一例。同属一个全局作用域，意味着当在一个函数中需要跳出循环时，直接&lt;code&gt;JMP&lt;/code&gt;到该函数中的&lt;code&gt;finished&lt;/code&gt;标签就行。然而，如果需要从另一个函数中跳出循环，和&lt;code&gt;finished&lt;/code&gt;代码块功能相同的代码就得改名。我们希望能重用&lt;code&gt;finished&lt;/code&gt;这个名字，因为他能向代码的阅读者暗示出某种已知的逻辑。&lt;/p&gt;
&lt;p&gt;局部标签以&lt;code&gt;.&lt;/code&gt;开头，比如：&lt;code&gt;.finished&lt;/code&gt;。随着 functions.asm 的不断扩展，你可能已经注意到他的出现了。一个局部标签的命名空间，由离他最近的前面的一个全局标签限定。你可以使用&lt;code&gt;JMP&lt;/code&gt;跳转到局部标签，编译器将通过当前调用的作用域(基于其之上的全局标签)计算出应该引用哪一个局部标签。&lt;/p&gt;
&lt;h3 id=&#34;第拾柒个汇编程序各安生业&#34;&gt;第拾柒个汇编程序——各安生业&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Namespace&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf namespace.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 namespace.o -o namespace&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./namespace&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg1&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Jumping to finished label.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg2&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Inside subroutine number: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg3&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Inside subroutine &amp;#34;finished&amp;#34;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;subrountineOne:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg1 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.finished&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump to the local label under the subrountineOne scope&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg2 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; move the value one into eax (for subroutine number one)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our integer printing function with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;subrountineTwo:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg1 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our string print with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.finished&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; jump to the local label under the subrountineTwo scope&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg2&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg2 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; move the value two into eax (for subroutine number two)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our integer printing function with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg1&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg1 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;finished&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; jump to the global label finished&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;finished:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg3&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the address of msg3 into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf namespace.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 namespace.o -o namespace
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./namespace
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Jumping to finished label.
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Inside subroutine number: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;Jumping to finished label.
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;Inside subroutine number: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;Jumping to finished label.
&lt;span class=&#34;ln&#34;&gt;9&lt;/span&gt;Inside subroutine &lt;span class=&#34;s2&#34;&gt;&amp;#34;finished&amp;#34;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-18-fizzbuzz-游戏&#34;&gt;Lesson 18 FizzBuzz 游戏&lt;/h2&gt;
&lt;p&gt;FizzBuzz——老外在学校里教孩子除法的一组游戏。玩法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;玩家轮流计算从&lt;code&gt;1&lt;/code&gt;到&lt;code&gt;100&lt;/code&gt;的整数，&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;3的倍数&lt;/code&gt;就换成 Fizz，&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;5的倍数&lt;/code&gt;就换成 Buzz，&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;3和5的公倍数&lt;/code&gt;就换成 FizzBuzz。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;神奇的是这个儿童游戏已经成为计算机编程工作事实上的标准面试题之一，原因在于该题可以轻松的过滤掉连简单的逻辑门都构造不好的候选人。。。&lt;/p&gt;
&lt;p&gt;解题办法不止一种，有些语言提供了非常简单而优雅的方案。然而大都是躲不过 if 语句的；可能还会含有 else，这取决于是否利用了某些数学性质，如：既能被 3 整除也能被 5 整除的数必然可以被 3 * 5 = 15 整除。&lt;/p&gt;
&lt;p&gt;本篇的汇编实现，我们提供如下的方案：两个级联的 if 语句判断是否打印 Fizz 和/或 Buzz，以及一个 else 语句打印其他数字。每个输出都占一行，100个数字都处理完，程序退出。&lt;/p&gt;
&lt;h3 id=&#34;让我们的第拾捌个汇编程序来挑战一下大道至简&#34;&gt;让我们的第拾捌个汇编程序来挑战一下——大道至简&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Fizzbuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf fizzbuzz.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 fizzbuzz.o -o fizzbuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./fizzbuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fizz&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Fizz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buzz&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Buzz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise our checkFizz boolean variable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise our checkBuzz boolean variable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; initialise our counter variable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;nextNumber:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;inc&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; increment our counter variable&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.checkFizz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; clear the edx register - this will hold our remainder after division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the value of our counter into eax for division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; move our number to divide by into ebx (in this case the value is 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;div&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move our remainder into edi (our checkFizz boolean variable)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare if the remainder is zero (meaning the counter divides by 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.checkBuzz&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; if the remainder is not equal to zero jump to local label checkBuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fizz&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; else move the address of our fizz string into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.checkBuzz:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; clear the edx register - this will hold our remainder after division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move the value of our counter into eax for division&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; move our number to divide by into ebx (in this case the value is 5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;div&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; divide eax by ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move our remainder into edi (our checkBuzz boolean variable)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; compare if the remainder is zero (meaning the counter divides by 5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.checkInt&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; if the remainder is not equal to zero jump to local label checkInt&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buzz&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; else move the address of our buzz string into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.checkInt:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; edi contains the remainder after the division in checkFizz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.continue&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; if equal (counter divides by 3) skip printing the integer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; esi contains the remainder after the division in checkBuzz&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;.continue&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; if equal (counter divides by 5) skip printing the integer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; else move the value in ecx (our counter) into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our integer printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.continue:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move an ascii linefeed character into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push the address of eax onto the stack for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; get the stack pointer (address on the stack of our linefeed char)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function to print a line feed&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; pop the stack so we don&amp;#39;t waste resources&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; compare if our counter is equal to 100&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jne&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;nextNumber&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; if not equal jump to the start of the loop&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; else call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ nasm -f elf fizzbuzz.asm
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ ld -m elf_i386 fizzbuzz.o -o fizzbuzz
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;$ ./fizzbuzz
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;Fizz
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;Buzz
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;Fizz
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;Fizz
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;Buzz
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;Fizz
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;FizzBuzz
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-19-执行命令&#34;&gt;Lesson 19 执行命令&lt;/h2&gt;
&lt;h3 id=&#34;再一次背景知识&#34;&gt;再一次，背景知识&lt;/h3&gt;
&lt;p&gt;通过指定的要运行的命令，调用&lt;code&gt;EXEC&lt;/code&gt;一族的函数将启动一个新进程来替换当前的。本节，我们将使用&lt;code&gt;sys_execve&lt;/code&gt;系统调用，启动 Linux 下的程序&lt;code&gt;/bin/echo&lt;/code&gt;，来替换程序运行中的进程，我们让&lt;code&gt;/bin/echo&lt;/code&gt;来输出&amp;quot;Hello,World!&amp;quot;&lt;/p&gt;
&lt;h3 id=&#34;命名约定&#34;&gt;命名约定&lt;/h3&gt;
&lt;p&gt;这一族的函数都以&lt;code&gt;exec&lt;/code&gt;开头，后面跟着的字母含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E，指向环境变量指针的数组，传给进程镜像&lt;/li&gt;
&lt;li&gt;L，命令行参数分别传给函数&lt;/li&gt;
&lt;li&gt;P，使用&lt;code&gt;PATH&lt;/code&gt;环境变量查找路径参数中的命令名并执行&lt;/li&gt;
&lt;li&gt;V，命令行参数作为指针数组传递给函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V 和 E 后缀的函数，意味着需要按如下格式传递参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是要被执行的命令的字符串，&lt;/li&gt;
&lt;li&gt;后面跟着该命令的参数数组，&lt;/li&gt;
&lt;li&gt;最后是新进程将用到的环境变量的数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们调用一个简单的命令时，不将任何特殊的环境变量传递给新进程，而是传递 0h (NULL)。&lt;/p&gt;
&lt;p&gt;命令的参数和环境变量都必须用指针的数组来传递。因此，在定义完字符串后，我们定义了一个包含变量名的null终结(0h结尾)的结构体(数组)。这样，就准备好了应传给&lt;code&gt;sys_execve&lt;/code&gt;的所有东西。一旦调用成功，新进程将替换我们的进程，输出返回给了终端。&lt;/p&gt;
&lt;h3 id=&#34;第拾玖个汇编程序委重投艰&#34;&gt;第拾玖个汇编程序——委重投艰&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf execute.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 execute.o -o execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;command&lt;/span&gt;         &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;/bin/echo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; command to execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arg1&lt;/span&gt;            &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arguments&lt;/span&gt;       &lt;span class=&#34;nv&#34;&gt;dd&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;                &lt;span class=&#34;kd&#34;&gt;dd&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;arg1&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; arguments to pass to commandline (in this case just one)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;                &lt;span class=&#34;kd&#34;&gt;dd&lt;/span&gt;      &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; end the struct&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;environment&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;dd&lt;/span&gt;      &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; arguments to pass as environment variables (inthis case none) end the struct&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;environment&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; address of environment variables&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; address of the arguments to pass to the commandline&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; address of the file to execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; invoke SYS_EXECVE (kernel opcode 11)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf execute.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 execute.o -o execute
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./execute
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;不妨试试其他命令&lt;/p&gt;

  &lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;command&lt;/span&gt;         &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;/bin/ls&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; command to execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arg1&lt;/span&gt;            &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;-l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;command&lt;/span&gt;         &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;/bin/sleep&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; command to execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;arg1&lt;/span&gt;            &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-20-process-forking&#34;&gt;Lesson 20 Process Forking&lt;/h2&gt;
&lt;h3 id=&#34;重入背景知识&#34;&gt;重入，背景知识&lt;/h3&gt;
&lt;p&gt;本节引入著名的&lt;code&gt;sys_fork&lt;/code&gt;。这个调用不是替换，而是复制我们的进程。该调用不接受任何参数，只要在当前进程中调用，那么新进程就会被创建。新进程与原进程并发执行。&lt;/p&gt;
&lt;p&gt;通过检测&lt;code&gt;EAX&lt;/code&gt;中的值，来判断当前是处于父进程还是子进程中。父进程返回一个正整数；子进程中&lt;code&gt;EAX&lt;/code&gt;为 0。以此可以对于父子进程进行分支逻辑。&lt;/p&gt;
&lt;p&gt;基于以上事实，我们在父子进程中打印不同的消息。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;每个进程需要各自安全退出&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;第贰拾个汇编程序如出一辙&#34;&gt;第贰拾个汇编程序——如出一辙&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Fork&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf fork.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 fork.o -o fork&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./fork&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;childMsg&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is the child process&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;parentMsg&lt;/span&gt;       &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;This is the parent process&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_FORK (kernel opcode 2)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; if eax is zero we are in the child process&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nb&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ild&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;; jump if eax is zero to child label&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;parent:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;parentMsg&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; inside our parent process move parentMsg into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; quit the parent process&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;child:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ildMsg&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; inside our child process move childMsg into eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our string printing with linefeed function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; quit the child process&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf fork.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 fork.o -o fork
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./fork
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;This is the parent process
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;This is the child process
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-21-输出时间&#34;&gt;Lesson 21 输出时间&lt;/h2&gt;
&lt;p&gt;在 NASM 中，生成一个 unix 时间戳只需简单的向内核调用&lt;code&gt;sys_time&lt;/code&gt;，也即：调用表中的 OPCODE 13。不需要参数，返回的&lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_time&#34;&gt;UNIX 纪元时间&lt;/a&gt;保存在&lt;code&gt;EAX&lt;/code&gt;寄存器中&lt;/p&gt;
&lt;h3 id=&#34;第贰拾壹个汇编程序只争朝夕&#34;&gt;第贰拾壹个汇编程序——只争朝夕&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf time.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 time.o -o time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include        &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#39;Seconds since Jan 01 1970: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; a message string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move our message string into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; invoke SYS_TIME (kernel opcode 13)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; call our integer printing function with linefeed&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf time.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 time.o -o &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./time
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Seconds since Jan &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; 1970: &lt;span class=&#34;m&#34;&gt;1374995660&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-22-文件操作create&#34;&gt;Lesson 22 文件操作——Create&lt;/h2&gt;
&lt;h3 id=&#34;相关背景&#34;&gt;相关背景&lt;/h3&gt;
&lt;p&gt;文件操作在 Linux 系统中涉及到一小股系统调用，包括：创建、更新、删除。这些函数都必须作用于&lt;a href=&#34;https://en.wikipedia.org/wiki/File_descriptor&#34;&gt;文件描述符&lt;/a&gt;——系统中用于标识文件的一个唯一的、非负整数。&lt;/p&gt;
&lt;p&gt;首先登场的是用于创建文件的&lt;code&gt;sys_creat&lt;/code&gt;。在后面的课程中，将在同一程序上不断扩展。最终，我们将有一个包含文件的创建、更新、打开、关闭和删除的完整功能的程序。&lt;/p&gt;
&lt;h3 id=&#34;我们的第贰拾贰个汇编程序本立道生&#34;&gt;我们的第贰拾贰个汇编程序——本立道生&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf create.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 create.o -o create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; set all permissions to read, write, execute&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; filename we will create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_CREAT (kernel opcode 8)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf create.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 create.o -o create
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;“没有消息就是好消息”，文件 readme.txt 将出现在与程序相同的目录中&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-23-文件操作write&#34;&gt;Lesson 23 文件操作——Write&lt;/h2&gt;
&lt;p&gt;基于上一节的程序，我们调用&lt;code&gt;sys_write&lt;/code&gt;将内容写到新创建的文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_write&lt;/code&gt;需要的 3 个参数由以下寄存器提供&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要写入的字节数载入&lt;code&gt;EDX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;要写入内容的指针载入&lt;code&gt;ECX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件描述符载入&lt;code&gt;EBX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 12 载入&lt;code&gt;EAX&lt;/code&gt;，熟悉的套路，&lt;code&gt;INT 80h&lt;/code&gt; 开调。留意，我们首先通过将文件名传给&lt;code&gt;sys_creat&lt;/code&gt;，进而从&lt;code&gt;EAX&lt;/code&gt;中得到文件描述符。&lt;/p&gt;
&lt;h3 id=&#34;我们的第贰拾叁个汇编程序握素怀铅&#34;&gt;我们的第贰拾叁个汇编程序——握素怀铅&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf write.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 write.o -o write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; the contents to write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; code continues from lesson 22&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; number of bytes to write - one for each letter of our contents string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the memory address of our contents string into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move the file descriptor of the file we created into ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf write.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 write.o -o write
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./write
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;执行完打开 readme.txt 看看吧，该有 Hello, World! 才对&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-24-文件操作open&#34;&gt;Lesson 24 文件操作——Open&lt;/h2&gt;
&lt;p&gt;继续扩展前面的程序，这次轮到&lt;code&gt;sys_open&lt;/code&gt;登场。这个调用用来获取文件描述符，而文件描述符则作为后面其他文件相关函数的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_open&lt;/code&gt;需要的两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问模式(见下表)载入&lt;code&gt;ECX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;则存着文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统调用的方法我们已经很熟悉了：OPCODE 5 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_open&lt;/code&gt;也可以额外接受 0 个或多个表示文件创建和文件状态的标志，通过&lt;code&gt;EDX&lt;/code&gt;读取。详情参见：&lt;a href=&#34;https://man7.org/linux/man-pages/man2/open.2.html&#34;&gt;open(2) —— Linux manual page&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O_RDONLY&lt;/td&gt;
&lt;td&gt;只读打开&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O_WRONLY&lt;/td&gt;
&lt;td&gt;只写打开&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O_RDWR&lt;/td&gt;
&lt;td&gt;读写打开&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;调用&lt;code&gt;sys_open&lt;/code&gt;后，我们从&lt;code&gt;EAX&lt;/code&gt;中获得文件描述符，然后使用整数打印函数将这个在 Linux 中唯一的，非负整数的值打印出来&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;写下我们的第贰拾肆个汇编程序招之即来&#34;&gt;写下我们的第贰拾肆个汇编程序——招之即来&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Open&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf open.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 open.o -o open&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./open&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; the contents to write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; Create file from lesson 22&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; Write contents to file from lesson 23&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; flag for readonly access mode (O_RDONLY)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; filename we created above&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_OPEN (kernel opcode 5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our integer printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf open.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 open.o -o open
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./open
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-25-文件操作read&#34;&gt;Lesson 25 文件操作——Read&lt;/h2&gt;
&lt;p&gt;介绍了创建、写入、打开，也该读取了。本节我们使用&lt;code&gt;sys_read&lt;/code&gt;读取新建且打开的文件，内容存到一个变量中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_read&lt;/code&gt;的 3 个参数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要读取的字节数载入&lt;code&gt;EDX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;保存内容的变量地址载入&lt;code&gt;ECX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EBX&lt;/code&gt;中放文件描述符(通过上一节的&lt;code&gt;sys_open&lt;/code&gt;获取)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 3 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;h3 id=&#34;第贰拾伍个汇编程序一览无遗&#34;&gt;第贰拾伍个汇编程序——一览无遗&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf read.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 read.o -o read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; the contents to write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fileContents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; variable to store file contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; Create file from lesson 22&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; Write contents to file from lesson 23&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; Open file from lesson 24&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; number of bytes to read - one for each letter of the file contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fileContents&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; move the memory address of our file contents variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move the opened file descriptor into EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fileContents&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; move the memory address of our file contents variable into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf read.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 read.o -o &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./read
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-26-文件操作close&#34;&gt;Lesson 26 文件操作——Close&lt;/h2&gt;
&lt;p&gt;抱歉这么重要的操作现在才引入，正确的关闭文件等资源无论在那种语言编写的程序中都是不可或缺的步骤，本节引入&lt;code&gt;sys_close&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_close&lt;/code&gt;只需要一个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;藉由&lt;code&gt;EBX&lt;/code&gt;将文件描述符传给内核&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扩展上一节的程序——在获取到文件描述符后，我们将其放入EBX。&lt;/p&gt;
&lt;p&gt;OPCODE 6 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;h3 id=&#34;我们的负责任的第贰拾陆个汇编程序止戈散马&#34;&gt;我们的负责任的第贰拾陆个汇编程序——止戈散马&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Close&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf close.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 close.o -o close&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./close&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; the contents to write&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fileContents&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; variable to store file contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0777&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; Create file from lesson 22&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; Write contents to file from lesson 23&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; Open file from lesson 24&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; Read file from lesson 25&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fileContents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fileContents&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; not needed but used to demonstrate that SYS_CLOSE takes a file descriptor from EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_CLOSE (kernel opcode 6)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf close.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 close.o -o close
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./close
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;我们正确的关闭了文件，将文件描述符等一干资源还回了操作系统&lt;/p&gt;

  &lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;lesson-27-文件操作seek&#34;&gt;Lesson 27 文件操作——Seek&lt;/h2&gt;
&lt;p&gt;之前的课程都是对文件整存整取操作，但实际应用中的更多是对文件的局部修改。本节引入&lt;code&gt;sys_lseek&lt;/code&gt;，演示在文件的结尾追加内容。&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;sys_lseek&lt;/code&gt;你可以在文件中移动一个叫游标的玩意儿，同时用字节为单位的偏移量来精确定位。下面的例子演示了移动到文件结尾，并用 0 字节偏移量(这样保证我们在末尾写入而不是超出)来定位写入的位置。在&lt;code&gt;ECX&lt;/code&gt;和&lt;code&gt;EDX&lt;/code&gt;中尝试不同的值在文件的不同位置写入。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_lseek&lt;/code&gt;的3个参数这样传递：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EDX&lt;/code&gt;保存从哪开始，可选的值如下表&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SEEK_SET&lt;/td&gt;
&lt;td&gt;文件的开头&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SEEK_CUR&lt;/td&gt;
&lt;td&gt;当前位置偏移量&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SEEK_END&lt;/td&gt;
&lt;td&gt;文件的结尾&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;偏移量存进&lt;code&gt;ECX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后自然就是文件描述符了，由&lt;code&gt;EBX&lt;/code&gt;存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 19 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。定位到期望的位置后，我们调用了&lt;code&gt;sys_write&lt;/code&gt;更新文件的内容。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;本程序没有创建文件的过程，是在已经存在的 readme.txt 文件上操作的。程序运行后该文件的内容将被更新&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;有请我们的第贰拾柒个汇编程序上下求索&#34;&gt;有请我们的第贰拾柒个汇编程序——上下求索&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Seek&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf seek.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 seek.o -o seek&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./seek&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to create&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;contents&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;-updated-&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; the contents to write at the start of the file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; flag for writeonly access mode (O_WRONLY)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; filename of the file to open&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_OPEN (kernel opcode 5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; whence argument (SEEK_END)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; move the cursor 0 bytes&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move the opened file descriptor into EBX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; invoke SYS_LSEEK (kernel opcode 19)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; number of bytes to write - one for each letter of our contents string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;contents&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move the memory address of our contents string into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move the opened file descriptor into EBX (not required as EBX already has the FD)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf seek.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 seek.o -o seek
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./seek
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-28-文件操作delete&#34;&gt;Lesson 28 文件操作——Delete&lt;/h2&gt;
&lt;p&gt;文件删除在 Linux 中由系统调用&lt;code&gt;sys_unlink&lt;/code&gt;(差点写成 unlike)提供。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_unlink&lt;/code&gt;只需要一个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把文件名放入&lt;code&gt;EBX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 10 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;readme.txt 是已经存在的文件。程序运行完成，该文件将被删除&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第贰拾捌个汇编程序一扫而尽&#34;&gt;我们的第贰拾捌个汇编程序——一扫而尽&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Unlink&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf unlink.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 unlink.o -o unlink&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./unlink&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;readme.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; the filename to delete&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; filename we will delete&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; invoke SYS_UNLINK (kernel opcode 10)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf unlink.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 unlink.o -o unlink
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./unlink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-29-套接字create&#34;&gt;Lesson 29 套接字——Create&lt;/h2&gt;
&lt;h3 id=&#34;背景知识走起&#34;&gt;背景知识，走起&lt;/h3&gt;
&lt;p&gt;Linux 中的套接字编程，藉由&lt;code&gt;sys_socketcall&lt;/code&gt;内核函数提供。与文件操作的一族函数不同，他一人就封装了套接字相关的全部操作，全都以子例程的形式存在其中。我们通过在&lt;code&gt;EBX&lt;/code&gt;中传递给他不同的值，来区分诸如：创建、监听、发送、接受、关闭等操作。这里有&lt;a href=&#34;https://gist.github.com/DGivney/7196bd7a9f21a12c9397bdcf9ae040d2&#34;&gt;详细注释的完整程序&lt;/a&gt;以供参考。&lt;/p&gt;
&lt;p&gt;发起系统调用前，需要初始化一些寄存器，用以存储后面的重要数据。接着调用&lt;code&gt;sys_socketcall&lt;/code&gt;的第一个子例程&lt;code&gt;socket&lt;/code&gt;来创建套接字。之后的课程中，将在此程序基础上按需扩充。最终，我们将拥有一个包含：创建、绑定、监听、接受、读取、写入和关闭的完整套接字程序。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;socket&lt;/code&gt;接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 1 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;p&gt;在 Linux 中&lt;strong&gt;一切皆文件&lt;/strong&gt;，成功创建后的套接字将作为文件描述符(FD)由&lt;code&gt;EAX&lt;/code&gt;返回给用户程序。这个 FD 将用来实施其他的套接字函数。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;一个寄存器对自身进行 XOR 异或是初始化(清零)的好办法，这可以确保其中不包含意外的值，从而避免程序崩溃。&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;套接字我们的第贰拾玖个汇编程序来了只如初见&#34;&gt;套接字，我们的第贰拾玖个汇编程序来了——只如初见&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init eax 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init ebx 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init edi 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init esi 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 6 onto the stack (IPPROTO_TCP)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 1 onto the stack (SOCK_STREAM)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 2 onto the stack (PF_INET)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine SOCKET (1)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;iprintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our integer printing function (print the file descriptor in EAX or -1 on error)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-30-套接字bind&#34;&gt;Lesson 30 套接字——Bind&lt;/h2&gt;
&lt;p&gt;上一节完成了套接字的创建，现在我们为这个套接字关联一个本地 IP 和端口以便其他程序与其建立连接。这个任务由&lt;code&gt;sys_cocketcall&lt;/code&gt;的第二个子例程&lt;code&gt;bind&lt;/code&gt;完成。&lt;/p&gt;
&lt;p&gt;这里引入新的寄存器&lt;code&gt;EDI&lt;/code&gt;来存储套接字的文件描述符(FD)。&lt;code&gt;EDI&lt;/code&gt;——目标索引寄存器，原做拷贝过程中存储目标文件的位置之用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;bind&lt;/code&gt;也接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 2 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;
&lt;h3 id=&#34;第叁拾个汇编程序一朝比翼&#34;&gt;第叁拾个汇编程序——一朝比翼&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move return value of SYS_SOCKETCALL into edi (file descriptor for new socket, or -1 on error)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; push 0 dec onto the stack IP ADDRESS (0.0.0.0)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; push 9001 dec onto stack PORT (reverse byte order)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 2 dec onto stack AF_INET&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of stack pointer into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push 16 dec onto stack (arguments length)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the address of arguments onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the file descriptor onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine BIND (2)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-31-套接字listen&#34;&gt;Lesson 31 套接字——Listen&lt;/h2&gt;
&lt;p&gt;上一节完成了套接字的绑定。下面由&lt;code&gt;sys_socketcall&lt;/code&gt;的&lt;code&gt;listen&lt;/code&gt;子例程告诉我们的套接字监听&lt;code&gt;TCP&lt;/code&gt;的入站请求。这是在套接字上对与我们相互连接的程序进行读写的前提。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;listen&lt;/code&gt;也接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 4 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。调用成功后，套接字即开始监听入站请求。&lt;/p&gt;
&lt;h3 id=&#34;我们的第叁拾壹个汇编程序伫候佳音&#34;&gt;我们的第叁拾壹个汇编程序——伫候佳音&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; move 1 onto stack (max queue length argument)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the file descriptor onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine LISTEN (4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-32-套接字accept&#34;&gt;Lesson 32 套接字——Accept&lt;/h2&gt;
&lt;p&gt;前面的课程都是套接字的准备工作。入站请求到达后，还必须有接受逻辑，这由&lt;code&gt;sys_socketcall&lt;/code&gt;的&lt;code&gt;accept&lt;/code&gt;子例程实现。进入 ACCEPT 状态的套接字可以在远程连接上进行读写。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;accept&lt;/code&gt;也接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 5 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;code&gt;accept&lt;/code&gt;子例程将创建另一个文件描述符(FD)，用以标识入站连接。我们后面的课程将使用这个 FD 来进行实际的读写操作。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;运行本程序后，开启另一个终端窗口，键入&lt;code&gt;sudo netstat -plnt&lt;/code&gt;查看 9001 端口是否在监听之中&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;第叁拾贰个汇编程序宾至如归&#34;&gt;第叁拾贰个汇编程序——宾至如归&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; listen socket from lesson 31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_accept:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 0 dec onto stack (address length argument)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 0 dec onto stack (address argument)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the file descriptor onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine ACCEPT (5)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-33-套接字read&#34;&gt;Lesson 33 套接字——Read&lt;/h2&gt;
&lt;p&gt;套接字也建立了，地址和端口也绑定了，监听中的套接字接受了入站连接，现在该让我们看看远端发来的请求里有什么了吧……&lt;/p&gt;
&lt;p&gt;当入站连接被套接字接受后，一个新的文件描述符(FD)通过&lt;code&gt;EAX&lt;/code&gt;返回给用户程序。本节将使用这个 FD 从连接中读取请求头。&lt;/p&gt;
&lt;p&gt;先将获取到的 FD 存入&lt;code&gt;ESI&lt;/code&gt;寄存器——原址索引寄存器，原做拷贝过程中存储来源文件的位置之用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_read&lt;/code&gt;是我们的老朋友了，就靠它从套接字连接中读取数据。正如前面的课程中所做的，我们用一个变量来保存从 FD 中读取的内容。本例的套接字使用传说中的&lt;code&gt;HTTP&lt;/code&gt;协议进行通讯。分析&lt;code&gt;HTTP&lt;/code&gt;请求头部，进而确认入站消息的长度、客户端接收的响应格式等内容超出了本教程的范畴。为了简化，只读取前 255 个字节并打印到标准输出。&lt;/p&gt;
&lt;p&gt;一旦入站连接被接受，Web 服务器通常会生成一个子进程来接管读/写通信。父进程得以抽身继续监听和接收新的请求。我们就用前不久学过的&lt;code&gt;sys_fock&lt;/code&gt;系统调用和&lt;code&gt;JMP&lt;/code&gt;汇编指令来实现这一模式。&lt;/p&gt;
&lt;p&gt;使用 curl 工具作为客户端来帮我们生成有效的请求头，并连接到套接字。当然你也可以使用浏览器。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;我们在 .bss 段预留 255 字节空间用以存储从 FD 中读取到的内容。.bss 段的信息可以回顾 &lt;a href=&#34;#lesson-9-%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%87%BA&#34;&gt;Lesson 9&lt;/a&gt;&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;程序运行起来后，在另一个终端窗口的命令行输入&lt;code&gt;curl http://localhost:9001&lt;/code&gt;来查看程序读取到的请求头&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第叁拾叁个汇编程序目营心匠&#34;&gt;我们的第叁拾叁个汇编程序——目营心匠&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; variable to store request headers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; listen socket from lesson 31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_accept:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; accept socket from lesson 32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_fork:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;66&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move return value of SYS_SOCKETCALL into esi (file descriptor for accepted socket, or -1 on error)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;68&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_FORK (kernel opcode 2)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;69&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;70&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;71&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; if return value of SYS_FORK in eax is zero we are in the child process&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;72&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;_read&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;; jmp in child process to _read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;73&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;74&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;_accept&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; jmp in parent process to _accept&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;75&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;76&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_read:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;77&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;78&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; number of bytes to read (we will only read the first 255 bytes for simplicity)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;79&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move the memory address of our buffer variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;80&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move esi into ebx (accepted socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;81&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;82&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;83&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;84&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move the memory address of our buffer variable into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;85&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;86&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;87&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;88&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;89&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;GET / HTTP/1.1
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;Host: localhost:9001
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;User-Agent: curl/x.xx.x
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;Accept: */*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-34-套接字write&#34;&gt;Lesson 34 套接字——Write&lt;/h2&gt;
&lt;p&gt;上一节介绍完在套接字上读取，本节说说向套接字写入。&lt;/p&gt;
&lt;p&gt;得益于 Linux 中的&lt;strong&gt;一切皆文件&lt;/strong&gt;，我们可以使用已经掌握的&lt;code&gt;sys_write&lt;/code&gt;向套接字连接写入数据。程序依然使用&lt;code&gt;HTTP&lt;/code&gt;协议。这次作为服务端的我们的程序没人帮忙了，必须要自己构造规定的响应头给客户端程序。格式遵循 &lt;a href=&#34;https://tools.ietf.org/html/rfc2616?spm=5176.doc32013.2.3.Aimyd7#section-4.2&#34;&gt;RFC 标准&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&#34;notices note&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;注意&lt;/div&gt;
    &lt;p&gt;对于已知的值，使用 .data 段来存储。回顾 &lt;a href=&#34;#lesson-1-hello-world&#34;&gt;Lesson 1&lt;/a&gt; 关于 .data 段的信息&lt;/p&gt;

  &lt;/div&gt;


&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;运行程序，在另一个终端窗口中输入命令&lt;code&gt;curl http://localhost:9001&lt;/code&gt;查看响应；或者使用浏览器访问上述地址&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;神功将成的第叁拾肆个汇编程序其应若响&#34;&gt;神功将成的第叁拾肆个汇编程序——其应若响&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;  1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;  6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;  7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;  8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  9&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; our response string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;HTTP/1.1 200 OK&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Type: text/html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Length: 14&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; variable to store request headers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 25&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 35&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 36&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 49&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 50&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; listen socket from lesson 31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 59&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_accept:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 60&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; accept socket from lesson 32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 64&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 65&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 68&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 69&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_fork:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 70&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 71&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; fork socket from lesson 33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 72&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 73&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 74&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 75&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 76&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;_read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 77&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 78&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;_accept&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 79&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 80&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_read:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 81&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 82&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; read socket from lesson 33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 83&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 84&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 85&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 86&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 87&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 88&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 89&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 90&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 91&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_write:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 92&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 93&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;78&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; move 78 dec into edx (length in bytes to write)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 94&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;response&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;; move address of our response variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 95&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move file descriptor into ebx (accepted socket id)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 96&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 97&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 98&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 99&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;100&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;101&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再开一个终端窗口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ curl http://localhost:9001
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-35-套接字close&#34;&gt;Lesson 35 套接字——Close&lt;/h2&gt;
&lt;p&gt;又一次，来到释放资源的关键步骤！正确的关闭链接和关闭文件一样重要。在程序将响应返回给客户端后，我们要关闭子进程中的活动套接字。归还的资源用来接收新到来的链接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_close&lt;/code&gt;不多说，直接秀码——&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;程序启动后，同样新开一个终端窗口查看响应&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的第叁拾伍个汇编程序功成身退&#34;&gt;我们的第叁拾伍个汇编程序——功成身退&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;  1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf socket.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 socket.o -o socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./socket&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;  6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;  7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;  8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;  9&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; our response string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;HTTP/1.1 200 OK&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Type: text/html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Length: 14&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; variable to store request headers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; initialize some registers&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 23&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 25&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 26&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; create socket from lesson 29&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 33&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 34&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 35&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_bind:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 36&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; bind socket from lesson 30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00000000&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x2923&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 48&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 49&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 50&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_listen:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 51&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; listen socket from lesson 31&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 56&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 57&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 59&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_accept:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 60&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; accept socket from lesson 32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 64&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 65&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 67&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 68&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 69&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_fork:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 70&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 71&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; fork socket from lesson 33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 72&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 73&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 74&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 75&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 76&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;_read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 77&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 78&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;_accept&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 79&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 80&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_read:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 81&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 82&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; read socket from lesson 33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 83&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 84&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 85&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 86&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 87&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 88&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 89&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rintLF&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 90&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 91&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_write:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 92&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 93&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;78&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; write socket from lesson 34&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 94&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;response&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 95&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 96&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 97&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 98&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 99&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_close:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;100&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;101&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move esi into ebx (accepted socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;102&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_CLOSE (kernel opcode 6)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;103&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;104&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;105&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;106&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;107&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ nasm -f elf socket.asm
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;$ ld -m elf_i386 socket.o -o socket
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ ./socket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，再另一个终端窗口中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ curl http://localhost:9001
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;lesson-36-套接字下载网页&#34;&gt;Lesson 36 套接字——下载网页&lt;/h2&gt;
&lt;p&gt;前面的课程中，我们见识了&lt;code&gt;sys_socketcall&lt;/code&gt;的众多子例程是如何创建、管理 Linux 套接字并在其中传输数据的，主要集中在服务端程序。接下来，从客户端的角度，使用&lt;code&gt;connect&lt;/code&gt;子例程来演示——从远端下载网页。&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先调用&lt;code&gt;sys_socketcall&lt;/code&gt;的&lt;code&gt;socket&lt;/code&gt;子例程创建套接字，用来将请求发送到远端&lt;/li&gt;
&lt;li&gt;然后调用&lt;code&gt;sys_socketcall&lt;/code&gt;的&lt;code&gt;connect&lt;/code&gt;子例程将刚创建的套接字连到远程 Web 服务器&lt;/li&gt;
&lt;li&gt;之后调用&lt;code&gt;sys_write&lt;/code&gt;发送&lt;code&gt;HTTP&lt;/code&gt;格式的请求&lt;/li&gt;
&lt;li&gt;接着调用&lt;code&gt;sys_read&lt;/code&gt;接收来自 Web 服务器的&lt;code&gt;HTTP&lt;/code&gt;格式响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器返回的响应内容，自然由我们的字符串打印函数代劳输出到终端上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单介绍下 HTTP 请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP 规范涉及多个版本的标准：&lt;a href=&#34;https://tools.ietf.org/html/rfc1945&#34;&gt;1.0 in RFC1945&lt;/a&gt;，&lt;a href=&#34;https://tools.ietf.org/html/rfc2068&#34;&gt;1.1 in RFC2068&lt;/a&gt; 以及 &lt;a href=&#34;https://tools.ietf.org/html/rfc7540&#34;&gt;2.0 in RFC7540&lt;/a&gt;。1.1 版本时至今日依然是主流。&lt;/p&gt;
&lt;p&gt;一个 HTTP 请求包含 3 个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个包含&lt;code&gt;请求方法&lt;/code&gt;、&lt;code&gt;请求 URL&lt;/code&gt;和&lt;code&gt;协议版本&lt;/code&gt;的行&lt;/li&gt;
&lt;li&gt;可选的&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&#34;&gt;请求头&lt;/a&gt;部分&lt;/li&gt;
&lt;li&gt;一个空行，用以告知服务器请求方以完成请求并等待服务器响应&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个典型的到根文档的 HTTP 请求一般长这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;GET / HTTP/1.1                  &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; A line containing the request method, url and version
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;Host: asmtutor.com              &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; A section of request headers
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;                                &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; A required empty line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本节的程序与上一节的程序拥有相似的开头部分，但作为客户端的我们，不需要调用&lt;code&gt;bind&lt;/code&gt;，取而代之的是调用&lt;code&gt;connect&lt;/code&gt;，连接到指定 IP 地址和端口的远程 Web 服务器。然后使用&lt;code&gt;sys_write&lt;/code&gt;和&lt;code&gt;sys_read&lt;/code&gt;在两个套接字之间通过&lt;code&gt;HTTP请求&lt;/code&gt;和&lt;code&gt;HTTP响应&lt;/code&gt;来传输数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sys_socketcall&lt;/code&gt;的子例程&lt;code&gt;connect&lt;/code&gt;接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数数组的指针由&lt;code&gt;ECX&lt;/code&gt;保存&lt;/li&gt;
&lt;li&gt;整数 3 由&lt;code&gt;EBX&lt;/code&gt;保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPCODE 102 载入&lt;code&gt;EAX&lt;/code&gt;，&lt;code&gt;INT 80h&lt;/code&gt; 开调。&lt;/p&gt;

&lt;div class=&#34;notices tip&#34;&gt;
    &lt;div class=&#34;label&#34;&gt;提示&lt;/div&gt;
    &lt;p&gt;提示：为避免返回的内容过多而充斥屏幕，可在运行程序时使用输出重定向&lt;code&gt;./crawler &amp;gt; index.html&lt;/code&gt;来保存服务器响应到一个文件，而不是直接输出到终端上。&lt;/p&gt;

  &lt;/div&gt;

&lt;h3 id=&#34;我们的集大成的第叁拾陆个汇编程序百川朝海&#34;&gt;我们的集大成的第叁拾陆个汇编程序——百川朝海&lt;/h3&gt;
&lt;p&gt;functions.asm 略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Crawler&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Compile with: nasm -f elf crawler.asm&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Link with (64 bit systems require elf_i386 option): ld -m elf_i386 crawler.o -o crawler&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; Run with: ./crawler&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;%include    &amp;#39;functions.asm&amp;#39;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.data&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; our request string&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;GET / HTTP/1.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Host: 139.162.39.66:80&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Dh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0Ah&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0h&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.bss&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;resb&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; variable to store response&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SECTION&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;_start&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init eax 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init ebx 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;xor&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; init edi 0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_socket:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 6 onto the stack (IPPROTO_TCP)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 1 onto the stack (SOCK_STREAM)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 2 onto the stack (PF_INET)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine SOCKET (1)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_connect:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move return value of SYS_SOCKETCALL into edi (file descriptor for new socket, or -1 on error)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;dword&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x4227a28b&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; push 139.162.39.66 onto the stack IP ADDRESS (reverse byte order)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x5000&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; push 80 onto stack PORT (reverse byte order)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; push 2 dec onto stack AF_INET&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of stack pointer into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; push 16 dec onto stack (arguments length)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the address of arguments onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; push the file descriptor onto stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move address of arguments into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke subroutine CONNECT (3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; invoke SYS_SOCKETCALL (kernel opcode 102)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_write:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;43&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; move 43 dec into edx (length in bytes to write)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;request&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; move address of our request variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move file descriptor into ebx (created socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_WRITE (kernel opcode 4)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_read:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; number of bytes to read (we will read 1 byte at a time)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move the memory address of our buffer variable into ecx&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move edi into ebx (created socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_READ (kernel opcode 3)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;65&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; if return value of SYS_READ in eax is zero, we have reached the end of the file&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;66&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jz&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;_close&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; jmp to _close if we have reached the end of the file (zero flag set)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;67&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;68&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; move the memory address of our buffer variable into eax for printing&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;69&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rint&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; call our string printing function&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;70&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;_read&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;; jmp to _read&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;71&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;72&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_close:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;73&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;74&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;edi&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; move edi into ebx (connected socket file descriptor)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;75&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; invoke SYS_CLOSE (kernel opcode 6)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;76&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt;     &lt;span class=&#34;mh&#34;&gt;80h&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; call the kernel&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;77&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_exit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;79&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;80&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;; call our quit function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ nasm -f elf crawler.asm
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ ld -m elf_i386 crawler.o -o crawler
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;$ ./crawler
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;Content-Type: text/html
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&amp;lt;html &lt;span class=&#34;nv&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;...
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$$
The\ End.
$$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文采用 &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;知识共享署名许可协议（CC-BY 4.0）&lt;/a&gt;进行许可，转载注明来源即可。如有错误劳烦评论或邮件指出。&lt;img src=&#34;/images/site/CC-BY_icon.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;

        
      </description>
    </item>
    
    <item>
      <title>WSL2 迁移 Linux 发行版</title>
      <link>/post/original/cs/vm/wsl/migrate_distributions/</link>
      <pubDate>Sat, 01 Aug 2020 12:19:50 +0800</pubDate>
      
      <guid>/post/original/cs/vm/wsl/migrate_distributions/</guid>
      <description>
        
          &lt;h2 id=&#34;意图&#34;&gt;意图&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;备份还原&lt;/li&gt;
&lt;li&gt;迁移&lt;/li&gt;
&lt;li&gt;节省 C 盘空间&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;h3 id=&#34;导出&#34;&gt;导出&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;wsl.exe --export &amp;lt;DistributionName&amp;gt; &amp;lt;FileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;导入&#34;&gt;导入&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;wsl.exe --import &amp;lt;DistributionName&amp;gt; &amp;lt;InstallLocation&amp;gt; &amp;lt;FileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;提示：导入之后，执行 wsl -l -v 查看运行版本，如果是 1 的话，可以执行 wsl --set-version &amp;lt;DistributionName&amp;gt; 2 更新到 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;wsl-默认登录用户&#34;&gt;WSL 默认登录用户&lt;/h2&gt;
&lt;p&gt;如果迁移完毕后发现默认登录用户被置为：root，或者想要手动指定默认的登录用户，可以按如下操作设置：&lt;/p&gt;
&lt;p&gt;注册表项：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Lxss&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中的 DefaultUid 一项，设置为对应子系统中的 Linux UID，UID 可以登录进 WSL 获取&lt;/p&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;p&gt;这里有一个老外提供的，只需提供用户名，不需要登录也能设置 DefaultUid 的 powershell 函数，注意该用户必须存在于子系统中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Function WSL-SetDefaultUser ($distro, $user) { Get-ItemProperty Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss*\ DistributionName | Where-Object -Property DistributionName -eq $distro | Set-ItemProperty -Name DefaultUid -Value ((wsl -d $distro -u $user -e id -u) | Out-String); };&lt;/p&gt;
&lt;p&gt;WSL-SetDefaultUser &amp;lt;DistributionName&amp;gt; &amp;lt;username&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;https://docs.microsoft.com/en-us/windows/wsl/install-win10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/WSL/issues/3974&#34;&gt;https://github.com/microsoft/WSL/issues/3974&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文采用 &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;知识共享署名许可协议（CC-BY 4.0）&lt;/a&gt;进行许可，转载注明来源即可。如有错误劳烦评论或邮件指出。&lt;img src=&#34;/images/site/CC-BY_icon.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;

        
      </description>
    </item>
    
    <item>
      <title>分页内存地址转换点滴</title>
      <link>/post/original/cs/os/memory/memory_paging/</link>
      <pubDate>Mon, 22 Jun 2020 09:28:07 +0800</pubDate>
      
      <guid>/post/original/cs/os/memory/memory_paging/</guid>
      <description>
        
          &lt;p&gt;环境与条件：CPU 和操作系统都为 32 位，主存按字节编址&lt;/p&gt;
&lt;h2 id=&#34;一页大小的确定&#34;&gt;一、页大小的确定&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一言以蔽之——在&lt;code&gt;页表所占内存&lt;/code&gt;和&lt;code&gt;页内填充内存&lt;/code&gt;的耗费上做取舍、折中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下极端情况的对比，用以阐明为什么要取舍、折中&lt;/p&gt;
&lt;p&gt;A、页面大小 = 1Byte&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;颗粒度到达极致细微、系统永远不必为页面填充不需要的内存&lt;/li&gt;
&lt;li&gt;但页表项目达到 2^32 个，占用了整个内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B、页面大小 = 4GBytes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每当新进程启动时，都需要将 4G 内存交换到磁盘&lt;/li&gt;
&lt;li&gt;页表中只有一个条目，因此几乎不占用任何内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x86 设计人员发现 4K 大小的页面是很好的庸点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，随着 CPU 地址总线位数的扩张，系统中物理内存的膨胀，4K 也并不是总是合适的大小。&lt;/p&gt;
&lt;h2 id=&#34;二页大小--页内偏移量位数&#34;&gt;二、页大小 &amp;amp; 页内偏移量位数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;已确定页大小，可算出页内偏移量需要多少位，如常见的页面尺寸 &lt;code&gt;4K = 4096Bytes&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$$ \log_{2}{4096} = 12，即：需要12_{bits}  $$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;已知页内偏移量占用 12 位，则可算出页大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$$ 2^{12} = 4096_{Bytes} $$&lt;/p&gt;
&lt;p&gt;页内偏移范围：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;BIN&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;HEX&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;000000000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0x0000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;000000000001&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0x0001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;...&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;111111111111&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0x0FFF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;三页大小--页框大小--页表项数--物理内存块数&#34;&gt;三、页大小 &amp;amp; 页框大小 &amp;amp; 页表项数 &amp;amp; 物理内存块数&lt;/h2&gt;
&lt;p&gt;$$
\begin{array}{l}
物理内存块数 = \frac{物理内存(寻址范围)\equiv 2^{N}}{页大小}，其中 N = 地址总线条数
\end{array}
$$
$$
有：页大小 \equiv 页框大小，且：页表项数 \equiv物理内存块数
$$&lt;/p&gt;
&lt;h2 id=&#34;四页表项大小及其存储内容&#34;&gt;四、页表项大小及其存储内容&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个页表项的大小(即：占用二进制位数)，至少要能容纳&lt;code&gt;块号最大的物理内存块首地址的位数&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：32 位地址总线&lt;/p&gt;
&lt;p&gt;$$
\begin{array}{l}
寻址范围： 2 ^{32} = 4294967296_{Bytes} = 4G_{Bytes}
\end{array}
$$
$$
页面大小(即：页框大小) = 4096_{Bytes} = 4K_{Bytes}
$$
$$
则，页框数 = \frac{4G}{4K} = \frac{2 ^{32}}{2^{12}} = 2^{32-12} = 2^{20}
$$&lt;/p&gt;
&lt;p&gt;物理内存块号范围：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;BIN&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;HEX&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;00000000000000000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0x00000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;00000000000000000001&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0x00001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;...&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;11111111111111111111&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0xFFFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;即：页表项中指向物理内存块号部分需要 &lt;code&gt;20bits&lt;/code&gt;，而 &lt;code&gt;2Bytes = 2 * 8bits = 16bits&lt;/code&gt;，不够；至少需要 &lt;code&gt;3Bytes = 3 * 8bits = 24bits&lt;/code&gt;，就是说占 3 个字节浪费的 bit 最少。然而，需要额外考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页表项需要连续内存存储，但 3 不是 2 的整数次幂，按页面对其无法严密填满单个页面&lt;/li&gt;
&lt;li&gt;内存页除了地址，还有读写性质、运行级别等等属性需要占用 bit&lt;/li&gt;
&lt;li&gt;避免内存管理本身使用的内存过多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等因素，所以&lt;code&gt;一般页表项大小&lt;/code&gt;取 &lt;code&gt;4Bytes&lt;/code&gt; 共 &lt;code&gt;32bits&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;高 20 位(31-12)给了块号，低 12 位(11-0)被用来存放内存页属性，详见下图 PTE(Page-Table Entry)部分&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/os/memory/memory_paging/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;五线性地址-物理地址转换过程&#34;&gt;五、线性地址-&amp;gt;物理地址转换过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;进程访问某个逻辑地址时，MMU 将逻辑地址分为页号 Pn 和页内地址 offset&lt;/li&gt;
&lt;li&gt;页号大于页表长度，越界错误&lt;/li&gt;
&lt;li&gt;页表项的地址 PTE = 页表起始地址 PTB + [页号 Pn * 表项大小 sizeof(PTE)]，从而得到对应的物理块号 Pb&lt;/li&gt;
&lt;li&gt;页和物理块的大小是一致的，所以：页内地址 = 块内地址&lt;/li&gt;
&lt;li&gt;最终的物理地址 PA = 物理块号 Pb * 页大小 sizeof(Page) + 页内地址 offset&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;本文采用 &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;知识共享署名许可协议（CC-BY 4.0）&lt;/a&gt;进行许可，转载注明来源即可。如有错误劳烦评论或邮件指出。&lt;img src=&#34;/images/site/CC-BY_icon.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;

        
      </description>
    </item>
    
    <item>
      <title>The GNU ed line editor [译]</title>
      <link>/post/trans/cs/editor/ed/</link>
      <pubDate>Fri, 12 Jun 2020 17:20:59 +0800</pubDate>
      
      <guid>/post/trans/cs/editor/ed/</guid>
      <description>
        
          &lt;p&gt;GNU ed 手册 (version 1.16, 2020-02-20).&lt;/p&gt;
&lt;p&gt;原址：&lt;a href=&#34;https://www.gnu.org/software/ed/manual/ed_manual.html&#34;&gt;https://www.gnu.org/software/ed/manual/ed_manual.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概览: ed 概览&lt;/li&gt;
&lt;li&gt;行编辑简介: GNU ed 起步&lt;/li&gt;
&lt;li&gt;调用 ed: 命令行界面&lt;/li&gt;
&lt;li&gt;行寻址: 在缓冲区中指定行/范围&lt;/li&gt;
&lt;li&gt;正则表达式: 文本选择模式&lt;/li&gt;
&lt;li&gt;命令: GNU ed 识别命令&lt;/li&gt;
&lt;li&gt;限制: GNU ed 的固有局限性&lt;/li&gt;
&lt;li&gt;诊断: GNU ed 错误处理&lt;/li&gt;
&lt;li&gt;问题: 报告 bugs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/ed/manual/ed_manual.html#GNU-Free-Documentation-License&#34;&gt;GNU Free Documentation License&lt;/a&gt;: How you can copy and share this manual&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Copyright © 1993, 1994, 2006-2020 Free Software Foundation, Inc.
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-概览&#34;&gt;1 概览&lt;/h2&gt;
&lt;p&gt;GNU &lt;strong&gt;ed&lt;/strong&gt; 是一种基于行的文本编辑器。它以交互方式或通过 Shell 脚本对文本文件进行：创建、显示、修改等操作。&lt;strong&gt;ed&lt;/strong&gt; 的受限版本(&lt;strong&gt;red&lt;/strong&gt;)只能编辑当前目录中的文件且无法执行 Shell 命令。&lt;strong&gt;ed&lt;/strong&gt; 是 Unix 中广泛使用的原始编辑器，因此某种意义上可以说：&lt;strong&gt;ed&lt;/strong&gt; 是事实上的&amp;quot;标准&amp;quot;。但是，在大多数情况下，它已被 GNU &lt;strong&gt;Emacs&lt;/strong&gt; 或 GNU &lt;strong&gt;Moe&lt;/strong&gt; 等全屏编辑器取代。&lt;/p&gt;
&lt;p&gt;GNU &lt;strong&gt;ed&lt;/strong&gt; 基于 Brian W. Kernighan 和  P. J. Plauger 在1981年 Addison-Wesley 的著作&amp;quot;Software Tools in Pascal&amp;quot;中描述的编辑器算法。&lt;/p&gt;
&lt;p&gt;如果在调用 &lt;strong&gt;ed&lt;/strong&gt; 时附加 &lt;em&gt;file&lt;/em&gt; 参数，则会将对应文件的副本读入编辑器的缓冲区。对副本进行更改，不影响文件本身。退出时，所有未用&lt;code&gt;&#39;w&#39;&lt;/code&gt;命令&amp;quot;明确保存&amp;quot;的变更将被丢弃。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ed&lt;/strong&gt; 有两种不同的模式：&lt;strong&gt;command&lt;/strong&gt; 命令模式和 &lt;strong&gt;input&lt;/strong&gt; 输入模式。刚启动时，&lt;strong&gt;ed&lt;/strong&gt; 处于命令模式。在这种模式下，从标准输入读取命令，并执行命令以操作编辑器缓冲区的内容。典型的命令可能如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;,s/old/new/g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;em&gt;new&lt;/em&gt; 替换字符串 &lt;em&gt;old&lt;/em&gt; 的&lt;strong&gt;所有&lt;/strong&gt;出现。&lt;/p&gt;
&lt;p&gt;当输入诸如：&lt;code&gt;&#39;a&#39;&lt;/code&gt;追加，&lt;code&gt;&#39;i&#39;&lt;/code&gt;插入，&lt;code&gt;&#39;c&#39;&lt;/code&gt;修改等命令时，就进入输入模式。这是将文本添加到文件的主要方法。在这种模式下，命令将不可用。此时的标准输入直接写入编辑器缓冲区。一个行由结尾的&lt;code&gt;&amp;lt;换行符&amp;gt;&lt;/code&gt;字符表示。输入模式可通过在整行中输入一个单独的句点&lt;code&gt;&#39;.&#39;&lt;/code&gt;结束。&lt;/p&gt;
&lt;p&gt;所有 &lt;strong&gt;ed&lt;/strong&gt; 命令都应用于整行或行的范围。例如：&lt;code&gt;&#39;d&#39;&lt;/code&gt;删除行；&lt;code&gt;&#39;m&#39;&lt;/code&gt;移动行……等等。如上例所示，可以通过替换命令仅修改行的一部分内容。但是，&lt;code&gt;&#39;s&#39;&lt;/code&gt;命令依然是整行上执行的。&lt;/p&gt;
&lt;p&gt;一般的，&lt;strong&gt;ed&lt;/strong&gt; 命令有如下组成部分：零个或多个行地址，后跟单个字符命令和可能的附加参数；即，命令结构为：
$$
[address[,address]]command[parameters]
$$
地址标识出行或行的范围。如果给出的地址少于命令接受的地址，则使用默认地址。&lt;/p&gt;
&lt;h2 id=&#34;2-行编辑简介&#34;&gt;2 行编辑简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ed&lt;/strong&gt; 的作者是 Ken Thompson 和 Dennis Ritchie，该工具伴随 Unix 操作系统一起创建。Thompson 和 Ritchie 已经在其中添加了模式匹配功能(请参阅&lt;a href=&#34;https://www.gnu.org/software/ed/manual/ed_manual.html#Regular-expressions&#34;&gt;正则表达式&lt;/a&gt;)，这是对其前身——更复杂、可编程的 &lt;strong&gt;QED&lt;/strong&gt; 的改进。&lt;/p&gt;
&lt;p&gt;就本教程而言，建议具备 Unix Shell 和 sh 的基本知识，因为 &lt;strong&gt;ed&lt;/strong&gt; 与他们紧密关联。(有关 bash 的详细信息，请参见 &lt;a href=&#34;http://www.gnu.org/software/bash/manual/&#34;&gt;bash 手册&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;行编辑器和全屏编辑器的主要区别在于：全屏编辑器可对用户命令做出即时反馈，而行编辑器有时要在输入上花较长时间才能看到效果。显然，即时反馈的优势在于，如果犯了错，可以在产生更严重的破坏之前及时纠正。在 &lt;strong&gt;ed&lt;/strong&gt; 中编辑则需要更多的策略和前瞻性；但是一旦熟练掌握了其应用，效率收益颇高。&lt;/p&gt;
&lt;p&gt;许多 &lt;strong&gt;ed&lt;/strong&gt; 命令语法与其他 Unix 实用程序也通用。&lt;/p&gt;
&lt;p&gt;与 Shell 程序一样，&lt;code&gt;&amp;lt;RETURN&amp;gt;&lt;/code&gt;(回车键)输入一行。因此，当我们在 &lt;strong&gt;ed&lt;/strong&gt; 中说&amp;quot;输入&amp;quot;命令或某些文本时，暗示&lt;code&gt;&amp;lt;RETURN&amp;gt;&lt;/code&gt;在每一行的末尾。在键入&lt;code&gt;&amp;lt;RETURN&amp;gt;&lt;/code&gt;之前，可以通过键入&lt;code&gt;&amp;lt;BACKSPACE&amp;gt;&lt;/code&gt;来向后擦除字符，或者键入&lt;code&gt;&amp;lt;CONTROL&amp;gt;-u&lt;/code&gt;(即，按住CONTROL 键并键入 u)以擦除整行来对行进行校正。&lt;/p&gt;
&lt;p&gt;刚打开 &lt;strong&gt;ed&lt;/strong&gt; 的时候，它会等待我们的指令，但不像 Shell 那样有提示符。因此，我们从让 &lt;strong&gt;ed&lt;/strong&gt; 显示提示符开始，使用&lt;code&gt;&amp;lt;P&amp;gt;&lt;/code&gt;提示符)命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ ed 
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;P 
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，&lt;strong&gt;ed&lt;/strong&gt; 使用星号&lt;code&gt;*&lt;/code&gt;作为命令提示符，以避免与 Shell 命令提示符&lt;code&gt;$&lt;/code&gt;混淆。&lt;/p&gt;
&lt;p&gt;我们可以通过&lt;code&gt;!&lt;/code&gt;前缀来运行 Unix Shell 内部的命令(&lt;code&gt;!&lt;/code&gt;感叹号，又名 &amp;quot;bang&amp;quot;)。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;*!date
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;Mon Jun &lt;span class=&#34;m&#34;&gt;26&lt;/span&gt; 10:08:41 PDT &lt;span class=&#34;m&#34;&gt;2006&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;!
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;*!for s in hello world&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;hello
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;world
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;!
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到目前为止，这与在 Unix Shell 中运行命令没有什么不同。现在，假设我们要编辑命令的输出或将其保存到文件中。首先，我们必须将命令输出捕获到一个称为缓冲区的临时位置，以便 &lt;strong&gt;ed&lt;/strong&gt; 可以访问。执行 &lt;strong&gt;ed&lt;/strong&gt; 的&lt;code&gt;&amp;lt;r&amp;gt;&lt;/code&gt;命令(助记符：read)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;*r !cal -m
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;137&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;strong&gt;ed&lt;/strong&gt; 告诉我们它将 137 个字符读入编辑器缓冲区，即：cal 命令的输出，该命令打印一个简单的 ASCII 日历。要显示缓冲区内容，我们发出&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;(print)命令(不要与大写的&lt;code&gt;&amp;lt;P&amp;gt;&lt;/code&gt;提示命令混淆！)。为了指示应打印的缓冲区行范围，我们在命令前加上单独的&lt;code&gt;,&lt;/code&gt;(逗号)，这是“整个缓冲区”的简写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;*,p
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;      June &lt;span class=&#34;m&#34;&gt;2006&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;Mo Tu We Th Fr Sa Su
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;          &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;29&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，让我们将缓冲区内容写入名为 junk 的文件，使用&lt;code&gt;&amp;lt;w&amp;gt;&lt;/code&gt;(write)命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;*w junk
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;137&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;毋须多言，时常将缓冲区内容写入文件是一个好习惯，因为当我们退出时，对缓冲区的未保存变更将丢失。&lt;/p&gt;
&lt;p&gt;下面的示例演示了 &lt;strong&gt;ed&lt;/strong&gt; 行编辑的一些基本概念。我们首先创建一个文件 sonnet，引用莎士比亚的十四行诗。与 Shell 一样，所有输入必须后跟一个&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;字符。命令模式中以 # 开头的命令作为注释，将被忽略。输入模式中 # 开头的行是正文。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ ed
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# The &amp;#39;a&amp;#39; command is for appending text to the editor buffer.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;a
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;No more be grieved at that which thou hast &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;Roses have thorns, and filvers foutians mud.
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;Clouds and eclipses stain both moon and sun,
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;And loathsome canker lives in sweetest bud.
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Entering a single period on a line returns ed to command mode.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Now write the buffer to the file &amp;#39;sonnet&amp;#39; and quit:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;w sonnet
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;183&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ed reports the number of characters written.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;q
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;$ ls -l
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;total &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;-rw-rw-r--    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; alm           &lt;span class=&#34;m&#34;&gt;183&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; 01:16 sonnet
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在下一个示例中，我们修正文件中的一些拼写错误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ ed sonnet
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;183&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Begin by printing the buffer to the terminal with the &amp;#39;p&amp;#39; command.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# The &amp;#39;,&amp;#39; means &amp;#34;all lines&amp;#34;.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;,p
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;No more be grieved at that which thou hast &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;Roses have thorns, and filvers foutians mud.
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;Clouds and eclipses stain both moon and sun,
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;And loathsome canker lives in sweetest bud.
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Select line 2 for editing.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;Roses have thorns, and filvers foutians mud.
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Use the substitute command, &amp;#39;s&amp;#39;, to replace &amp;#39;filvers&amp;#39; with &amp;#39;silver&amp;#39;,&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# and print the result.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;s/filvers/silver/p
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;Roses have thorns, and silver foutians mud.
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# And correct the spelling of &amp;#39;fountains&amp;#39;.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;s/utia/untai/p
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;Roses have thorns, and silver fountains mud.
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;w sonnet
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;183&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;q
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;ed&lt;/strong&gt; 是基于行的，我们必须告诉它要编辑哪一行或某些范围的行。在上面的示例中，通过指定行号或缓冲区中的序列来执行此操作。另外，我们也可以指定行中的唯一的字符串，例如&lt;code&gt;&#39;/filvers/&#39;&lt;/code&gt;，其中&lt;code&gt;/&lt;/code&gt;界定了要查找的字符串。随后的命令仅影响选定的行，或者说：当前行。查找到匹配后，替换命令将该行的匹配部分进行替换，语法为&lt;code&gt;&#39;s/old/new/&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;虽然 &lt;strong&gt;ed&lt;/strong&gt; 每行仅接受一个命令，打印命令&lt;code&gt;&#39;p&#39;&lt;/code&gt;是一个例外，可以附加到大多数命令的末尾。&lt;/p&gt;
&lt;p&gt;在下一个示例中，我们把标题添加到文件中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ ed sonnet
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;183&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;a
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;Sonnet &lt;span class=&#34;c1&#34;&gt;#50&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;,p
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;No more be grieved at that which thou hast &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;Roses have thorns, and silver fountains mud.
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;Clouds and eclipses stain both moon and sun,
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;And loathsome canker lives in sweetest bud.
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;Sonnet &lt;span class=&#34;c1&#34;&gt;#50&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# The title got appended to the end; we should have used &amp;#39;0a&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# to append &amp;#34;before the first line&amp;#34;.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Move the title to its proper place.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;5m0p
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;Sonnet &lt;span class=&#34;c1&#34;&gt;#50&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# The title is now the first line, and the current address has been&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# set to the address of this line as well.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;,p
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;Sonnet &lt;span class=&#34;c1&#34;&gt;#50&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;No more be grieved at that which thou hast &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;Roses have thorns, and silver fountains mud.
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;Clouds and eclipses stain both moon and sun,
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;And loathsome canker lives in sweetest bud.
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;wq sonnet
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;195&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当用 &lt;strong&gt;ed&lt;/strong&gt; 打开一个文件时，当前地址最初设置为该文件最后一行的地址。类似的，移动命令&lt;code&gt;&#39;m&#39;&lt;/code&gt;将当前地址设置为最后移动的行的目的地址。&lt;/p&gt;
&lt;p&gt;相关程序或例程是 vi(1), sed(1), regex(3), sh(1)。相关文件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unix User&#39;s Manual Supplementary Documents：12-13&lt;/li&gt;
&lt;li&gt;BW Kernighan 和 PJ Plauger：&amp;quot;Software Tools in Pascal&amp;quot;，Addison-Wesley，1981&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-调用-ed&#34;&gt;3 调用 ed&lt;/h2&gt;
&lt;p&gt;启动 &lt;strong&gt;ed&lt;/strong&gt; 的命令格式为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;ed &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# or&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;red &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;file&lt;/em&gt; 指明被读取的文件的名字。如果文件名以&lt;code&gt;!&lt;/code&gt;开头，将被解释为 Shell 命令。这种情况下 &lt;strong&gt;ed&lt;/strong&gt; 读取的是&lt;code&gt;sh&lt;/code&gt;执行 &lt;em&gt;file&lt;/em&gt; 的输出结果。要读取文件名以&lt;code&gt;!&lt;/code&gt;开头的文件的内容，需要在&lt;code&gt;!&lt;/code&gt;前加上&lt;code&gt;\&lt;/code&gt;转义。默认的文件名被设置为 &lt;em&gt;file&lt;/em&gt;，除非前缀是&lt;code&gt;!&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ed&lt;/strong&gt; 支持如下选项:&lt;/p&gt;
&lt;p&gt;-h&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;--help
Print an informative help message describing the options and exit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-V&lt;br&gt;
--version&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Print the version number of ed on the standard output and exit.
This version number should be included in all bug reports.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-G&lt;br&gt;
--traditional&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Forces backwards compatibility. This affects the behavior of the ed commands &#39;G&#39;, &#39;V&#39;, &#39;f&#39;, &#39;l&#39;, &#39;m&#39;, &#39;t&#39; and &#39;!!&#39;.
If the default behavior of these commands does not seem familiar, then try invoking ed with this switch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-l&lt;br&gt;
--loose-exit-status&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&#39;t exit with bad status if a command happens to &amp;quot;fail&amp;quot; (for example if a substitution command finds nothing to replace).
This can be useful when ed is invoked as the editor for crontab.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-p string&lt;br&gt;
--prompt=string&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specifies a command prompt string and turns prompting on. Showing the prompt string may be toggled on and off with the &#39;P&#39; command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-r&lt;br&gt;
--restricted&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Run in restricted mode. This mode disables editing of files out of the current directory and execution of shell commands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-s&lt;br&gt;
--quiet&lt;br&gt;
--silent&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppresses diagnostics, the printing of byte counts by &#39;e&#39;, &#39;E&#39;, &#39;r&#39; and &#39;w&#39; commands,
and the &#39;!&#39; prompt after a &#39;!&#39; command. This option may be useful if ed&#39;s standard input is from a script.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-v&lt;br&gt;
--verbose&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Verbose mode; prints error explanations. This may be toggled on and off with the &#39;H&#39; command.
Exit status: 0 if no errors occurred; otherwise &amp;gt;0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-行寻址&#34;&gt;4 行寻址&lt;/h2&gt;
&lt;p&gt;地址表示某行在缓冲区中的行号。&lt;strong&gt;ed&lt;/strong&gt; 维护着一个当前地址，当没有明确指定地址时，该地址作为默认地址提供给命令。文件读取完毕，当前地址被设置为该文件的最后一行。一般情况下，当前地址总是被设置为一个命令所影响的最后一行的地址。&lt;/p&gt;
&lt;p&gt;一个特例是行号为 0 的行。意为&amp;quot;缓冲区的开头&amp;quot;，在任何有意义的地方都有效。&lt;/p&gt;
&lt;p&gt;地址范围由两个地址组成，其间用(&lt;code&gt;,&lt;/code&gt;)或(&lt;code&gt;;&lt;/code&gt;)分隔。在(&lt;code&gt;;&lt;/code&gt;)分隔的范围中，第二个地址被计算前，当前地址(&lt;code&gt;.&lt;/code&gt;)被设为第一个地址；当第二个地址包含正则表达式时，这个特性可被用来设置搜索的开始行。第一个地址的值不能超过第二个地址。&lt;/p&gt;
&lt;p&gt;分隔符两边的地址都可以被省略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若只提供第一个地址，则第二个地址与第一个地址相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果只提供第二个地址，则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以(&lt;code&gt;,&lt;/code&gt;)分隔的范围是：&lt;code&gt;1,addr&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;而由(&lt;code&gt;;&lt;/code&gt;)分隔的范围是：&lt;code&gt;.,addr&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果给出 n 个元组的地址，其中 n &amp;gt; 2，则相应的范围由 n 个元组中的最后两个地址确定(1,2,3,&lt;code&gt;4,5&lt;/code&gt;)。如果只需要一个地址，则使用最后一个地址。将任意数量的地址分配给需要零个地址的命令将引发错误。&lt;/p&gt;
&lt;p&gt;行地址的构造如下：&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current line (address) in the buffer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The last line in the buffer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;n&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The nth line in the buffer, where n is a number in the range &#39;0,$&#39;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;+n&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The nth next line, where n is a non-negative number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-n&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The nth previous line, where n is a non-negative number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;+&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The next line. This is equivalent to &#39;+1&#39; and may be repeated with cumulative effect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The previous line. This is equivalent to &#39;-1&#39; and may be repeated with cumulative effect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first through last lines in the buffer. This is equivalent to the address range &#39;1,$&#39;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current through last lines in the buffer. This is equivalent to the address range &#39;.;$&#39;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;/re/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The next line containing the regular expression re.
The search wraps to the beginning of the buffer and continues down to the current line, if necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;?re?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The previous line containing the regular expression re.
The search wraps to the end of the buffer and continues up to the current line, if necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&#39;x&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The apostrophe-x character pair addresses the line previously marked by a &#39;k&#39; (mark) command,
where &#39;x&#39; is a lower case letter from the portable character set &#39;[a-z]&#39;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;5-正则表达式&#34;&gt;5 正则表达式&lt;/h2&gt;
&lt;p&gt;正则表达式是用于选择文本的模式。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;g/string/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印所有包含 &lt;em&gt;string&lt;/em&gt; 的行。正则表达式也可以用在&lt;code&gt;&#39;s&#39;&lt;/code&gt;替换命令中的匹配文本部分。&lt;/p&gt;
&lt;p&gt;除了字符串字面量外，正则表达式还可以表示字符类，表示&amp;quot;由相应的正则表达式匹配&amp;quot;的字符串。如果正则表达式可以匹配一行中的多个字符串，则最左边的匹配项就是被选则的匹配项。如果正则表达式允许可变数量的匹配字符，则匹配从该位置开始的最长序列。&lt;/p&gt;
&lt;p&gt;一个空的正则表达式(&lt;code&gt;//&lt;/code&gt;)等价于上一个匹配的表达式。&lt;/p&gt;
&lt;p&gt;以下符号用来构造正则表达式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;c
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;Any character c not listed below, including &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; and &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, matches itself.
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\c&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;Any backslash-escaped character c, other than &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; and &lt;span class=&#34;s1&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;, matches itself.
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;Matches any single character.
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;char-class&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;Matches any single character in char-class. 
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;To include a &lt;span class=&#34;s1&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt; in char-class, it must be the first character. 
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;A range of characters may be specified by separating the end characters of the range with a &lt;span class=&#34;s1&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;e.g., &lt;span class=&#34;s1&#34;&gt;&amp;#39;a-z&amp;#39;&lt;/span&gt; specifies the lower &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; characters. 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;The following literal expressions can also be used in char-class to specify sets of characters:
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:alnum:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:cntrl:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:lower:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:space:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:alpha:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:digit:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:print:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:upper:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:blank:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:graph:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:punct:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:xdigit:&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;If &lt;span class=&#34;s1&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; appears as the first or last character of char-class, &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; it matches itself. 
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;All other characters in char-class match themselves.
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;Patterns in char-class of the form:
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.col-elm.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;[=&lt;/span&gt;col-elm&lt;span class=&#34;o&#34;&gt;=]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;where col-elm is a collating element are interpreted according to &lt;span class=&#34;s1&#34;&gt;&amp;#39;locale (5)&amp;#39;&lt;/span&gt;. 
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;See &lt;span class=&#34;s1&#34;&gt;&amp;#39;regex (7)&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; an explanation of these constructs.
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;^char-class&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;Matches any single character, other than newline, not in char-class. char-class is defined as above.
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;^
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;If &lt;span class=&#34;s1&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; is the first character of a regular expression, &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; it anchors the regular expression to the beginning of a line. 
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;Otherwise, it matches itself.
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;$
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;If &lt;span class=&#34;s1&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt; is the last character of a regular expression, it anchors the regular expression to the end of a line. 
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;Otherwise, it matches itself.
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt;re&lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;Defines a &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;possibly null&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; subexpression re. Subexpressions may be nested. 
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;A subsequent backreference of the form &lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;, where n is a number in the range &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1,9&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, 
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;expands to the text matched by the nth subexpression. 
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;For example, the regular expression &lt;span class=&#34;s1&#34;&gt;&amp;#39;\(a.c\)\1&amp;#39;&lt;/span&gt; matches the string &lt;span class=&#34;s1&#34;&gt;&amp;#39;abcabc&amp;#39;&lt;/span&gt;, 
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;but not &lt;span class=&#34;s1&#34;&gt;&amp;#39;abcadc&amp;#39;&lt;/span&gt;. Subexpressions are ordered relative to their left delimiter.
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;*
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;Matches zero or more repetitions of the regular expression immediately preceding it. 
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;The regular expression can be either a single character regular expression or a subexpression. 
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;If &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; is the first character of a regular expression or subexpression, &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; it matches itself. 
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;The &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; operator sometimes yields unexpected results. 
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;For example, the regular expression &lt;span class=&#34;s1&#34;&gt;&amp;#39;b*&amp;#39;&lt;/span&gt; matches the beginning of the string &lt;span class=&#34;s1&#34;&gt;&amp;#39;abbb&amp;#39;&lt;/span&gt;, 
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;as opposed to the substring &lt;span class=&#34;s1&#34;&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;, since a null match is the only left-most match.
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\{&lt;/span&gt;n,m&lt;span class=&#34;se&#34;&gt;\}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\{&lt;/span&gt;n,&lt;span class=&#34;se&#34;&gt;\}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\{&lt;/span&gt;n&lt;span class=&#34;se&#34;&gt;\}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;Matches the single character regular expression or subexpression immediately preceding it at least n and at most m times. 
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;If m is omitted, &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; it matches at least n times. 
&lt;span class=&#34;ln&#34;&gt;59&lt;/span&gt;If the comma is also omitted, &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; it matches exactly n times. 
&lt;span class=&#34;ln&#34;&gt;60&lt;/span&gt;If any of these forms occurs first in a regular expression or subexpression, 
&lt;span class=&#34;ln&#34;&gt;61&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; it is interpreted literally &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;i.e., the regular expression &lt;span class=&#34;s1&#34;&gt;&amp;#39;\{2\}&amp;#39;&lt;/span&gt; matches the string &lt;span class=&#34;s1&#34;&gt;&amp;#39;{2}&amp;#39;&lt;/span&gt;, and so on&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt;62&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;lt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;65&lt;/span&gt;Anchors the single character regular expression or subexpression immediately following it 
&lt;span class=&#34;ln&#34;&gt;66&lt;/span&gt;to the beginning &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;in the &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; of &lt;span class=&#34;s1&#34;&gt;&amp;#39;\&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; or ending &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;in the &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; of &lt;span class=&#34;s1&#34;&gt;&amp;#39;\&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; of a word, 
&lt;span class=&#34;ln&#34;&gt;67&lt;/span&gt;i.e., in ASCII, a maximal string of alphanumeric characters, including the underscore &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;_&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt;68&lt;/span&gt;The following extended regular expression operators are preceded by a backslash &lt;span class=&#34;s1&#34;&gt;&amp;#39;\&amp;#39;&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;69&lt;/span&gt;to distinguish them from traditional ed syntax. 
&lt;span class=&#34;ln&#34;&gt;70&lt;/span&gt;They may be unavailable depending on the particular regex implementation in your system.
&lt;span class=&#34;ln&#34;&gt;71&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;72&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\`&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;73&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;74&lt;/span&gt;Unconditionally matches the beginning &lt;span class=&#34;s1&#34;&gt;&amp;#39;\`&amp;#39;&lt;/span&gt; or ending &lt;span class=&#34;s1&#34;&gt;&amp;#39;\&amp;#39;&amp;#39; of a line.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;75&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;76&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;\?
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;77&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Optionally matches the single character regular expression or subexpression immediately preceding it. 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;For example, the regular expression &amp;#39;&lt;/span&gt;a&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bd&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\?&lt;/span&gt;c&lt;span class=&#34;s1&#34;&gt;&amp;#39; matches the strings &amp;#39;&lt;/span&gt;abc&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;adc&lt;span class=&#34;s1&#34;&gt;&amp;#39; and &amp;#39;&lt;/span&gt;ac&lt;span class=&#34;s1&#34;&gt;&amp;#39;. 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;79&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;If &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\?&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; occurs at the beginning of a regular expressions or subexpression, then it matches a literal &amp;#39;&lt;/span&gt;?&lt;span class=&#34;s1&#34;&gt;&amp;#39;.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;81&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;\+
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;82&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Matches the single character regular expression or subexpression immediately preceding it one or more times. 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;So the regular expression &amp;#39;&lt;/span&gt;a&lt;span class=&#34;se&#34;&gt;\+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; is shorthand for &amp;#39;&lt;/span&gt;aa*&lt;span class=&#34;s1&#34;&gt;&amp;#39;. If &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; occurs at the beginning of 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;84&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;a regular expression or subexpression, then it matches a literal &amp;#39;&lt;/span&gt;+&lt;span class=&#34;s1&#34;&gt;&amp;#39;.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;86&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;\b
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;87&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Matches the beginning or ending (null string) of a word. 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Thus the regular expression &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\b&lt;/span&gt;hello&lt;span class=&#34;se&#34;&gt;\b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; is equivalent to &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;lt;&lt;/span&gt;hello&lt;span class=&#34;se&#34;&gt;\&amp;gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;. 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;89&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;However, &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\b\b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; is a valid regular expression whereas &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;lt;\&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; is not.
&lt;span class=&#34;ln&#34;&gt;90&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;91&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\B&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;92&lt;/span&gt;Matches &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;a null string&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; inside a word.
&lt;span class=&#34;ln&#34;&gt;93&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;94&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\w&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;95&lt;/span&gt;Matches any character in a word.
&lt;span class=&#34;ln&#34;&gt;96&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\W&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;98&lt;/span&gt;Matches any character not in a word.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6-命令&#34;&gt;6 命令&lt;/h2&gt;
&lt;p&gt;所有的 &lt;strong&gt;ed&lt;/strong&gt; 命令都是单个字符。当然，某些命令需要额外的参数。如果命令的参数跨越多行，则除最后一行外，每行都必须以反斜杠&lt;code&gt;\&lt;/code&gt;结尾 。&lt;/p&gt;
&lt;p&gt;通常，每行最多允许一个命令。但是，大多数命令都接受打印后缀，即&lt;code&gt;&#39;p&#39;&lt;/code&gt;(打印)，&lt;code&gt;&#39;l&#39;&lt;/code&gt;(列表)或&lt;code&gt;&#39;n&#39;&lt;/code&gt;(枚举)，以打印受命令影响的最后一行。提供多个打印后缀并不轻便，但是 &lt;strong&gt;ed&lt;/strong&gt; 允许非重复打印后缀的任意组合，并结合其效果。如果给出了任何打印后缀，则必须紧随命令之后。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;e&#39;&lt;/code&gt;, &lt;code&gt;&#39;E&#39;&lt;/code&gt;, &lt;code&gt;&#39;f&#39;&lt;/code&gt;, &lt;code&gt;&#39;r&#39;&lt;/code&gt; 和&lt;code&gt;&#39;w&#39;&lt;/code&gt; 这些命令接收可选的 &lt;em&gt;file&lt;/em&gt; 参数，参数与命令之间用一个或多个空格分隔。&lt;/p&gt;
&lt;p&gt;中断(一般为&lt;code&gt;&amp;lt;Control-C&amp;gt;&lt;/code&gt;)可以中止当前命令并使编辑器返回命令模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ed&lt;/strong&gt; 识别以下命令：默认地址与命令放在一起显示，若未指定地址则在括号中给出地址范围。&lt;/p&gt;
&lt;p&gt;(.)a&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在地址标明的行之后将文本追加到缓冲区。地址 0(零) 对该命令有效——它将输入的文本放在缓冲区的开头。命令之后进入输入模式以输入文字。当前地址设置为最后输入的行的地址，否则，设置为地址标明的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)c&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;改变缓冲区中的行。地址标明的一或多行从缓冲区中被删除，命令后进入输入模式。新输入的文本在所有被删除的行所在的位置插入。当前地址设置为最后输入的行的地址，否则，设置为删除对应行后的地址。如果被删除的行原本就在缓冲区末尾，当前地址被设置为新的最后一行；如果缓冲区中已经没有行，则当前地址被设置为 0。被删除的行被复制到剪切缓冲区。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)d&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从缓冲区中删除地址标识的行。当前地址被设置为删除对应行后的地址；如果被删除的行原本就在缓冲区末尾，当前地址被设置为新的最后一行；如果缓冲区中已经没有行，则当前地址被设置为 0。被删除的行被复制到剪切缓冲区。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;e &lt;em&gt;file&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编辑指定文件，并设置默认文件名。若 &lt;em&gt;file&lt;/em&gt; 未指定，则使用默认文件名。缓冲区中的所有行在新文件读取之前被删除。当前地址被设置为缓冲区中的最后一行。&lt;/p&gt;
&lt;p&gt;如果 &lt;em&gt;file&lt;/em&gt; 以&lt;code&gt;!&lt;/code&gt;为前缀，则被解释为 Shell 命令，并将该命令的输出读入到缓冲区。这种情况下默认文件名无变化。&lt;/p&gt;
&lt;p&gt;若自上次执行&lt;code&gt;&#39;w&#39;&lt;/code&gt;命令将缓冲区内容写到文件之后，缓冲区中有任何改变，则该命令打印一个警告。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无条件的打开另一个文件。与&lt;code&gt;&#39;e&#39;&lt;/code&gt;命令类似，但是丢弃未保存的改变而无任何警告。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;f file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设置默认文件名为：&lt;em&gt;file&lt;/em&gt;。如果未指定 &lt;em&gt;file&lt;/em&gt;，则打印未转义的默认文件名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1,$)g/re/command-list&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全局命令。分两步实施。首先，与&lt;code&gt;re&lt;/code&gt;匹配的所有行被标记。然后，从头至尾遍历文件，命令列表里的每个命令都会逐个实施到每个标记的行上，当前地址也随着逐行遍历而改变。实施过命令的行被取消标记。当前地址的最终值，被设置为命令列表中最后一条命令影响的最后一行。如果没有匹配的行，当前地址不变。&lt;/p&gt;
&lt;p&gt;命令列表的第一个命令必须于&lt;code&gt;&#39;g&#39;&lt;/code&gt;在同一行。其他命令必须各自占一行。多行命令中除了最后一行，其他行必须以反斜杠&lt;code&gt;\&lt;/code&gt;结尾。除了&lt;code&gt;&#39;g&#39;&lt;/code&gt;,&lt;code&gt;&#39;G&#39;&lt;/code&gt;,&lt;code&gt;&#39;v&#39;&lt;/code&gt;,&lt;code&gt;&#39;V&#39;&lt;/code&gt;，其他命令都可以出现在命令列表中。&lt;code&gt;&#39;.&#39;&lt;/code&gt;字符结束&lt;code&gt;&#39;a&#39;&lt;/code&gt;,&lt;code&gt;&#39;c&#39;&lt;/code&gt;,&lt;code&gt;&#39;i&#39;&lt;/code&gt;命令的输入模式，如果&lt;code&gt;&#39;.&#39;&lt;/code&gt;在最后一行则可以被省略。默认情况下，命令列表中的单独&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;等价于&lt;code&gt;&#39;p&#39;&lt;/code&gt;命令。如果 &lt;strong&gt;ed&lt;/strong&gt; 启动时带了&lt;code&gt;-G&lt;/code&gt;参数，则命令列表中的&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;等价于&lt;code&gt;&#39;.+1p&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1,$)G/re/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;交互式全局命令。交互式的编辑与&lt;code&gt;re&lt;/code&gt;匹配的行。首先打印匹配的行，当前地址设置为该行，然后提示用户输入命令列表。当前地址的最终值为最后一条命令影响的行。如果没有匹配的行，当前地址不变。&lt;/p&gt;
&lt;p&gt;命令列表的格式与&lt;code&gt;&#39;g&#39;&lt;/code&gt;命令相同。单独的&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;相当于不执行任何命令。单独的&lt;code&gt;&#39;&amp;amp;&#39;&lt;/code&gt;表示重复上一个非空的命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;h&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;帮助。打印上一个错误的解释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;H&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;错误解释的开关。默认情况下，不打印。建议在执行 &lt;strong&gt;ed&lt;/strong&gt; 脚本之前开启以便调试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.)i&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在地址标识的行之前插入文本。地址 0 对此命令有效，这将导致文本被插入到缓冲区的开头。命令后进入输入模式。当前地址设置为最后输入的行的地址，否则，设置为地址标识的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.+1)j&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;合并地址标识的行，用单一行替换所有被合并的行。如果只给出了一个地址，命令什么也不做。如果有若干行被合并，则被替换的所有行都被复制到剪切缓冲区，且当前地址被设置为合并后的行。否则，当前地址不变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.)kx&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用小写字母&lt;code&gt;x&lt;/code&gt;标记一行。被标记的行可以由对应的小写字母寻址(比如&lt;code&gt;&#39;x&lt;/code&gt;)。除非该行被删除或修改，否则标记不会消失。当前地址无变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)l&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;列表。直白的打印地址标识的行。每行的结尾由&lt;code&gt;$&lt;/code&gt;标记，而行内的所有&lt;code&gt;$&lt;/code&gt;字符都会添加前导的反斜杠&lt;code&gt;\&lt;/code&gt;。特殊字符按照转义序列打印。当前地址被设置为最后打印的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)m(.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;移动缓冲区中的行。地址标识的行被移动到&lt;code&gt;&#39;m&#39;&lt;/code&gt;命令右边指定的行的后面。地址 0 对此命令有效，意为将行移动到缓冲区开头。如果目标地址包含在寻址行范围内则报错。当前地址被设置为被移动的最后一行的新地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)n&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;行号命令。打印地址标识的行，行号作为前导且用&lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt;与行文本隔开。当前地址设置为最后被打印的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)p&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印地址标识的行。当前地址设置为最后被打印的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;P&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令提示符开关。除非通过启动时的&lt;code&gt;&#39;-p&#39;&lt;/code&gt;参数指定提示符字符串，否则默认情况下不显示提示符。提示符默认字符为：星号(&lt;code&gt;&#39;*&#39;&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;q&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;退出 &lt;strong&gt;ed&lt;/strong&gt;。若自上次执行&lt;code&gt;&#39;w&#39;&lt;/code&gt;命令保存缓冲区到文件后，缓冲区中有任何改变则会打印警告信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Q&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无条件退出 &lt;strong&gt;ed&lt;/strong&gt;。与&lt;code&gt;&#39;q&#39;&lt;/code&gt;类似，但缓冲区中未保存的改变将丢失而不会提出警告。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;($)r file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读取指定文件的内容，追加到地址标识的行后面。如果 &lt;em&gt;file&lt;/em&gt; 未指定，则使用默认文件名。如果执行命令前没有默认文件名，则使用 &lt;em&gt;file&lt;/em&gt; 作为默认名。否则，默认文件名无变化。地址 0 对此命令有效。意为将读取到的内容放置在缓冲区开头。当前地址被设置为最后读取的行，否则设置为地址标识的行。&lt;/p&gt;
&lt;p&gt;如果 &lt;em&gt;file&lt;/em&gt; 以&lt;code&gt;!&lt;/code&gt;为前缀，则被解释为 Shell 命令，读取的是脚本执行后的输出。这种情况加默认文件名无变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)s/re/replacement/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;替换命令。地址标识范围内与&lt;code&gt;re&lt;/code&gt;匹配的部分将被&lt;code&gt;replacment&lt;/code&gt;替换。默认情况下，只有第一个匹配被替换。&lt;code&gt;&#39;s&#39;&lt;/code&gt;命令可以与后缀&lt;code&gt;&#39;g&#39;&lt;/code&gt;,&lt;code&gt;count&lt;/code&gt;,&lt;code&gt;&#39;l&#39;&lt;/code&gt;以及&lt;code&gt;&#39;p&#39;&lt;/code&gt;组合。如果使用了&lt;code&gt;&#39;g&#39;&lt;/code&gt;后缀，则所有匹配都会被替换。&lt;code&gt;count&lt;/code&gt;后缀(其中：count &amp;gt; 0)，表示只替换 count 个匹配。&lt;code&gt;&#39;g&#39;&lt;/code&gt;与&lt;code&gt;count&lt;/code&gt;不能同时使用。&lt;code&gt;&#39;l&#39;&lt;/code&gt;,&lt;code&gt;&#39;n&#39;&lt;/code&gt;和&lt;code&gt;&#39;p&#39;&lt;/code&gt;是常见的打印后缀。如果地址标识的行内没有任何替换操作则会报错。当前地址被设置为最后一个出现匹配的行。如果一行被拆分，则看做是每个新行上都发生了替换。若未发生替换，则当前地址不变。最后被修改的一行将被复制到剪切缓冲区。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;re&lt;/code&gt;和&lt;code&gt;replacement&lt;/code&gt;可以由除了&lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;之外的任何字符界定，&lt;code&gt;&#39;s&#39;&lt;/code&gt;命令格式使用的字符详见下文。如果尾部的界定符被省略，则相当于在最后一个受影响的行上执行&lt;code&gt;&#39;p&#39;&lt;/code&gt;命令。如果&lt;code&gt;&#39;s&#39;&lt;/code&gt;命令是&lt;code&gt;&#39;g&#39;&lt;/code&gt;或&lt;code&gt;&#39;v&#39;&lt;/code&gt;命令列表的一部分并且不是最后一条命令时，结尾的界定符&lt;code&gt;不能&lt;/code&gt;被省略，这是为了避免跟随后的转义新行混淆。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;replacement&lt;/code&gt;中未转义的&#39;&amp;amp;&#39;代表当前匹配的文本。字符序列&lt;code&gt;\m&lt;/code&gt;(其中 m 的区间[1,9])，被替换为第 m 个后向引用表达式。如果对应的后向引用不存在，&lt;code&gt;\m&lt;/code&gt;会被替换成空字符串。如果&lt;code&gt;replacement&lt;/code&gt;只包含单独的&lt;code&gt;&#39;%&#39;&lt;/code&gt;，则表示上一个替换命令使用的&lt;code&gt;replacement&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replacement&lt;/code&gt;中，一行可以拆分成多行，新拆分的行需要用&lt;code&gt;\&lt;/code&gt;转义。这些在&lt;code&gt;replacement&lt;/code&gt;中的&lt;code&gt;\&lt;/code&gt;将移除其后字符的特殊含义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)s&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重复上一个替换命令。这个格式的&lt;code&gt;&#39;s&#39;&lt;/code&gt;命令接受&lt;code&gt;&#39;g&#39;&lt;/code&gt;和&lt;code&gt;count&lt;/code&gt;作为后缀，还包括&lt;code&gt;&#39;p&#39;&lt;/code&gt;和&lt;code&gt;&#39;r&#39;&lt;/code&gt;后缀。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;g&#39;&lt;/code&gt;后缀切换上一个替换命令的&lt;strong&gt;全局&lt;/strong&gt;开关，并且重置&lt;code&gt;count&lt;/code&gt;的为 1。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;p&#39;&lt;/code&gt;后缀则切换上一个替换命令的&lt;strong&gt;打印&lt;/strong&gt;开关。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;r&#39;&lt;/code&gt;后缀导致命令在上一次&lt;strong&gt;查找的结果&lt;/strong&gt;上运行，而不是在&lt;strong&gt;替换过的结果&lt;/strong&gt;上运行(如果是在替换后再查找)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)t(.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将地址标识的行复制到命令右边地址标识的行之后。如果目标地址为 0，则意为复制到缓冲区开头。当前地址设置为复制出的最后一行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;u&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;撤销上一条命令的效果，恢复当前地址为执行命令前的地址。&lt;/p&gt;
&lt;p&gt;全局命令&lt;code&gt;&#39;g&#39;&lt;/code&gt;,&lt;code&gt;&#39;G&#39;&lt;/code&gt;,&lt;code&gt;&#39;v&#39;&lt;/code&gt;和&lt;code&gt;&#39;V&#39;&lt;/code&gt;对于 undo 作为单条命令看待。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;u&#39;&lt;/code&gt;命令与自己互逆，它只能撤销最后一条命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1,$)v/re/command-list&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与&lt;code&gt;&#39;g&#39;&lt;/code&gt;类似，但是作用于地址范围内不匹配&lt;code&gt;re&lt;/code&gt;的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1,$)V/re/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与&lt;code&gt;&#39;G&#39;&lt;/code&gt;类似，但是当遇到地址范围内不匹配&lt;code&gt;re&lt;/code&gt;的行会交互式的编辑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1,$)w file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将地址标记的行写入文件。目标文件的内容将被覆盖。若未设置默认文件名，则使用目标文件名作为默认名，否则文件名无变化。如果未指定目标文件名，则使用默认文件名。当前地址无变化。&lt;/p&gt;
&lt;p&gt;如果文件名以&lt;code&gt;!&lt;/code&gt;为前导，将被解释为 Shell 命令，并且地址标记的行将做为该 Shell 命令的标准输入，这种情况下默认文件名无变化。若试图通过&lt;code&gt;&#39;e&#39;&lt;/code&gt;或&lt;code&gt;&#39;q&#39;&lt;/code&gt;命令覆盖或丢弃缓冲器内容，缓冲区内容作为 Shell 命令的输入依然会得到警告。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1,$)wq file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将地址标记的行写入文件，然后退出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1,$)W file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;追加地址标记的行到文件结尾。与&lt;code&gt;&#39;w&#39;&lt;/code&gt;命令类似，除了不会覆盖目标文件的内容。当前地址不变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.)x&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将剪切缓冲区中的内容放置到地址标记行的后面。当前行被设置为最后拷贝的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)y&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拷贝地址标明的行到剪切缓冲区。能覆盖剪切缓冲区命令有：&lt;code&gt;&#39;c&#39;&lt;/code&gt;,&lt;code&gt;&#39;d&#39;&lt;/code&gt;,&lt;code&gt;&#39;j&#39;&lt;/code&gt;,&lt;code&gt;&#39;s&#39;&lt;/code&gt;,&lt;code&gt;&#39;y&#39;&lt;/code&gt;。当前地址不变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.+1)zn&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;滚动。从地址标记的行开始，一次打印 n 行，并设置窗口大小为 n。若未指定 n，则使用当前窗口大小。窗口的默认大小为屏幕尺寸减去 2 行，若屏幕尺寸无法确定则为 22 行。当前地址设置为最后被打印的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;!command&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;执行 Shell 命令。通过&lt;code&gt;sh(1)&lt;/code&gt;执行命令。&lt;code&gt;!!&lt;/code&gt;表示与上一条相同的命令。&lt;strong&gt;ed&lt;/strong&gt; 并不识别反斜杠&lt;code&gt;\&lt;/code&gt;转义。但是&lt;code&gt;%&lt;/code&gt;将被替换为默认的文件名。当从执行的命令中返回时，将在单独一行打印一个&lt;code&gt;!&lt;/code&gt;。当前行的地址不变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.,.)#&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注释。# 到换行符之间的内容都将被忽略。如果地址由&lt;code&gt;;&lt;/code&gt;分隔，则当前地址被设置成&lt;code&gt;;&lt;/code&gt;前的地址，否则，当前地址不变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;($)=&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印地址所标记的行号。不改变当前行地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(.+1)&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;空命令。单独打印地址标记的行。单一的&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;等价于&lt;code&gt;+1p&lt;/code&gt;。当前地址设置为被打印的行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;7-限制&#34;&gt;7 限制&lt;/h2&gt;
&lt;p&gt;如果终端挂起，&lt;strong&gt;ed&lt;/strong&gt; 将试图将缓冲区写入 ed.hup 文件，失败则写入  $HOME/ed.hup。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ed&lt;/strong&gt; 的 &lt;em&gt;file&lt;/em&gt; 参数中，任何前导反斜杠&lt;code&gt;\&lt;/code&gt;将被解释为字面的意思。比如：&lt;code&gt;ed &#39;hello\tworld&#39;&lt;/code&gt;将编辑名为：&#39;hellotworld&#39;的文件。&lt;/p&gt;
&lt;p&gt;如果文本文件不以&lt;code&gt;&amp;lt;newline&amp;gt;&lt;/code&gt;字符结尾，&lt;strong&gt;ed&lt;/strong&gt; 将在读写时追加该字符。在二进制文件中，则不然。一个二进制文件至少要包含一个 ASCII NUL 字符。如果最后一行被修改了，则在写入之前读取空文件(如：/dev/null)可防止将换行符附加到二进制文件中。&lt;/p&gt;
&lt;p&gt;为了跟踪缓冲区中的文本行，&lt;strong&gt;ed&lt;/strong&gt; 使用包含行的位置和尺寸的结构体的双向链表。每行的开销为：2个&#39;pointers&#39;，1个&#39;long int&#39;，1个&#39;int&#39;&lt;/p&gt;
&lt;h2 id=&#34;8-诊断&#34;&gt;8 诊断&lt;/h2&gt;
&lt;p&gt;如果 &lt;strong&gt;ed&lt;/strong&gt; 的输入是普通文件或 HEREDOC，则出错就直接退出。其他情况下的错误，&lt;strong&gt;ed&lt;/strong&gt; 只是打印一个问号&lt;code&gt;?&lt;/code&gt;后返回命令模式。最后一个错误的解释可以通过&lt;code&gt;&#39;h&#39;&lt;/code&gt;(help)命令查看。&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;&#39;u&#39;&lt;/code&gt;(undo)出现在全局命令列表中，则命令列表只执行一次。&lt;/p&gt;
&lt;p&gt;首次试图在一个修改过的缓冲区上执行退出命令或编辑另一个文件将报错；再次执行相同命令会成功，但缓冲区中的变更会丢失。&lt;/p&gt;
&lt;h2 id=&#34;9-报告-bugs&#34;&gt;9 报告 bugs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ed&lt;/strong&gt; 中可能有 bug。手册中也会有错误或遗漏。如果你报告了，则都会被修正。否则这些错误将永远被遗留在程序中。&lt;/p&gt;
&lt;p&gt;如果你发现了 &lt;strong&gt;ed&lt;/strong&gt; 中的 bug，请发送电子邮件到：bug-ed@gnu.org。并注明详细的版本号，这可以通过&lt;code&gt;ed --version&lt;/code&gt;查看。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命令字符的书写并不统一，比如：&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;和&lt;code&gt;&#39;p&#39;&lt;/code&gt;都表示打印命令&lt;/li&gt;
&lt;/ol&gt;

        
      </description>
    </item>
    
    <item>
      <title>GitLab on Docker 配置 SMTP 服务</title>
      <link>/post/original/gitlab/docker_smtp/</link>
      <pubDate>Sun, 03 Sep 2017 13:34:45 +0800</pubDate>
      
      <guid>/post/original/gitlab/docker_smtp/</guid>
      <description>
        
          &lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;
&lt;p&gt;gitlab 官方 docker 容器部署完毕。容器中的服务越少越好，所以使用外部 SMTP 发送邮件。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;撰写此文时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 17.06.1-ce&lt;/li&gt;
&lt;li&gt;GitLab Community Edition 9.5.2 ab97415&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;h3 id=&#34;网易-163-邮箱&#34;&gt;网易 163 邮箱&lt;/h3&gt;
&lt;h4 id=&#34;授权码设置&#34;&gt;授权码设置&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/gitlab_163mail_smtp/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;协议开启与服务器地址&#34;&gt;协议开启与服务器地址&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/gitlab_163mail_smtp/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;容器中的-etcgitlabgitlabrb&#34;&gt;容器中的 /etc/gitlab/gitlab.rb&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;### Email Settings&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# gitlab_rails[&amp;#39;gitlab_email_enabled&amp;#39;] = true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gitlab_email_from&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;yourname&amp;gt;@163.com&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# gitlab_rails[&amp;#39;gitlab_email_display_name&amp;#39;] = &amp;#39;Example&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# gitlab_rails[&amp;#39;gitlab_email_reply_to&amp;#39;] = &amp;#39;noreply@example.com&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# gitlab_rails[&amp;#39;gitlab_email_subject_suffix&amp;#39;] = &amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_enable&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_address&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;smtp.163.com&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_port&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;994&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_user_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;yourname&amp;gt;@163.com&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_password&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;your 163 auth code&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_domain&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;163.com&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_authentication&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:login&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_enable_starttls_auto&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_tls&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;###! **Can be: &amp;#39;none&amp;#39;, &amp;#39;peer&amp;#39;, &amp;#39;client_once&amp;#39;, &amp;#39;fail_if_no_peer_cert&amp;#39;**&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;###! Docs: http://api.rubyonrails.org/classes/ActionMailer/Base.html&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gitlab_rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_openssl_verify_mode&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;peer&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;注意事项&#34;&gt;注意事项&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;gitlab_rails[&#39;gitlab_email_from&#39;]&lt;/code&gt; 和 &lt;code&gt;gitlab_rails[&#39;smtp_user_name&#39;]&lt;/code&gt; 一致&lt;/p&gt;
&lt;p&gt;以下三项：改变其中一项设置，其他项需匹配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] = false&lt;/li&gt;
&lt;li&gt;gitlab_rails[&#39;smtp_tls&#39;] = true&lt;/li&gt;
&lt;li&gt;gitlab_rails[&#39;smtp_port&#39;] = 994&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置完毕：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.gitlab.com/omnibus/docker/README.html&#34;&gt;https://docs.gitlab.com/omnibus/docker/README.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.gitlab.com/omnibus/settings/smtp.html&#34;&gt;https://docs.gitlab.com/omnibus/settings/smtp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://wap.mail.163.com/xm/static/html/163_symbian_2.html&#34;&gt;http://wap.mail.163.com/xm/static/html/163_symbian_2.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文采用 &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;知识共享署名许可协议（CC-BY 4.0）&lt;/a&gt;进行许可，转载注明来源即可。如有错误劳烦评论或邮件指出。&lt;img src=&#34;/images/site/CC-BY_icon.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;

        
      </description>
    </item>
    
    <item>
      <title>邻位对换法生成全排列</title>
      <link>/post/original/cs/math/permutation/</link>
      <pubDate>Thu, 02 Feb 2017 17:16:09 +0800</pubDate>
      
      <guid>/post/original/cs/math/permutation/</guid>
      <description>
        
          &lt;h2 id=&#34;算法原理&#34;&gt;算法原理&lt;/h2&gt;
&lt;h3 id=&#34;相关算法插入法&#34;&gt;相关算法——插入法&lt;/h3&gt;
&lt;p&gt;对于集合&lt;/p&gt;
&lt;p&gt;$$
S=\{a_1, a_2, ..., a_n\}
$$&lt;/p&gt;
&lt;p&gt;若已知前 $n-1$ 个元素的全排列，则 $n$ 个元素的全排列&lt;/p&gt;
&lt;p&gt;$$
p_i=\{p_1,p_2,...,p_{(n-1)!}\}
$$&lt;/p&gt;
&lt;p&gt;可以这样生成：将 $a_n$ 插入 $p_i$ 不同位置中，由此，得到集合 $S$ 的全排列&lt;/p&gt;
&lt;p&gt;为什么这样操作能得到集合 $S$ 的全排列？因为每个 $p_i$ 的可能插入位置为 $n$ 个，所以总数是 $n!$ 又因为每个 $p_i$ 是不同的，因此，得到的排列必然没有重复&lt;/p&gt;
&lt;p&gt;&lt;code&gt;插入法&lt;/code&gt;有一个缺点：为了产生 $n$ 个元素的排列，必须知道并存储所有 $n-1$ 个元素的排列，然后才能产生出所有 $n$ 阶排列&lt;/p&gt;
&lt;h3 id=&#34;邻位对换法的改进&#34;&gt;邻位对换法的改进&lt;/h3&gt;
&lt;p&gt;依赖&lt;code&gt;插入法&lt;/code&gt;能够生成全排列的事实，但&lt;code&gt;邻位对换法&lt;/code&gt;不需要知道 $n-1$ 个元素的排列，只需要从某一个初始排列状态开始，进行特定的相邻元素交换即可生成全排列&lt;/p&gt;
&lt;h2 id=&#34;算法正确性&#34;&gt;算法正确性&lt;/h2&gt;
&lt;p&gt;假设算法对 $n$ 个元素能生成全排列，只需要证明其对 $n+1$ 个元素，也能生成全排列，对于新进来的元素，将其认为值最大，插入最右方，每次从右移到左，或者改变方向后从左移到右，就可以认为对于一个排列从不同位置插入生成一个新的排列，而原本 $n$ 个元素是全排列的，因此对于 $n+1$ 个元素也是全排列的，因此邻位对换法能生成全排列&lt;/p&gt;
&lt;p&gt;以 $S=\{1, 2, 3, 4\}$ 为例。若 $\{1, 2, 3\}$ 的全排列为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$p_1$&lt;/th&gt;
&lt;th&gt;$p_2$&lt;/th&gt;
&lt;th&gt;$p_3$&lt;/th&gt;
&lt;th&gt;$p_4$&lt;/th&gt;
&lt;th&gt;$p_5$&lt;/th&gt;
&lt;th&gt;$p_6$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;132&lt;/td&gt;
&lt;td&gt;312&lt;/td&gt;
&lt;td&gt;321&lt;/td&gt;
&lt;td&gt;231&lt;/td&gt;
&lt;td&gt;213&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;那么，将 $4$ 按从尾到头的方式插入每一个排列，就得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/post/original/cs/math/permutation1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;观察——&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第 1 列，&lt;strong&gt;从上往下&lt;/strong&gt;走&lt;br&gt;
第 2 列，&lt;strong&gt;从下往上&lt;/strong&gt;走&lt;br&gt;
第 3 列，&lt;strong&gt;从上往下&lt;/strong&gt;走&lt;br&gt;
．．．&lt;br&gt;
一直走到最后一列，&lt;strong&gt;当前方向&lt;/strong&gt;上的最后一格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;规律：&lt;strong&gt;路径上的任一排列是前一个排列交换两个相邻元素而得&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如 1423 ，它是由 1243 通过 4 与 2 换位得到&lt;/p&gt;
&lt;p&gt;即：一个排列，由上一排列通过交换该排列下标为 $k-1$ 和 $k$ 的元素得到，越界的情况由突变解决。&lt;/p&gt;
&lt;h2 id=&#34;算法步骤&#34;&gt;算法步骤&lt;/h2&gt;
&lt;p&gt;在上面的模式中，交换的下标 $k$ 的序列为（设元素下标从左到右）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3 2 1 {递减到1突变为3}&lt;br&gt;
1 2 3 {递增到3突变为1}&lt;br&gt;
3 2 1 {递减到1突变为3}&lt;br&gt;
1 2 3 {递增到3突变为1}&lt;br&gt;
3 2 1 {递减到1突变为3}&lt;br&gt;
1 2 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到：对元素个数为 $n$ 的集合 $S$，其交换下标 $k, k \in [1,n-1]$ 的序列有如下规律：&lt;/p&gt;
&lt;p&gt;1）开始时 $k = n-1$，每次减 $1$&lt;/p&gt;
&lt;p&gt;2）当减到 $1$ 或加到 $n-1$ 时，$k$ 值发生突变：若前一个 $k = 1$，则变为 $n-1$；若前一个 $k = n-1$，则变为 $1$&lt;/p&gt;
&lt;p&gt;3）$k$ 值突变后，新的 $k$ 以突变前的 $k$ 值开始递进（若是 $1$ 就递增，若是 $n-1$ 就递减）&lt;/p&gt;
&lt;p&gt;4）$k$ 值突变后的交换下标序列是突变前的序列关于突变位置的“镜像”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如：前 7 个交换下标 3 2 1  &lt;strong&gt;{3}&lt;/strong&gt; 1 2 3  （加粗的位置为突变位置）&lt;br&gt;
显然，突变位置后的下标 1 2 3 是突变前的下标 3 2 1 的&amp;quot;镜像&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据如上规律，可编写相应的算法实现&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;代码实现&lt;/h2&gt;
&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Permutation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;12345&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// System.out.println( result.length + &amp;#34;\r\n&amp;#34; );
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;charList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toCharArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;              &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;               &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;               &lt;span class=&#34;n&#34;&gt;inc&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;charList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;inc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;charList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;inc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;charList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrChars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;charList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define _swap(a, b) { int t = a; a = b; b = t; }
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;	&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxK&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;times&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// copy(list, list + n, ostream_iterator&amp;lt;int&amp;gt;(cout, &amp;#34; &amp;#34;)), cout &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;			&lt;span class=&#34;n&#34;&gt;_swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// copy(list, list + n, ostream_iterator&amp;lt;int&amp;gt;(cout, &amp;#34; &amp;#34;)), cout &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;maxK&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;_swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// copy(list, list + n, ostream_iterator&amp;lt;int&amp;gt;(cout, &amp;#34; &amp;#34;)), cout &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxK&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;说明&#34;&gt;说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;实现相同功能的递归实现较多，但时间与空间复杂度高&lt;/li&gt;
&lt;li&gt;不使用递归的代码看上去较多一点，但效能收益可观&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%A8%E6%8E%92%E5%88%97%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95&#34;&gt;全排列生成算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本文采用 &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;知识共享署名许可协议（CC-BY 4.0）&lt;/a&gt;进行许可，转载注明来源即可。如有错误劳烦评论或邮件指出。&lt;img src=&#34;/images/site/CC-BY_icon.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
